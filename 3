def _manage_course_teachers_paths(self):
    """إدارة مدرسي الدورات التخصصية مع السماح بالتكرار"""
    paths_window = tk.Toplevel(self)
    paths_window.title("مدرسين الدورات التخصصية")
    paths_window.geometry("1200x700")
    paths_window.configure(bg=self.COLORS["background"])

    paths_window.resizable(True, True)
    paths_window.minsize(1000, 600)
    paths_window.state('normal')

    # توسيط النافذة
    paths_window.update_idletasks()
    x = (paths_window.winfo_screenwidth() - 1200) // 2
    y = (paths_window.winfo_screenheight() - 700) // 2
    paths_window.geometry(f"1200x700+{x}+{y}")

    # شريط العنوان
    header_frame = tk.Frame(paths_window, bg="#1E3A5F", height=80)
    header_frame.pack(fill=tk.X)
    header_frame.pack_propagate(False)

    header_content = tk.Frame(header_frame, bg="#1E3A5F")
    header_content.pack(expand=True, fill=tk.BOTH, padx=30)

    title_label = tk.Label(
        header_content,
        text="مدرسين الدورات التخصصية",
        font=("Tajawal", 24, "bold"),
        bg="#1E3A5F",
        fg="white"
    )
    title_label.pack(side=tk.LEFT, pady=20)

    # إطار الأزرار في الشريط العلوي
    header_buttons = tk.Frame(header_content, bg="#1E3A5F")
    header_buttons.pack(side=tk.RIGHT, pady=20)

    # زر إضافة دورة
    add_course_btn = tk.Button(
        header_buttons,
        text="إضافة دورة",
        font=("Tajawal", 13, "bold"),
        bg="#4CAF50",
        fg="white",
        padx=20,
        pady=8,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2"
    )
    add_course_btn.pack(side=tk.LEFT, padx=(0, 10))

    # زر حذف دورة
    delete_course_btn = tk.Button(
        header_buttons,
        text="حذف دورة",
        font=("Tajawal", 13, "bold"),
        bg="#dc3545",
        fg="white",
        padx=20,
        pady=8,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2"
    )
    delete_course_btn.pack(side=tk.LEFT, padx=(0, 10))

    # زر تصدير البيانات
    export_btn = tk.Button(
        header_buttons,
        text="تصدير بيانات المدرسين",
        font=("Tajawal", 13, "bold"),
        bg="#FF9800",
        fg="white",
        padx=20,
        pady=8,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2"
    )
    export_btn.pack(side=tk.LEFT)

    # إطار البحث
    search_frame = tk.Frame(paths_window, bg=self.COLORS["surface"], height=70)
    search_frame.pack(fill=tk.X, padx=15, pady=(0, 10))
    search_frame.pack_propagate(False)

    search_container = tk.Frame(search_frame, bg=self.COLORS["surface"])
    search_container.pack(side=tk.LEFT, padx=20, pady=20)

    tk.Label(
        search_container,
        text="البحث عن دورة:",
        font=("Tajawal", 14, "bold"),
        bg=self.COLORS["surface"]
    ).pack(side=tk.LEFT, padx=(0, 10))

    search_entry = tk.Entry(
        search_container,
        font=("Tajawal", 13),
        width=30,
        bd=2,
        relief=tk.FLAT,
        highlightthickness=2,
        highlightcolor="#1E3A5F"
    )
    search_entry.pack(side=tk.LEFT)

    # خط فاصل
    separator = tk.Frame(paths_window, bg=self.COLORS["border"], height=2)
    separator.pack(fill=tk.X, padx=15, pady=(0, 10))

    # إطار الجدول الرئيسي
    main_table_frame = tk.Frame(paths_window, bg="#FFFFFF", bd=2, relief=tk.RIDGE)
    main_table_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(0, 10))

    table_frame = tk.Frame(main_table_frame, bg="#FFFFFF")
    table_frame.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)

    # شريط التمرير
    v_scrollbar = ttk.Scrollbar(table_frame, orient="vertical")
    v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # تنسيق Treeview
    style = ttk.Style()
    style.configure("Paths.Treeview",
                    background="#FFFFFF",
                    foreground="#000000",
                    rowheight=45,
                    fieldbackground="#FFFFFF",
                    font=("Tajawal", 14, "normal"),
                    borderwidth=1,
                    relief="solid")

    style.configure("Paths.Treeview.Heading",
                    font=("Tajawal", 16, "bold"),
                    background="#1E3A5F",
                    foreground="#FFFFFF",
                    relief="raised",
                    borderwidth=1,
                    padding=[10, 8])

    style.map('Paths.Treeview',
              background=[('selected', '#4682B4'),
                          ('active', '#E6F2FF')],
              foreground=[('selected', '#FFFFFF'),
                          ('active', '#000000')])

    # إنشاء الجدول
    paths_tree = ttk.Treeview(
        table_frame,
        columns=("course_name", "responsible_teacher", "substitute_teachers", "total"),
        show="tree headings",
        style="Paths.Treeview",
        yscrollcommand=v_scrollbar.set,
        height=12
    )

    # إخفاء عمود الشجرة
    paths_tree.column("#0", width=0, stretch=tk.NO)

    # تكوين الأعمدة
    column_configs = [
        ("course_name", "اسم الدورة", 400, tk.CENTER),
        ("responsible_teacher", "رئيس البرنامج التدريبي", 250, tk.CENTER),
        ("substitute_teachers", "هيئة التدريس", 350, tk.CENTER),
        ("total", "العدد الكلي", 120, tk.CENTER)
    ]

    for col_id, heading, width, anchor in column_configs:
        paths_tree.column(col_id, width=width, anchor=anchor, minwidth=width - 30)
        paths_tree.heading(col_id, text=heading, anchor=tk.CENTER)

    # تكوين ألوان الصفوف
    paths_tree.tag_configure('oddrow',
                             background='#FFFFFF',
                             font=("Tajawal", 13, "normal"))
    paths_tree.tag_configure('evenrow',
                             background='#F0F8FF',
                             font=("Tajawal", 13, "normal"))

    paths_tree.pack(fill=tk.BOTH, expand=True)
    v_scrollbar.config(command=paths_tree.yview)

    # دالة تحميل البيانات
    def load_course_paths(search_term=""):
        # مسح الجدول
        for item in paths_tree.get_children():
            paths_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()

            # الحصول على جميع الدورات من course_names
            if search_term:
                cursor.execute("""
                    SELECT DISTINCT name 
                    FROM course_names 
                    WHERE is_active = 1 AND LOWER(name) LIKE LOWER(?)
                    ORDER BY name
                """, (f'%{search_term}%',))
            else:
                cursor.execute("""
                    SELECT DISTINCT name 
                    FROM course_names 
                    WHERE is_active = 1
                    ORDER BY name
                """)

            all_courses = cursor.fetchall()

            for index, (course_name,) in enumerate(all_courses):
                # الحصول على المدرس المسؤول
                cursor.execute("""
                    SELECT t.name 
                    FROM course_teacher_paths ctp
                    JOIN teachers t ON ctp.teacher_id = t.id
                    WHERE ctp.course_name = ? AND ctp.is_responsible = 1
                """, (course_name,))

                responsible = cursor.fetchone()
                responsible_name = responsible[0] if responsible else "غير محدد"

                # الحصول على هيئة التدريس - منسوبي المدينة
                cursor.execute("""
                    SELECT t.name 
                    FROM course_teacher_paths ctp
                    JOIN teachers t ON ctp.teacher_id = t.id
                    WHERE ctp.course_name = ? AND ctp.is_responsible = 0
                    AND t.category = 'منسوبي المدينة'
                    ORDER BY t.name
                """, (course_name,))

                city_staff = cursor.fetchall()

                # الحصول على هيئة التدريس - المتعاونين
                cursor.execute("""
                    SELECT t.name 
                    FROM course_teacher_paths ctp
                    JOIN teachers t ON ctp.teacher_id = t.id
                    WHERE ctp.course_name = ? AND ctp.is_responsible = 0
                    AND t.category IN ('متعاون', 'متعاون مدني', 'متعاون عسكري', 'متعاون عسكري متقاعد')
                    ORDER BY t.name
                """, (course_name,))

                collaborators = cursor.fetchall()

                # تجميع الأعضاء
                all_members = []
                if city_staff:
                    all_members.append(
                        f"منسوبي المدينة ({len(city_staff)}): " + ", ".join([s[0] for s in city_staff]))
                if collaborators:
                    all_members.append(
                        f"المتعاونين ({len(collaborators)}): " + ", ".join([c[0] for c in collaborators]))

                substitute_names = " | ".join(all_members) if all_members else "لا يوجد"

                # العدد الكلي
                total_count = len(city_staff) + len(collaborators) + (1 if responsible else 0)

                # تحديد التاج
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'

                # إضافة للجدول
                paths_tree.insert("", tk.END, values=(
                    course_name,
                    responsible_name,
                    substitute_names,
                    total_count
                ), tags=(tag,))

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ في تحميل البيانات: {str(e)}")

    # دالة إضافة دورة جديدة
    def add_course_to_paths():
        """إضافة دورة جديدة لمسارات هيئة التدريس"""
        add_dialog = tk.Toplevel(paths_window)
        add_dialog.title("إضافة دورة")
        add_dialog.geometry("600x500")
        add_dialog.configure(bg=self.COLORS["surface"])
        add_dialog.transient(paths_window)
        add_dialog.grab_set()

        # توسيط النافذة
        add_dialog.update_idletasks()
        x = (add_dialog.winfo_screenwidth() - 600) // 2
        y = (add_dialog.winfo_screenheight() - 500) // 2
        add_dialog.geometry(f"600x500+{x}+{y}")

        # العنوان
        tk.Label(
            add_dialog,
            text="إضافة دورة لهيئة التدريس",
            font=("Tajawal", 16, "bold"),
            bg=self.COLORS["primary"],
            fg="white",
            pady=20
        ).pack(fill=tk.X)

        # إطار المحتوى
        content = tk.Frame(add_dialog, bg=self.COLORS["surface"], padx=30, pady=20)
        content.pack(fill=tk.BOTH, expand=True)

        # البحث
        tk.Label(
            content,
            text="البحث عن دورة:",
            font=("Tajawal", 12, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor=tk.W, pady=(0, 10))

        search_frame = tk.Frame(content, bg=self.COLORS["surface"])
        search_frame.pack(fill=tk.X, pady=(0, 20))

        search_entry = tk.Entry(
            search_frame,
            font=("Tajawal", 12),
            bd=2,
            relief=tk.FLAT,
            highlightthickness=2,
            highlightcolor=self.COLORS["primary"]
        )
        search_entry.pack(fill=tk.X)

        # قائمة الدورات
        list_frame = tk.Frame(content, bg="white", relief=tk.GROOVE, bd=2)
        list_frame.pack(fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        courses_listbox = tk.Listbox(
            list_frame,
            font=("Tajawal", 12),
            yscrollcommand=scrollbar.set,
            selectmode=tk.SINGLE
        )
        courses_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=courses_listbox.yview)

        # متغير لتخزين جميع الدورات المتاحة
        all_available_courses = []
        course_names_map = {}

        # تحميل الدورات المتاحة
        def load_available_courses():
            cursor = self.db_conn.cursor()

            # الحصول على جميع الدورات من course_names
            cursor.execute("""
                SELECT DISTINCT name 
                FROM course_names 
                WHERE is_active = 1 
                ORDER BY name
            """)

            all_courses = cursor.fetchall()

            # الحصول على الدورات التي لها مدرسين بالفعل
            cursor.execute("""
                SELECT DISTINCT course_name 
                FROM course_teacher_paths
            """)
            existing_courses = set([c[0] for c in cursor.fetchall()])

            # تحديد الدورات المتاحة (غير الموجودة في مسارات هيئة التدريس)
            all_available_courses.clear()
            course_names_map.clear()

            for i, (course_name,) in enumerate(all_courses):
                if course_name not in existing_courses:
                    all_available_courses.append(course_name)
                    course_names_map[i] = course_name

            # عرض جميع الدورات المتاحة
            update_course_list("")

        def update_course_list(search_text):
            """تحديث قائمة الدورات بناءً على البحث"""
            courses_listbox.delete(0, tk.END)

            search_text = search_text.strip().lower()

            for course_name in all_available_courses:
                if not search_text or search_text in course_name.lower():
                    courses_listbox.insert(tk.END, course_name)

        # ربط البحث
        def on_search_change(event=None):
            update_course_list(search_entry.get())

        search_entry.bind('<KeyRelease>', on_search_change)

        # إطار الأزرار
        btn_frame = tk.Frame(add_dialog, bg=self.COLORS["surface"])
        btn_frame.pack(fill=tk.X, pady=20)

        def confirm_add():
            selection = courses_listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار دورة")
                return

            selected_course_name = courses_listbox.get(selection[0])

            try:
                cursor = self.db_conn.cursor()

                # التحقق مرة أخرى من أن الدورة غير موجودة
                cursor.execute("""
                    SELECT COUNT(*) FROM course_teacher_paths 
                    WHERE course_name = ?
                """, (selected_course_name,))

                if cursor.fetchone()[0] > 0:
                    messagebox.showwarning("تنبيه", "هذه الدورة موجودة بالفعل في هيئة التدريس")
                    return

                add_dialog.destroy()

                messagebox.showinfo("نجاح",
                                    f"تمت إضافة دورة '{selected_course_name}' لهيئة التدريس\n"
                                    "يمكنك الآن تعيين رئيس البرنامج التدريبي والأعضاء")

                load_course_paths()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        tk.Button(
            btn_frame,
            text="إضافة",
            font=("Tajawal", 12, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=30,
            pady=8,
            cursor="hand2",
            command=confirm_add
        ).pack(side=tk.LEFT, padx=20)

        tk.Button(
            btn_frame,
            text="إلغاء",
            font=("Tajawal", 12, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=30,
            pady=8,
            cursor="hand2",
            command=add_dialog.destroy
        ).pack(side=tk.RIGHT, padx=20)

        # تحميل الدورات الأولية
        load_available_courses()

    # دالة حذف دورة من هيئة التدريس
    def delete_course_from_paths():
        """حذف دورة من مسارات هيئة التدريس مع جميع أعضائها"""
        selection = paths_tree.selection()
        if not selection:
            messagebox.showinfo("تنبيه", "يرجى اختيار دورة لحذفها")
            return

        item = paths_tree.item(selection[0])
        course_name = item['values'][0]

        result = messagebox.askyesno(
            "تأكيد الحذف",
            f"هل تريد حذف دورة '{course_name}' من هيئة التدريس؟\n\n"
            "سيتم حذف:\n"
            "• رئيس البرنامج التدريبي\n"
            "• جميع أعضاء هيئة التدريس\n\n"
            "ملاحظة: لن يتم حذف الدورة من مسميات الدورات"
        )

        if result:
            try:
                cursor = self.db_conn.cursor()

                cursor.execute("""
                    DELETE FROM course_teacher_paths 
                    WHERE course_name = ?
                """, (course_name,))

                self.db_conn.commit()

                paths_tree.delete(selection[0])

                messagebox.showinfo("نجاح", f"تم حذف دورة '{course_name}' من هيئة التدريس بنجاح")

            except Exception as e:
                self.db_conn.rollback()
                messagebox.showerror("خطأ", f"حدث خطأ أثناء الحذف: {str(e)}")

    # دالة إدارة مدرسي الدورة المحدثة - السماح بالتكرار
    def manage_course_teachers(event=None):
        """إدارة مدرسي الدورة مع السماح بالتكرار في دورات أخرى"""
        selection = paths_tree.selection()
        if not selection:
            return

        item = paths_tree.item(selection[0])
        course_name = item['values'][0]

        # نافذة إدارة مدرسي الدورة
        manage_window = tk.Toplevel(paths_window)
        manage_window.title(f"إدارة هيئة التدريس - {course_name}")
        manage_window.geometry("1200x750")
        manage_window.configure(bg="#F5F5F5")
        manage_window.resizable(True, True)
        manage_window.minsize(1100, 700)

        # توسيط النافذة
        manage_window.update_idletasks()
        x = (manage_window.winfo_screenwidth() - 1200) // 2
        y = (manage_window.winfo_screenheight() - 750) // 2
        manage_window.geometry(f"1200x750+{x}+{y}")

        # شريط العنوان الرئيسي
        header_frame = tk.Frame(manage_window, bg="#1E3A5F", height=70)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        header_content = tk.Frame(header_frame, bg="#1E3A5F")
        header_content.pack(expand=True)

        tk.Label(
            header_content,
            text="إدارة هيئة التدريس",
            font=("Tajawal", 20, "bold"),
            bg="#1E3A5F",
            fg="white"
        ).pack()

        tk.Label(
            header_content,
            text=f"دورة: {course_name}",
            font=("Tajawal", 14),
            bg="#1E3A5F",
            fg="#E0E0E0"
        ).pack()

        # إطار المحتوى الرئيسي
        main_container = tk.Frame(manage_window, bg="#F5F5F5")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)

        # القسم الأول: المدرس المسؤول
        responsible_frame = tk.Frame(main_container, bg="#FFFFFF", bd=1, relief=tk.RIDGE)
        responsible_frame.pack(fill=tk.X, pady=(0, 15))

        # رأس قسم المسؤول
        resp_header = tk.Frame(responsible_frame, bg="#2C3E50", height=40)
        resp_header.pack(fill=tk.X)
        resp_header.pack_propagate(False)

        tk.Label(
            resp_header,
            text=f"رئيس البرنامج التدريبي لـ ({course_name})",
            font=("Tajawal", 14, "bold"),
            bg="#2C3E50",
            fg="white"
        ).pack(expand=True)

        # محتوى قسم المسؤول
        resp_content = tk.Frame(responsible_frame, bg="#FFFFFF", padx=20, pady=15)
        resp_content.pack(fill=tk.BOTH)

        # تقسيم أفقي
        resp_content.grid_columnconfigure(0, weight=1)
        resp_content.grid_columnconfigure(1, weight=1)

        # الجانب الأيمن - المسؤول الحالي
        right_resp = tk.Frame(resp_content, bg="#FFFFFF")
        right_resp.grid(row=0, column=1, sticky="nsew", padx=(10, 0))

        tk.Label(
            right_resp,
            text="الرئيس الحالي",
            font=("Tajawal", 13, "bold"),
            bg="#FFFFFF",
            fg="#2C3E50"
        ).pack(anchor=tk.E, pady=(0, 10))

        # إطار عرض المسؤول
        current_resp_frame = tk.Frame(right_resp, bg="#F8F9FA", relief=tk.RIDGE, bd=1, height=70)
        current_resp_frame.pack(fill=tk.X)
        current_resp_frame.pack_propagate(False)

        current_responsible_label = tk.Label(
            current_resp_frame,
            text="",
            font=("Tajawal", 12),
            bg="#F8F9FA",
            fg="#333333",
            justify=tk.CENTER
        )
        current_responsible_label.pack(expand=True)

        # زر حذف المسؤول
        remove_resp_btn = tk.Button(
            right_resp,
            text="حذف الرئيس",
            font=("Tajawal", 11, "bold"),
            bg="#B03A2E",
            fg="white",
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            padx=15,
            pady=6
        )
        remove_resp_btn.pack(pady=(10, 0))

        # الجانب الأيسر - البحث وتعيين
        left_resp = tk.Frame(resp_content, bg="#FFFFFF")
        left_resp.grid(row=0, column=0, sticky="nsew", padx=(0, 10))

        tk.Label(
            left_resp,
            text="تعيين رئيس جديد",
            font=("Tajawal", 13, "bold"),
            bg="#FFFFFF",
            fg="#2C3E50"
        ).pack(anchor=tk.E, pady=(0, 10))

        # البحث
        search_container = tk.Frame(left_resp, bg="#FFFFFF")
        search_container.pack(fill=tk.X, pady=(0, 8))

        tk.Label(
            search_container,
            text="البحث:",
            font=("Tajawal", 12),
            bg="#FFFFFF",
            fg="#666"
        ).pack(side=tk.RIGHT, padx=(0, 8))

        responsible_search_entry = tk.Entry(
            search_container,
            font=("Tajawal", 12),
            bd=1,
            relief=tk.SOLID,
            highlightthickness=1,
            highlightcolor="#1E3A5F"
        )
        responsible_search_entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)

        # قائمة البحث
        list_frame = tk.Frame(left_resp, bg="#FFFFFF", relief=tk.RIDGE, bd=1)
        list_frame.pack(fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(list_frame, width=12)
        scrollbar.pack(side=tk.LEFT, fill=tk.Y)

        responsible_listbox = tk.Listbox(
            list_frame,
            font=("Tajawal", 11),
            height=4,
            bd=0,
            highlightthickness=0,
            yscrollcommand=scrollbar.set,
            bg="#FAFAFA",
            fg="#333333",
            selectbackground="#E3F2FD",
            selectforeground="#0D47A1"
        )
        responsible_listbox.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=responsible_listbox.yview)

        # زر التعيين
        assign_resp_btn = tk.Button(
            left_resp,
            text="تعيين كرئيس",
            font=("Tajawal", 11, "bold"),
            bg="#3498DB",
            fg="white",
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            padx=15,
            pady=6
        )
        assign_resp_btn.pack(pady=(8, 0))

        # القسم الثاني: أعضاء هيئة التدريس - مقسم إلى قسمين
        members_container = tk.Frame(main_container, bg="#F5F5F5")
        members_container.pack(fill=tk.BOTH, expand=True)

        # القسم الأيمن - منسوبي المدينة
        city_staff_frame = tk.Frame(members_container, bg="#FFFFFF", bd=1, relief=tk.RIDGE)
        city_staff_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))

        # رأس قسم منسوبي المدينة
        city_header = tk.Frame(city_staff_frame, bg="#1B4F72", height=40)
        city_header.pack(fill=tk.X)
        city_header.pack_propagate(False)

        city_header_content = tk.Frame(city_header, bg="#1B4F72")
        city_header_content.pack(expand=True)

        tk.Label(
            city_header_content,
            text="أعضاء هيئة التدريس - منسوبي المدينة",
            font=("Tajawal", 14, "bold"),
            bg="#1B4F72",
            fg="white"
        ).pack(side=tk.RIGHT)

        city_count_label = tk.Label(
            city_header_content,
            text="",
            font=("Tajawal", 12),
            bg="#1B4F72",
            fg="white"
        )
        city_count_label.pack(side=tk.RIGHT, padx=(15, 0))

        # محتوى قسم منسوبي المدينة
        city_content = tk.Frame(city_staff_frame, bg="#FFFFFF", padx=15, pady=15)
        city_content.pack(fill=tk.BOTH, expand=True)

        # البحث في منسوبي المدينة
        city_search_frame = tk.Frame(city_content, bg="#FFFFFF")
        city_search_frame.pack(fill=tk.X, pady=(0, 10))

        tk.Label(
            city_search_frame,
            text="البحث:",
            font=("Tajawal", 12),
            bg="#FFFFFF",
            fg="#666"
        ).pack(side=tk.RIGHT, padx=(0, 8))

        city_search_entry = tk.Entry(
            city_search_frame,
            font=("Tajawal", 12),
            bd=1,
            relief=tk.SOLID,
            highlightthickness=1,
            highlightcolor="#1B4F72"
        )
        city_search_entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)

        # قائمة البحث لمنسوبي المدينة
        city_search_list_frame = tk.Frame(city_content, bg="#FFFFFF", relief=tk.RIDGE, bd=1)
        city_search_list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))

        city_search_scrollbar = tk.Scrollbar(city_search_list_frame, width=12)
        city_search_scrollbar.pack(side=tk.LEFT, fill=tk.Y)

        city_search_listbox = tk.Listbox(
            city_search_list_frame,
            font=("Tajawal", 11),
            height=6,
            bd=0,
            highlightthickness=0,
            yscrollcommand=city_search_scrollbar.set,
            bg="#FAFAFA",
            fg="#333333",
            selectbackground="#D4E6F1",
            selectforeground="#1B4F72"
        )
        city_search_listbox.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        city_search_scrollbar.config(command=city_search_listbox.yview)

        # إطار الأزرار لمنسوبي المدينة
        city_buttons_frame = tk.Frame(city_content, bg="#FFFFFF")
        city_buttons_frame.pack(pady=(5, 10))

        # زر إضافة منسوب مدينة
        add_city_btn = tk.Button(
            city_buttons_frame,
            text="إضافة العضو",
            font=("Tajawal", 11, "bold"),
            bg="#2874A6",
            fg="white",
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            padx=15,
            pady=6
        )
        add_city_btn.pack(side=tk.RIGHT, padx=10)

        # زر حذف منسوب مدينة
        remove_city_btn = tk.Button(
            city_buttons_frame,
            text="حذف العضو المحدد",
            font=("Tajawal", 11, "bold"),
            bg="#B03A2E",
            fg="white",
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            padx=15,
            pady=6
        )
        remove_city_btn.pack(side=tk.RIGHT, padx=10)

        # خط فاصل
        tk.Frame(city_content, bg="#E0E0E0", height=2).pack(fill=tk.X, pady=10)

        # الأعضاء الحاليون من منسوبي المدينة
        tk.Label(
            city_content,
            text="الأعضاء الحاليون:",
            font=("Tajawal", 12, "bold"),
            bg="#FFFFFF",
            fg="#1B4F72"
        ).pack(anchor=tk.E, pady=(0, 10))

        city_members_frame = tk.Frame(city_content, bg="#FFFFFF", relief=tk.RIDGE, bd=1)
        city_members_frame.pack(fill=tk.BOTH, expand=True)

        city_members_scrollbar = tk.Scrollbar(city_members_frame, width=12)
        city_members_scrollbar.pack(side=tk.LEFT, fill=tk.Y)

        city_members_listbox = tk.Listbox(
            city_members_frame,
            font=("Tajawal", 11),
            height=6,
            bd=0,
            highlightthickness=0,
            yscrollcommand=city_members_scrollbar.set,
            bg="#EBF5FB",
            fg="#333333",
            selectbackground="#FFEBEE",
            selectforeground="#B71C1C"
        )
        city_members_listbox.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        city_members_scrollbar.config(command=city_members_listbox.yview)

        # القسم الأيسر - المتعاونين
        collaborators_frame = tk.Frame(members_container, bg="#FFFFFF", bd=1, relief=tk.RIDGE)
        collaborators_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

        # رأس قسم المتعاونين
        collab_header = tk.Frame(collaborators_frame, bg="#424949", height=40)
        collab_header.pack(fill=tk.X)
        collab_header.pack_propagate(False)

        collab_header_content = tk.Frame(collab_header, bg="#424949")
        collab_header_content.pack(expand=True)

        tk.Label(
            collab_header_content,
            text="أعضاء هيئة التدريس - المتعاونين",
            font=("Tajawal", 14, "bold"),
            bg="#424949",
            fg="white"
        ).pack(side=tk.RIGHT)

        collab_count_label = tk.Label(
            collab_header_content,
            text="",
            font=("Tajawal", 12),
            bg="#424949",
            fg="white"
        )
        collab_count_label.pack(side=tk.RIGHT, padx=(15, 0))

        # محتوى قسم المتعاونين
        collab_content = tk.Frame(collaborators_frame, bg="#FFFFFF", padx=15, pady=15)
        collab_content.pack(fill=tk.BOTH, expand=True)

        # البحث في المتعاونين
        collab_search_frame = tk.Frame(collab_content, bg="#FFFFFF")
        collab_search_frame.pack(fill=tk.X, pady=(0, 10))

        tk.Label(
            collab_search_frame,
            text="البحث:",
            font=("Tajawal", 12),
            bg="#FFFFFF",
            fg="#666"
        ).pack(side=tk.RIGHT, padx=(0, 8))

        collab_search_entry = tk.Entry(
            collab_search_frame,
            font=("Tajawal", 12),
            bd=1,
            relief=tk.SOLID,
            highlightthickness=1,
            highlightcolor="#424949"
        )
        collab_search_entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)

        # قائمة البحث للمتعاونين
        collab_search_list_frame = tk.Frame(collab_content, bg="#FFFFFF", relief=tk.RIDGE, bd=1)
        collab_search_list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))

        collab_search_scrollbar = tk.Scrollbar(collab_search_list_frame, width=12)
        collab_search_scrollbar.pack(side=tk.LEFT, fill=tk.Y)

        collab_search_listbox = tk.Listbox(
            collab_search_list_frame,
            font=("Tajawal", 11),
            height=6,
            bd=0,
            highlightthickness=0,
            yscrollcommand=collab_search_scrollbar.set,
            bg="#FAFAFA",
            fg="#333333",
            selectbackground="#D5DBDB",
            selectforeground="#212F3C"
        )
        collab_search_listbox.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        collab_search_scrollbar.config(command=collab_search_listbox.yview)

        # إطار الأزرار للمتعاونين
        collab_buttons_frame = tk.Frame(collab_content, bg="#FFFFFF")
        collab_buttons_frame.pack(pady=(5, 10))

        # زر إضافة متعاون
        add_collab_btn = tk.Button(
            collab_buttons_frame,
            text="إضافة العضو",
            font=("Tajawal", 11, "bold"),
            bg="#5D6D7E",
            fg="white",
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            padx=15,
            pady=6
        )
        add_collab_btn.pack(side=tk.RIGHT, padx=10)

        # زر حذف متعاون
        remove_collab_btn = tk.Button(
            collab_buttons_frame,
            text="حذف العضو المحدد",
            font=("Tajawal", 11, "bold"),
            bg="#B03A2E",
            fg="white",
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            padx=15,
            pady=6
        )
        remove_collab_btn.pack(side=tk.RIGHT, padx=10)

        # خط فاصل
        tk.Frame(collab_content, bg="#E0E0E0", height=2).pack(fill=tk.X, pady=10)

        # الأعضاء الحاليون من المتعاونين
        tk.Label(
            collab_content,
            text="الأعضاء الحاليون:",
            font=("Tajawal", 12, "bold"),
            bg="#FFFFFF",
            fg="#424949"
        ).pack(anchor=tk.E, pady=(0, 10))

        collab_members_frame = tk.Frame(collab_content, bg="#FFFFFF", relief=tk.RIDGE, bd=1)
        collab_members_frame.pack(fill=tk.BOTH, expand=True)

        collab_members_scrollbar = tk.Scrollbar(collab_members_frame, width=12)
        collab_members_scrollbar.pack(side=tk.LEFT, fill=tk.Y)

        collab_members_listbox = tk.Listbox(
            collab_members_frame,
            font=("Tajawal", 11),
            height=6,
            bd=0,
            highlightthickness=0,
            yscrollcommand=collab_members_scrollbar.set,
            bg="#F4F6F6",
            fg="#333333",
            selectbackground="#FFEBEE",
            selectforeground="#B71C1C"
        )
        collab_members_listbox.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        collab_members_scrollbar.config(command=collab_members_listbox.yview)

        # الشريط السفلي
        footer_frame = tk.Frame(manage_window, bg="#1E3A5F", height=50)
        footer_frame.pack(fill=tk.X)
        footer_frame.pack_propagate(False)

        close_btn = tk.Button(
            footer_frame,
            text="إغلاق",
            font=("Tajawal", 13, "bold"),
            bg="#34495E",
            fg="white",
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            padx=35,
            pady=10,
            command=lambda: [manage_window.destroy(), load_course_paths(search_entry.get())]
        )
        close_btn.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

        # maps لتخزين معرفات المدرسين
        manage_window.city_members_map = {}
        manage_window.collab_members_map = {}
        manage_window.city_search_map = {}
        manage_window.collab_search_map = {}
        manage_window.responsible_map = {}

        # تحميل البيانات الحالية
        def load_current_data():
            cursor = self.db_conn.cursor()

            # تحميل المدرس المسؤول
            cursor.execute("""
                SELECT t.id, t.name, t.rank, t.workplace
                FROM course_teacher_paths ctp
                JOIN teachers t ON ctp.teacher_id = t.id
                WHERE ctp.course_name = ? AND ctp.is_responsible = 1
            """, (course_name,))

            responsible = cursor.fetchone()
            if responsible:
                current_responsible_label.config(
                    text=f"{responsible[2]} - {responsible[1]}",
                    font=("Tajawal", 11, "bold")
                )
                remove_resp_btn.config(state=tk.NORMAL)
            else:
                current_responsible_label.config(
                    text="لم يتم تعيين مسؤول بعد",
                    fg="#999999",
                    font=("Tajawal", 11, "italic")
                )
                remove_resp_btn.config(state=tk.DISABLED)

            # تحميل أعضاء هيئة التدريس - منسوبي المدينة
            city_members_listbox.delete(0, tk.END)
            manage_window.city_members_map.clear()

            cursor.execute("""
                SELECT t.id, t.name, t.rank, t.workplace
                FROM course_teacher_paths ctp
                JOIN teachers t ON ctp.teacher_id = t.id
                WHERE ctp.course_name = ? AND ctp.is_responsible = 0
                AND t.category = 'منسوبي المدينة'
                ORDER BY t.name
            """, (course_name,))

            city_members = cursor.fetchall()

            # الحصول على الدورات الأخرى لكل مدرس
            for i, (teacher_id, name, rank, workplace) in enumerate(city_members):
                # استعلام منفصل للحصول على الدورات الأخرى
                cursor.execute("""
                    SELECT course_name 
                    FROM course_teacher_paths 
                    WHERE teacher_id = ? AND course_name != ?
                """, (teacher_id, course_name))

                other_courses = [row[0] for row in cursor.fetchall()]

                display_text = f"{rank} - {name}"
                if other_courses:
                    display_text += f" (يدرس أيضاً في: {', '.join(other_courses)})"

                city_members_listbox.insert(tk.END, display_text)
                manage_window.city_members_map[i] = teacher_id

            city_count_label.config(text=f"العدد: {len(city_members)}")

            # تحميل أعضاء هيئة التدريس - المتعاونين
            collab_members_listbox.delete(0, tk.END)
            manage_window.collab_members_map.clear()

            cursor.execute("""
                SELECT t.id, t.name, t.rank, t.workplace, t.category
                FROM course_teacher_paths ctp
                JOIN teachers t ON ctp.teacher_id = t.id
                WHERE ctp.course_name = ? AND ctp.is_responsible = 0
                AND t.category IN ('متعاون', 'متعاون مدني', 'متعاون عسكري', 'متعاون عسكري متقاعد')
                ORDER BY t.name
            """, (course_name,))

            collab_members = cursor.fetchall()

            # الحصول على الدورات الأخرى لكل متعاون
            for i, (teacher_id, name, rank, workplace, category) in enumerate(collab_members):
                # استعلام منفصل للحصول على الدورات الأخرى
                cursor.execute("""
                    SELECT course_name 
                    FROM course_teacher_paths 
                    WHERE teacher_id = ? AND course_name != ?
                """, (teacher_id, course_name))

                other_courses = [row[0] for row in cursor.fetchall()]

                display_text = f"{rank} - {name} ({category})"
                if other_courses:
                    display_text += f" (يدرس أيضاً في: {', '.join(other_courses)})"

                collab_members_listbox.insert(tk.END, display_text)
                manage_window.collab_members_map[i] = teacher_id

            collab_count_label.config(text=f"العدد: {len(collab_members)}")

        # البحث عن المدرسين للمسؤول (يبحث في الجميع)
        def search_responsible_teachers(*args):
            search_term = responsible_search_entry.get().strip()
            responsible_listbox.delete(0, tk.END)

            if len(search_term) < 1:
                return

            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT t.id, t.name, t.rank, t.workplace, t.category
                FROM teachers t
                WHERE LOWER(t.name) LIKE LOWER(?)
                ORDER BY t.name
                LIMIT 20
            """, (f'%{search_term}%',))

            teachers = cursor.fetchall()
            manage_window.responsible_map.clear()

            for i, (teacher_id, name, rank, workplace, category) in enumerate(teachers):
                # الحصول على الدورات لكل مدرس
                cursor.execute("""
                    SELECT course_name 
                    FROM course_teacher_paths 
                    WHERE teacher_id = ?
                """, (teacher_id,))

                courses = [row[0] for row in cursor.fetchall()]

                display_text = f"{rank} - {name}"
                if courses:
                    display_text += f" (متخصص في: {', '.join(courses)})"

                responsible_listbox.insert(tk.END, display_text)
                manage_window.responsible_map[i] = teacher_id

        # البحث في منسوبي المدينة
        def search_city_teachers(*args):
            search_term = city_search_entry.get().strip()
            city_search_listbox.delete(0, tk.END)

            if len(search_term) < 1:
                return

            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT t.id, t.name, t.rank, t.workplace
                FROM teachers t
                WHERE LOWER(t.name) LIKE LOWER(?)
                AND t.category = 'منسوبي المدينة'
                ORDER BY t.name
                LIMIT 20
            """, (f'%{search_term}%',))

            teachers = cursor.fetchall()
            manage_window.city_search_map.clear()

            for i, (teacher_id, name, rank, workplace) in enumerate(teachers):
                # الحصول على الدورات لكل مدرس
                cursor.execute("""
                    SELECT course_name 
                    FROM course_teacher_paths 
                    WHERE teacher_id = ?
                """, (teacher_id,))

                courses = [row[0] for row in cursor.fetchall()]

                display_text = f"{rank} - {name}"
                if courses:
                    display_text += f" (متخصص في: {', '.join(courses)})"

                city_search_listbox.insert(tk.END, display_text)
                manage_window.city_search_map[i] = teacher_id

        # البحث في المتعاونين
        def search_collab_teachers(*args):
            search_term = collab_search_entry.get().strip()
            collab_search_listbox.delete(0, tk.END)

            if len(search_term) < 1:
                return

            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT t.id, t.name, t.rank, t.workplace, t.category
                FROM teachers t
                WHERE LOWER(t.name) LIKE LOWER(?)
                AND t.category IN ('متعاون', 'متعاون مدني', 'متعاون عسكري', 'متعاون عسكري متقاعد')
                ORDER BY t.name
                LIMIT 20
            """, (f'%{search_term}%',))

            teachers = cursor.fetchall()
            manage_window.collab_search_map.clear()

            for i, (teacher_id, name, rank, workplace, category) in enumerate(teachers):
                # الحصول على الدورات لكل مدرس
                cursor.execute("""
                    SELECT course_name 
                    FROM course_teacher_paths 
                    WHERE teacher_id = ?
                """, (teacher_id,))

                courses = [row[0] for row in cursor.fetchall()]

                display_text = f"{rank} - {name} ({category})"
                if courses:
                    display_text += f" (متخصص في: {', '.join(courses)})"

                collab_search_listbox.insert(tk.END, display_text)
                manage_window.collab_search_map[i] = teacher_id

        # تعيين مدرس مسؤول - السماح بالتكرار
        def assign_responsible():
            selection = responsible_listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار مدرس من القائمة")
                return

            teacher_id = manage_window.responsible_map[selection[0]]

            # التحقق من عدم وجود المدرس كمسؤول في نفس الدورة
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT COUNT(*) FROM course_teacher_paths
                WHERE teacher_id = ? AND course_name = ? AND is_responsible = 1
            """, (teacher_id, course_name))

            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("تنبيه", "هذا المدرس هو المسؤول الحالي بالفعل")
                return

            if messagebox.askyesno("تأكيد", "هل تريد تعيين هذا المدرس كرئيس للبرنامج التدريبي؟"):
                try:
                    cursor = self.db_conn.cursor()

                    # إلغاء أي مسؤول سابق
                    cursor.execute("""
                        UPDATE course_teacher_paths 
                        SET is_responsible = 0 
                        WHERE course_name = ? AND is_responsible = 1
                    """, (course_name,))

                    # التحقق من وجود السجل أولاً
                    cursor.execute("""
                        SELECT COUNT(*) FROM course_teacher_paths
                        WHERE course_name = ? AND teacher_id = ?
                    """, (course_name, teacher_id))

                    if cursor.fetchone()[0] > 0:
                        # تحديث السجل الموجود
                        cursor.execute("""
                            UPDATE course_teacher_paths 
                            SET is_responsible = 1 
                            WHERE course_name = ? AND teacher_id = ?
                        """, (course_name, teacher_id))
                    else:
                        # إضافة سجل جديد
                        cursor.execute("""
                            INSERT INTO course_teacher_paths (course_name, teacher_id, is_responsible, created_date)
                            VALUES (?, ?, 1, ?)
                        """, (course_name, teacher_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

                    self.db_conn.commit()

                    load_current_data()
                    responsible_search_entry.delete(0, tk.END)
                    responsible_listbox.delete(0, tk.END)

                    messagebox.showinfo("نجاح", "تم تعيين رئيس البرنامج التدريبي بنجاح")

                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # حذف المسؤول
        def remove_responsible():
            if messagebox.askyesno("تأكيد", "هل تريد حذف المسؤول الحالي؟"):
                try:
                    cursor = self.db_conn.cursor()
                    cursor.execute("""
                        DELETE FROM course_teacher_paths 
                        WHERE course_name = ? AND is_responsible = 1
                    """, (course_name,))

                    self.db_conn.commit()
                    load_current_data()
                    messagebox.showinfo("نجاح", "تم حذف المسؤول بنجاح")

                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # إضافة منسوب مدينة - السماح بالتكرار
        def add_city_member():
            selection = city_search_listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار مدرس من القائمة")
                return

            teacher_id = manage_window.city_search_map[selection[0]]

            # التحقق من عدم وجود المدرس في نفس الدورة
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT COUNT(*) FROM course_teacher_paths 
                WHERE teacher_id = ? AND course_name = ?
            """, (teacher_id, course_name))

            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("تنبيه", "هذا المدرس موجود بالفعل في هذه الدورة")
                return

            try:
                cursor = self.db_conn.cursor()

                cursor.execute("""
                    INSERT INTO course_teacher_paths (course_name, teacher_id, is_responsible, created_date)
                    VALUES (?, ?, 0, ?)
                """, (course_name, teacher_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

                self.db_conn.commit()

                load_current_data()
                city_search_entry.delete(0, tk.END)
                city_search_listbox.delete(0, tk.END)

                messagebox.showinfo("نجاح", "تمت إضافة العضو بنجاح")

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # إضافة متعاون - السماح بالتكرار
        def add_collab_member():
            selection = collab_search_listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار مدرس من القائمة")
                return

            teacher_id = manage_window.collab_search_map[selection[0]]

            # التحقق من عدم وجود المدرس في نفس الدورة
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT COUNT(*) FROM course_teacher_paths 
                WHERE teacher_id = ? AND course_name = ?
            """, (teacher_id, course_name))

            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("تنبيه", "هذا المدرس موجود بالفعل في هذه الدورة")
                return

            try:
                cursor = self.db_conn.cursor()

                cursor.execute("""
                    INSERT INTO course_teacher_paths (course_name, teacher_id, is_responsible, created_date)
                    VALUES (?, ?, 0, ?)
                """, (course_name, teacher_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

                self.db_conn.commit()

                load_current_data()
                collab_search_entry.delete(0, tk.END)
                collab_search_listbox.delete(0, tk.END)

                messagebox.showinfo("نجاح", "تمت إضافة العضو بنجاح")

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # حذف منسوب مدينة
        def remove_city_member():
            selection = city_members_listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار عضو للحذف")
                return

            teacher_id = manage_window.city_members_map[selection[0]]

            if messagebox.askyesno("تأكيد", "هل تريد حذف هذا العضو من هيئة التدريس لهذه الدورة؟"):
                try:
                    cursor = self.db_conn.cursor()
                    cursor.execute("""
                        DELETE FROM course_teacher_paths 
                        WHERE course_name = ? AND teacher_id = ? AND is_responsible = 0
                    """, (course_name, teacher_id))

                    self.db_conn.commit()
                    load_current_data()

                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # حذف متعاون
        def remove_collab_member():
            selection = collab_members_listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار عضو للحذف")
                return

            teacher_id = manage_window.collab_members_map[selection[0]]

            if messagebox.askyesno("تأكيد", "هل تريد حذف هذا العضو من هيئة التدريس لهذه الدورة؟"):
                try:
                    cursor = self.db_conn.cursor()
                    cursor.execute("""
                        DELETE FROM course_teacher_paths 
                        WHERE course_name = ? AND teacher_id = ? AND is_responsible = 0
                    """, (course_name, teacher_id))

                    self.db_conn.commit()
                    load_current_data()

                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # ربط الأحداث
        responsible_search_entry.bind('<KeyRelease>', search_responsible_teachers)
        city_search_entry.bind('<KeyRelease>', search_city_teachers)
        collab_search_entry.bind('<KeyRelease>', search_collab_teachers)

        assign_resp_btn.config(command=assign_responsible)
        remove_resp_btn.config(command=remove_responsible)
        add_city_btn.config(command=add_city_member)
        add_collab_btn.config(command=add_collab_member)
        remove_city_btn.config(command=remove_city_member)
        remove_collab_btn.config(command=remove_collab_member)

        # تحميل البيانات الأولية
        load_current_data()

    # دالة تصدير البيانات محدثة
    def export_faculty_data():
        """تصدير بيانات هيئة التدريس مع الدورات المتخصص فيها"""
        try:
            from tkinter import filedialog
            import openpyxl
            from openpyxl.styles import Alignment, Font, PatternFill, Border, Side

            # اختيار مكان الحفظ
            file_path = filedialog.asksaveasfilename(
                title="حفظ بيانات هيئة التدريس",
                defaultextension=".xlsx",
                initialfile=f"هيئة_التدريس_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
            )

            if not file_path:
                return

            cursor = self.db_conn.cursor()

            # الحصول على جميع الدورات
            cursor.execute("""
                SELECT DISTINCT course_name 
                FROM course_teacher_paths 
                ORDER BY course_name
            """)
            courses = cursor.fetchall()

            # إنشاء ملف Excel
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "هيئة التدريس"

            # تعيين اتجاه الورقة من اليمين لليسار
            ws.sheet_view.rightToLeft = True

            # العناوين
            headers = ["م", "اسم الدورة", "رئيس البرنامج التدريبي", "منسوبي المدينة", "المتعاونين", "العدد الكلي"]

            # كتابة العناوين
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font = Font(name='Arial', size=14, bold=True, color="FFFFFF")
                cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                cell.fill = PatternFill(start_color="1E3A5F", end_color="1E3A5F", fill_type="solid")

            # تنسيق الحدود
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )

            # كتابة البيانات
            row_num = 2
            for idx, (course_name,) in enumerate(courses, 1):
                # المسؤول
                cursor.execute("""
                    SELECT t.name, t.rank, t.id
                    FROM course_teacher_paths ctp
                    JOIN teachers t ON ctp.teacher_id = t.id
                    WHERE ctp.course_name = ? AND ctp.is_responsible = 1
                """, (course_name,))

                responsible = cursor.fetchone()
                responsible_text = "غير محدد"

                if responsible:
                    responsible_text = f"{responsible[1]} - {responsible[0]}"

                    # الحصول على الدورات الأخرى للمسؤول
                    cursor.execute("""
                        SELECT course_name 
                        FROM course_teacher_paths 
                        WHERE teacher_id = ? AND course_name != ? AND is_responsible = 1
                    """, (responsible[2], course_name))

                    other_courses = [row[0] for row in cursor.fetchall()]
                    if other_courses:
                        responsible_text += f"\n(رئيس أيضاً في: {', '.join(other_courses)})"

                # منسوبي المدينة
                cursor.execute("""
                    SELECT t.name, t.rank, t.id
                    FROM course_teacher_paths ctp
                    JOIN teachers t ON ctp.teacher_id = t.id
                    WHERE ctp.course_name = ? AND ctp.is_responsible = 0
                    AND t.category = 'منسوبي المدينة'
                    ORDER BY t.name
                """, (course_name,))

                city_staff = cursor.fetchall()
                city_staff_lines = []

                for name, rank, teacher_id in city_staff:
                    line = f"{rank} - {name}"

                    # الحصول على الدورات الأخرى
                    cursor.execute("""
                        SELECT course_name 
                        FROM course_teacher_paths 
                        WHERE teacher_id = ? AND course_name != ?
                    """, (teacher_id, course_name))

                    other_courses = [row[0] for row in cursor.fetchall()]
                    if other_courses:
                        line += f" (يدرس أيضاً في: {', '.join(other_courses)})"

                    city_staff_lines.append(line)

                city_staff_text = "\n".join(city_staff_lines) if city_staff_lines else "لا يوجد"

                # المتعاونين
                cursor.execute("""
                    SELECT t.name, t.rank, t.category, t.id
                    FROM course_teacher_paths ctp
                    JOIN teachers t ON ctp.teacher_id = t.id
                    WHERE ctp.course_name = ? AND ctp.is_responsible = 0
                    AND t.category IN ('متعاون', 'متعاون مدني', 'متعاون عسكري', 'متعاون عسكري متقاعد')
                    ORDER BY t.name
                """, (course_name,))

                collaborators = cursor.fetchall()
                collab_lines = []

                for name, rank, category, teacher_id in collaborators:
                    line = f"{rank} - {name} ({category})"

                    # الحصول على الدورات الأخرى
                    cursor.execute("""
                        SELECT course_name 
                        FROM course_teacher_paths 
                        WHERE teacher_id = ? AND course_name != ?
                    """, (teacher_id, course_name))

                    other_courses = [row[0] for row in cursor.fetchall()]
                    if other_courses:
                        line += f" (يدرس أيضاً في: {', '.join(other_courses)})"

                    collab_lines.append(line)

                collab_text = "\n".join(collab_lines) if collab_lines else "لا يوجد"

                # العدد الكلي
                total = len(city_staff) + len(collaborators) + (1 if responsible else 0)

                # كتابة الصف
                data_row = [idx, course_name, responsible_text, city_staff_text, collab_text, total]
                for col, value in enumerate(data_row, 1):
                    cell = ws.cell(row=row_num, column=col, value=value)
                    cell.font = Font(name='Arial', size=12)
                    cell.alignment = Alignment(
                        horizontal='right' if col > 1 else 'center',
                        vertical='center',
                        wrap_text=True
                    )
                    cell.border = thin_border

                    # تلوين الصفوف بالتناوب
                    if row_num % 2 == 0:
                        cell.fill = PatternFill(start_color="F0F0F0", end_color="F0F0F0", fill_type="solid")

                row_num += 1

            # تعيين عرض الأعمدة
            ws.column_dimensions['A'].width = 8  # م
            ws.column_dimensions['B'].width = 40  # اسم الدورة
            ws.column_dimensions['C'].width = 45  # المسؤول
            ws.column_dimensions['D'].width = 60  # منسوبي المدينة
            ws.column_dimensions['E'].width = 60  # المتعاونين
            ws.column_dimensions['F'].width = 15  # العدد الكلي

            # إضافة ورقة الملخص
            summary_ws = wb.create_sheet("الملخص")
            summary_ws.sheet_view.rightToLeft = True

            # ملخص البيانات
            summary_ws['A1'] = "ملخص بيانات هيئة التدريس"
            summary_ws['A1'].font = Font(name='Arial', size=16, bold=True)
            summary_ws.merge_cells('A1:B1')

            # حساب الإحصائيات
            cursor.execute("""
                SELECT COUNT(DISTINCT teacher_id) 
                FROM course_teacher_paths ctp
                JOIN teachers t ON ctp.teacher_id = t.id
                WHERE t.category = 'منسوبي المدينة'
            """)
            city_staff_count = cursor.fetchone()[0]

            cursor.execute("""
                SELECT COUNT(DISTINCT teacher_id) 
                FROM course_teacher_paths ctp
                JOIN teachers t ON ctp.teacher_id = t.id
                WHERE t.category IN ('متعاون', 'متعاون مدني', 'متعاون عسكري', 'متعاون عسكري متقاعد')
            """)
            collab_count = cursor.fetchone()[0]

            # إحصائيات المدرسين متعددي الدورات
            cursor.execute("""
                SELECT COUNT(DISTINCT teacher_id)
                FROM (
                    SELECT teacher_id, COUNT(DISTINCT course_name) as course_count
                    FROM course_teacher_paths
                    GROUP BY teacher_id
                    HAVING course_count > 1
                )
            """)
            multi_course_teachers = cursor.fetchone()[0]

            summary_data = [
                ["إجمالي الدورات", len(courses)],
                ["إجمالي منسوبي المدينة", city_staff_count],
                ["إجمالي المتعاونين", collab_count],
                ["المدرسون في أكثر من دورة", multi_course_teachers],
                ["تاريخ التصدير", datetime.now().strftime('%Y-%m-%d')],
                ["وقت التصدير", datetime.now().strftime('%H:%M:%S')]
            ]

            for idx, (label, value) in enumerate(summary_data, 3):
                summary_ws[f'A{idx}'] = label
                summary_ws[f'B{idx}'] = value
                summary_ws[f'A{idx}'].font = Font(name='Arial', size=12, bold=True)
                summary_ws[f'B{idx}'].font = Font(name='Arial', size=12)

            # حفظ الملف
            wb.save(file_path)
            messagebox.showinfo("نجاح", f"تم تصدير البيانات بنجاح\n{file_path}")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء التصدير:\n{str(e)}")

    # ربط الأزرار
    add_course_btn.config(command=add_course_to_paths)
    delete_course_btn.config(command=delete_course_from_paths)
    export_btn.config(command=export_faculty_data)

    # ربط النقر على الجدول
    paths_tree.bind("<Double-Button-1>", manage_course_teachers)

    # البحث الديناميكي
    def dynamic_search(*args):
        search_term = search_entry.get().strip()
        load_course_paths(search_term)

    # ربط البحث الديناميكي
    search_entry.bind('<KeyRelease>', dynamic_search)

    # تسمية للمساعدة
    help_label = tk.Label(
        paths_window,
        text="💡 انقر مرتين على أي دورة لإدارة هيئة التدريس",
        font=("Tajawal", 12),
        bg=self.COLORS["background"],
        fg="#666"
    )
    help_label.pack(pady=5)

    # زر الإغلاق
    close_btn = tk.Button(
        paths_window,
        text="إغلاق",
        font=("Tajawal", 14, "bold"),
        bg=self.COLORS["dark"],
        fg="white",
        bd=0,
        padx=30,
        pady=12,
        cursor="hand2",
        command=paths_window.destroy
    )
    close_btn.pack(pady=10)

    # تحميل البيانات
    load_course_paths()
