    def _create_courses_tab(self):
        """إنشاء تبويب إدارة الدورات والجداول"""
        courses_frame = tk.Frame(self.tab_control, bg=self.COLORS["background"])
        self.tab_control.add(courses_frame, text="إدارة الدورات والجداول")

        # إطار العنوان والأزرار
        header_frame = tk.Frame(courses_frame, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X, padx=10, pady=10)
        header_frame.pack_propagate(False)

        # عنوان الصفحة
        title_label = tk.Label(
            header_frame,
            text="إدارة البرامج التدريبية",
            font=self.FONTS["large_title"],
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, padx=20, pady=20)

        # إطار الأزرار
        buttons_frame = tk.Frame(header_frame, bg="#1E3A5F")
        buttons_frame.pack(side=tk.RIGHT, padx=20, pady=20)

        # أزرار الإجراءات
        buttons = [
            ("مسميات الدورات", self.COLORS["primary"], self._manage_course_names),
            ("تعيين مدرسين للدورات التخصصية", "#17a2b8", self._manage_course_teachers_paths),
            ("تنفيذ برنامج تدريبي", self.COLORS["success"], self._add_training_program),
            ("تعديل برنامج تدريبي", self.COLORS["warning"], self._edit_training_program),
            ("حذف برنامج تدريبي", self.COLORS["danger"], self._delete_training_program)
        ]

        for text, color, command in buttons:
            btn = tk.Button(
                buttons_frame,
                text=text,
                font=self.FONTS["text_bold"],
                bg=color,
                fg="white",
                padx=20,
                pady=10,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=command
            )
            btn.pack(side=tk.LEFT, padx=5)

        # إطار البحث
        search_frame = tk.Frame(courses_frame, bg=self.COLORS["surface"], height=60)
        search_frame.pack(fill=tk.X, padx=15, pady=(10, 5))
        search_frame.pack_propagate(False)

        # محتوى البحث
        search_container = tk.Frame(search_frame, bg=self.COLORS["surface"])
        search_container.pack(side=tk.LEFT, padx=20, pady=15)

        tk.Label(
            search_container,
            text="بحث:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["surface"]
        ).pack(side=tk.LEFT, padx=(0, 10))

        self.program_search_entry = tk.Entry(
            search_container,
            font=self.FONTS["text"],
            width=30
        )
        self.program_search_entry.pack(side=tk.LEFT)
        self.program_search_entry.bind('<KeyRelease>', lambda e: self._search_programs())

        tk.Label(
            search_container,
            text="(رقم أو اسم البرنامج)",
            font=self.FONTS["small"],
            bg=self.COLORS["surface"],
            fg="#666"
        ).pack(side=tk.LEFT, padx=(10, 0))

        # خط فاصل
        separator = tk.Frame(courses_frame, bg=self.COLORS["border"], height=2)
        separator.pack(fill=tk.X, padx=15, pady=(0, 10))

        # إطار الجدول الرئيسي
        main_table_frame = tk.Frame(courses_frame, bg="#FFFFFF", bd=2, relief=tk.RIDGE)
        main_table_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(0, 10))

        # إطار داخلي للجدول
        table_frame = tk.Frame(main_table_frame, bg="#FFFFFF")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)

        # إنشاء Treeview بتصميم رسمي
        style = ttk.Style()

        # تكوين نمط الجدول
        style.configure("Programs.Treeview",
                        background="#FFFFFF",
                        foreground="#000000",
                        rowheight=45,
                        fieldbackground="#FFFFFF",
                        font=("Tajawal", 14, "normal"),
                        borderwidth=1,
                        relief="solid")

        # تكوين رؤوس الأعمدة
        style.configure("Programs.Treeview.Heading",
                        font=("Tajawal", 16, "bold"),
                        background="#1E3A5F",
                        foreground="#FFFFFF",
                        relief="raised",
                        borderwidth=1,
                        padding=[10, 8])

        # شريط التمرير العمودي
        v_scrollbar = ttk.Scrollbar(table_frame, orient="vertical")
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # إنشاء الجدول
        self.programs_tree = ttk.Treeview(
            table_frame,
            columns=("number", "name", "start_date", "end_date", "category", "subjects"),
            show="tree headings",
            style="Programs.Treeview",
            yscrollcommand=v_scrollbar.set,
            height=10
        )

        # إخفاء عمود الشجرة
        self.programs_tree.column("#0", width=0, stretch=tk.NO)

        # تكوين الأعمدة
        column_configs = [
            ("number", "رقم البرنامج", 150, tk.CENTER),
            ("name", "اسم الدورة", 300, tk.CENTER),
            ("start_date", "تاريخ البداية", 120, tk.CENTER),
            ("end_date", "تاريخ النهاية", 120, tk.CENTER),
            ("category", "الفئة", 150, tk.CENTER),
            ("subjects", "عدد المواد", 100, tk.CENTER)
        ]

        for col_id, heading, width, anchor in column_configs:
            self.programs_tree.column(col_id, width=width, anchor=anchor)
            self.programs_tree.heading(col_id, text=heading, anchor=tk.CENTER)

        # تكوين ألوان الصفوف
        self.programs_tree.tag_configure('oddrow', background='#FFFFFF')
        self.programs_tree.tag_configure('evenrow', background='#F0F8FF')

        self.programs_tree.pack(fill=tk.BOTH, expand=True)
        v_scrollbar.config(command=self.programs_tree.yview)

        # ربط النقر المزدوج لعرض التفاصيل
        self.programs_tree.bind("<Double-Button-1>", self._show_program_details)

        # إطار المعلومات السفلي
        info_frame = tk.Frame(courses_frame, bg="#1E3A5F", height=60)
        info_frame.pack(fill=tk.X, padx=15, pady=(5, 10))
        info_frame.pack_propagate(False)

        # خط فاصل علوي
        separator = tk.Frame(info_frame, bg="#FFFFFF", height=2)
        separator.pack(fill=tk.X)

        # إطار داخلي للمعلومات
        inner_info = tk.Frame(info_frame, bg="#1E3A5F")
        inner_info.pack(expand=True)

        self.program_count_label = tk.Label(
            inner_info,
            text="إجمالي البرامج التدريبية: 0",
            font=("Tajawal", 14, "bold"),
            bg="#1E3A5F",
            fg="#FFFFFF"
        )
        self.program_count_label.pack(pady=15)

        # تحميل بيانات البرامج
        self._load_training_programs()

    # 5. تعديل دالة _add_training_program لدعم المواد العامة والتخصصية
    def _add_training_program(self):
        """إضافة برنامج تدريبي جديد مع دعم المواد العامة والتخصصية"""
        add_window = tk.Toplevel(self)
        add_window.title("تنفيذ برنامج تدريبي")
        add_window.state('zoomed')
        add_window.configure(bg=self.COLORS["background"])
        add_window.transient(self)
        add_window.grab_set()

        # شريط العنوان مع الأزرار
        header_frame = tk.Frame(add_window, bg="#1E3A5F", height=100)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        header_content = tk.Frame(header_frame, bg="#1E3A5F")
        header_content.pack(expand=True, fill=tk.BOTH, padx=30)

        title_label = tk.Label(
            header_content,
            text="تنفيذ برنامج تدريبي جديد",
            font=("Tajawal", 28, "bold"),
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, pady=25)

        buttons_container = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container.pack(side=tk.RIGHT, pady=25)

        # دالة الحفظ
        def save_program():
            program_number = program_number_entry.get().strip()
            course_name = course_entry.get().strip()
            start_date = start_date_entry.get()
            end_date = end_date_entry.get()
            category = category_var.get()

            if not all([program_number, course_name, start_date, end_date]):
                messagebox.showwarning("تنبيه", "يرجى ملء جميع الحقول المطلوبة")
                return

            if course_name not in course_names:
                messagebox.showwarning("تنبيه", "يرجى اختيار دورة من القائمة أو إضافة دورة جديدة")
                return

            # جمع المواد العامة والتخصصية
            general_subjects = []
            specialized_subjects = []

            for i, (entry, category_type) in enumerate(subjects_entries):
                subject_name = entry.get().strip()
                if subject_name:
                    if category_type == "general":
                        general_subjects.append((subject_name, i + 1, "general"))
                    else:
                        specialized_subjects.append((subject_name, i + 1, "specialized"))

            all_subjects = general_subjects + specialized_subjects

            if not all_subjects:
                messagebox.showwarning("تنبيه", "يرجى إضافة مادة واحدة على الأقل")
                return

            # السؤال عن نوع الجدول
            schedule_type_response = messagebox.askyesno(
                "نوع الجدول",
                "هل البرنامج متعدد الجداول؟\n\n"
                "نعم = جدول مختلف لكل أسبوع\n"
                "لا = جدول واحد لجميع أسابيع البرنامج"
            )

            schedule_type = "multiple" if schedule_type_response else "single"

            try:
                cursor = self.db_conn.cursor()

                cursor.execute("SELECT COUNT(*) FROM training_programs WHERE program_number = ?",
                               (program_number,))
                if cursor.fetchone()[0] > 0:
                    messagebox.showerror("خطأ", "رقم البرنامج موجود مسبقاً")
                    return

                course_id = course_ids.get(course_name)

                # إضافة عمود schedule_type إذا لم يكن موجوداً
                cursor.execute("PRAGMA table_info(training_programs)")
                columns = [column[1] for column in cursor.fetchall()]
                if 'schedule_type' not in columns:
                    cursor.execute("ALTER TABLE training_programs ADD COLUMN schedule_type TEXT DEFAULT 'multiple'")

                cursor.execute("""
                    INSERT INTO training_programs 
                    (program_number, course_name_id, start_date, end_date, category, created_date, schedule_type)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (program_number, course_id, start_date, end_date, category,
                      datetime.now().strftime("%Y-%m-%d %H:%M:%S"), schedule_type))

                program_id = cursor.lastrowid

                # إضافة المواد مع تحديد النوع
                for subject_name, order, subject_category in all_subjects:
                    cursor.execute("""
                        INSERT INTO program_subjects (program_id, subject_name, subject_order, subject_category)
                        VALUES (?, ?, ?, ?)
                    """, (program_id, subject_name, order, subject_category))

                self.db_conn.commit()

                if schedule_type == "single":
                    if messagebox.askyesno("إنشاء الجدول", "هل تريد إنشاء الجدول الموحد الآن؟"):
                        add_window.destroy()
                        self._manage_program_schedule(program_id, program_number, self)
                    else:
                        messagebox.showinfo("نجاح", "تم إضافة البرنامج التدريبي بنجاح")
                        add_window.destroy()
                        self._load_training_programs()
                else:
                    messagebox.showinfo("نجاح", "تم إضافة البرنامج التدريبي بنجاح")
                    add_window.destroy()
                    self._load_training_programs()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # زر الحفظ
        save_btn = tk.Button(
            buttons_container,
            text="✓ حفظ",
            font=("Tajawal", 16, "bold"),
            bg="#28a745",
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=save_program
        )
        save_btn.pack(side=tk.LEFT, padx=(0, 10))

        save_btn.bind("<Enter>", lambda e: save_btn.config(bg="#218838"))
        save_btn.bind("<Leave>", lambda e: save_btn.config(bg="#28a745"))

        # زر الإلغاء
        cancel_btn = tk.Button(
            buttons_container,
            text="✕ إلغاء",
            font=("Tajawal", 16, "bold"),
            bg="#dc3545",
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=add_window.destroy
        )
        cancel_btn.pack(side=tk.LEFT)

        cancel_btn.bind("<Enter>", lambda e: cancel_btn.config(bg="#c82333"))
        cancel_btn.bind("<Leave>", lambda e: cancel_btn.config(bg="#dc3545"))

        # إطار المحتوى الرئيسي
        main_frame = tk.Frame(add_window, bg=self.COLORS["background"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=50, pady=30)

        # إطار الحقول الأساسية
        info_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        info_frame.pack(fill=tk.X, pady=(0, 30))

        inner_info = tk.Frame(info_frame, bg=self.COLORS["surface"], padx=50, pady=30)
        inner_info.pack(fill=tk.BOTH)

        inner_info.grid_columnconfigure(1, weight=1)
        inner_info.grid_columnconfigure(3, weight=1)

        label_font = ("Tajawal", 16, "bold")
        entry_font = ("Tajawal", 15)

        # رقم البرنامج
        tk.Label(
            inner_info,
            text="رقم البرنامج:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=0, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        program_number_entry = tk.Entry(inner_info, font=entry_font, width=25)
        program_number_entry.grid(row=0, column=1, sticky=tk.W, pady=15)

        # اسم الدورة مع البحث
        tk.Label(
            inner_info,
            text="اسم الدورة:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=0, column=2, sticky=tk.E, pady=15, padx=(50, 20))

        # الحصول على مسميات الدورات
        cursor = self.db_conn.cursor()
        cursor.execute("SELECT id, name FROM course_names WHERE is_active = 1 ORDER BY name")
        courses = cursor.fetchall()
        course_names = [course[1] for course in courses] if courses else ["لا توجد دورات مسجلة"]
        course_ids = {course[1]: course[0] for course in courses}

        # إطار للدورة
        course_frame = tk.Frame(inner_info, bg=self.COLORS["surface"])
        course_frame.grid(row=0, column=3, sticky=tk.W, pady=15)

        course_var = tk.StringVar(master=add_window)

        # Entry للبحث
        course_entry = tk.Entry(course_frame, font=entry_font, width=35)
        course_entry.pack(side=tk.LEFT)

        # إطار للاقتراحات
        suggestions_frame = tk.Frame(add_window, bg="white", relief=tk.RAISED, bd=1)

        def update_suggestions(event=None):
            """تحديث قائمة الاقتراحات"""
            typed_text = course_entry.get().lower()

            if not typed_text:
                suggestions_frame.place_forget()
                return

            filtered = [name for name in course_names if typed_text in name.lower()]

            if not filtered:
                suggestions_frame.place_forget()
                return

            for widget in suggestions_frame.winfo_children():
                widget.destroy()

            for i, suggestion in enumerate(filtered[:10]):
                btn = tk.Button(
                    suggestions_frame,
                    text=suggestion,
                    font=entry_font,
                    bg="white",
                    fg="black",
                    bd=0,
                    anchor=tk.W,
                    padx=10,
                    pady=5,
                    cursor="hand2",
                    command=lambda s=suggestion: select_course(s)
                )
                btn.pack(fill=tk.X)

                btn.bind("<Enter>", lambda e, b=btn: b.config(bg="#e3f2fd"))
                btn.bind("<Leave>", lambda e, b=btn: b.config(bg="white"))

            course_entry.update_idletasks()
            x = course_entry.winfo_rootx()
            y = course_entry.winfo_rooty() + course_entry.winfo_height()
            suggestions_frame.place(x=x, y=y, width=course_entry.winfo_width())

        def select_course(course_name):
            """اختيار دورة من الاقتراحات"""
            course_entry.delete(0, tk.END)
            course_entry.insert(0, course_name)
            course_var.set(course_name)
            suggestions_frame.place_forget()
            # تحديث المواد التخصصية المتاحة
            update_available_subjects()

        course_entry.bind('<KeyRelease>', update_suggestions)
        course_entry.bind('<FocusOut>', lambda e: add_window.after(200, suggestions_frame.place_forget))

        # زر إضافة
        tk.Button(
            course_frame,
            text="+",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["secondary"],
            fg="white",
            bd=0,
            width=3,
            cursor="hand2",
            command=lambda: self._quick_add_course_name(add_window, course_entry, course_names)
        ).pack(side=tk.LEFT, padx=(5, 0))

        # التواريخ
        tk.Label(
            inner_info,
            text="تاريخ البداية:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=1, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        from tkcalendar import DateEntry
        start_date_entry = DateEntry(
            inner_info,
            font=entry_font,
            date_pattern='yyyy-mm-dd',
            width=15
        )
        start_date_entry.grid(row=1, column=1, sticky=tk.W, pady=15)

        tk.Label(
            inner_info,
            text="تاريخ النهاية:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=1, column=2, sticky=tk.E, pady=15, padx=(50, 20))

        end_date_entry = DateEntry(
            inner_info,
            font=entry_font,
            date_pattern='yyyy-mm-dd',
            width=15
        )
        end_date_entry.grid(row=1, column=3, sticky=tk.W, pady=15)

        # فئة الدورة
        tk.Label(
            inner_info,
            text="فئة الدورة:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=2, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        categories = ["ضباط", "أفراد", "مشتركة", "مدنيين"]
        category_var = tk.StringVar(master=add_window, value=categories[0])
        category_combo = ttk.Combobox(
            inner_info,
            textvariable=category_var,
            values=categories,
            font=entry_font,
            width=20,
            state="readonly"
        )
        category_combo.grid(row=2, column=1, sticky=tk.W, pady=15)

        # متغيرات لتخزين المواد المتاحة
        available_general_subjects = []
        available_specialized_subjects = []

        def update_available_subjects():
            """تحديث قوائم المواد المتاحة"""
            nonlocal available_general_subjects, available_specialized_subjects

            cursor = self.db_conn.cursor()

            # المواد العامة
            cursor.execute("SELECT subject_name FROM general_subjects ORDER BY subject_name")
            available_general_subjects = [s[0] for s in cursor.fetchall()]

            # المواد التخصصية للدورة المحددة
            course_name = course_entry.get().strip()
            if course_name:
                cursor.execute("""
                    SELECT subject_name FROM specialized_subjects 
                    WHERE course_name = ? 
                    ORDER BY subject_name
                """, (course_name,))
                available_specialized_subjects = [s[0] for s in cursor.fetchall()]
            else:
                available_specialized_subjects = []

        # إطار المواد
        subjects_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        subjects_frame.pack(fill=tk.BOTH, expand=True)

        # عنوان المواد
        subjects_header = tk.Frame(subjects_frame, bg="#1E3A5F", height=60)
        subjects_header.pack(fill=tk.X)
        subjects_header.pack_propagate(False)

        header_content_frame = tk.Frame(subjects_header, bg="#1E3A5F")
        header_content_frame.pack(expand=True)

        tk.Label(
            header_content_frame,
            text="مواد البرنامج التدريبي",
            font=("Tajawal", 20, "bold"),
            bg="#1E3A5F",
            fg="white"
        ).pack()

        # إطار أزرار إضافة المواد
        add_subjects_frame = tk.Frame(subjects_frame, bg=self.COLORS["surface"])
        add_subjects_frame.pack(fill=tk.X, padx=30, pady=15)

        tk.Button(
            add_subjects_frame,
            text="+ إضافة مادة عامة",
            font=("Tajawal", 14, "bold"),
            bg="#FF9800",
            fg="white",
            bd=0,
            padx=20,
            pady=10,
            cursor="hand2",
            command=lambda: add_subject("general")
        ).pack(side=tk.LEFT, padx=(0, 10))

        tk.Button(
            add_subjects_frame,
            text="+ إضافة مادة تخصصية",
            font=("Tajawal", 14, "bold"),
            bg="#9C27B0",
            fg="white",
            bd=0,
            padx=20,
            pady=10,
            cursor="hand2",
            command=lambda: add_subject("specialized")
        ).pack(side=tk.LEFT)

        # إطار قابل للتمرير للمواد
        subjects_container = tk.Frame(subjects_frame, bg=self.COLORS["surface"])
        subjects_container.pack(fill=tk.BOTH, expand=True, padx=30, pady=(0, 20))

        # Canvas للتمرير
        canvas = tk.Canvas(subjects_container, bg=self.COLORS["surface"], highlightthickness=0)
        scrollbar = ttk.Scrollbar(subjects_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.COLORS["surface"])

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        subjects_entries = []

        def add_subject(category_type="general"):
            """إضافة مادة جديدة"""
            update_available_subjects()

            subject_frame = tk.Frame(scrollable_frame, bg=self.COLORS["surface"], pady=8)
            subject_frame.pack(fill=tk.X, padx=20)

            num = len(subjects_entries) + 1

            # لون مختلف حسب نوع المادة
            color = "#FF9800" if category_type == "general" else "#9C27B0"

            num_label = tk.Label(
                subject_frame,
                text=f"المادة {num}:",
                font=("Tajawal", 15, "bold"),
                bg=self.COLORS["surface"],
                fg=color,
                width=10
            )
            num_label.pack(side=tk.LEFT, padx=(0, 15))

            # نوع المادة
            type_label = tk.Label(
                subject_frame,
                text=f"({category_type == 'general' and 'عامة' or 'تخصصية'})",
                font=("Tajawal", 12),
                bg=self.COLORS["surface"],
                fg=color
            )
            type_label.pack(side=tk.LEFT, padx=(0, 15))

            # إطار الإدخال
            entry_frame = tk.Frame(subject_frame, bg=self.COLORS["surface"])
            entry_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 15))

            subject_entry = tk.Entry(
                entry_frame,
                font=("Tajawal", 14),
                width=50
            )
            subject_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)

            # إطار الاقتراحات للمادة
            subject_suggestions_frame = tk.Frame(add_window, bg="white", relief=tk.RAISED, bd=1)

            def update_subject_suggestions(event=None):
                """تحديث اقتراحات المواد"""
                typed_text = subject_entry.get().lower()

                # اختيار القائمة المناسبة
                if category_type == "general":
                    available_subjects = available_general_subjects
                else:
                    available_subjects = available_specialized_subjects

                if not typed_text or not available_subjects:
                    subject_suggestions_frame.place_forget()
                    return

                filtered = [name for name in available_subjects if typed_text in name.lower()]

                if not filtered:
                    subject_suggestions_frame.place_forget()
                    return

                for widget in subject_suggestions_frame.winfo_children():
                    widget.destroy()

                for i, suggestion in enumerate(filtered[:10]):
                    btn = tk.Button(
                        subject_suggestions_frame,
                        text=suggestion,
                        font=("Tajawal", 13),
                        bg="white",
                        fg="black",
                        bd=0,
                        anchor=tk.W,
                        padx=10,
                        pady=5,
                        cursor="hand2",
                        command=lambda s=suggestion: select_subject(s)
                    )
                    btn.pack(fill=tk.X)

                    btn.bind("<Enter>", lambda e, b=btn: b.config(bg="#e3f2fd"))
                    btn.bind("<Leave>", lambda e, b=btn: b.config(bg="white"))

                subject_entry.update_idletasks()
                x = subject_entry.winfo_rootx()
                y = subject_entry.winfo_rooty() + subject_entry.winfo_height()
                subject_suggestions_frame.place(x=x, y=y, width=subject_entry.winfo_width())

            def select_subject(subject_name):
                """اختيار مادة من الاقتراحات"""
                subject_entry.delete(0, tk.END)
                subject_entry.insert(0, subject_name)
                subject_suggestions_frame.place_forget()

            subject_entry.bind('<KeyRelease>', update_subject_suggestions)
            subject_entry.bind('<FocusOut>', lambda e: add_window.after(200, subject_suggestions_frame.place_forget))

            def remove_this():
                subject_frame.destroy()
                # إزالة من القائمة مع الحفاظ على النوع
                for i, (entry, cat_type) in enumerate(subjects_entries):
                    if entry == subject_entry:
                        subjects_entries.pop(i)
                        break
                # إعادة ترقيم المواد
                for i, (entry, cat_type) in enumerate(subjects_entries):
                    parent = entry.master.master
                    label = parent.winfo_children()[0]
                    label.config(text=f"المادة {i + 1}:")

            remove_btn = tk.Button(
                subject_frame,
                text="حذف",
                font=("Tajawal", 12, "bold"),
                bg=self.COLORS["danger"],
                fg="white",
                bd=0,
                padx=15,
                pady=8,
                cursor="hand2",
                command=remove_this
            )
            remove_btn.pack(side=tk.RIGHT)

            subjects_entries.append((subject_entry, category_type))
            canvas.update_idletasks()
            canvas.yview_moveto(1.0)

        # إضافة مادة واحدة عامة افتراضياً
        add_subject("general")

        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # تحديث المواد المتاحة عند بدء النافذة
        update_available_subjects()

    def _quick_add_course_name(self, parent_window, combo_widget, courses_list):
        """إضافة مسمى دورة سريع"""
        dialog = tk.Toplevel(parent_window)
        dialog.title("إضافة مسمى دورة")
        dialog.geometry("400x200")
        dialog.configure(bg=self.COLORS["surface"])
        dialog.transient(parent_window)
        dialog.grab_set()

        # توسيط النافذة
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() - 400) // 2
        y = (dialog.winfo_screenheight() - 200) // 2
        dialog.geometry(f"400x200+{x}+{y}")

        # المحتوى
        content = tk.Frame(dialog, bg=self.COLORS["surface"], padx=30, pady=30)
        content.pack(fill=tk.BOTH, expand=True)

        tk.Label(
            content,
            text="اسم الدورة:",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["surface"]
        ).pack(anchor=tk.W, pady=(0, 10))

        name_entry = tk.Entry(content, font=self.FONTS["text"], width=35)
        name_entry.pack(fill=tk.X, pady=(0, 20))
        name_entry.focus_set()

        def save_course():
            name = name_entry.get().strip()
            if not name:
                messagebox.showwarning("تنبيه", "يرجى إدخال اسم الدورة")
                return

            try:
                cursor = self.db_conn.cursor()
                cursor.execute("""
                    INSERT INTO course_names (name, description, created_date)
                    VALUES (?, '', ?)
                """, (name, datetime.now().strftime("%Y-%m-%d")))

                self.db_conn.commit()

                # تحديث القائمة
                courses_list.append(name)
                combo_widget['values'] = courses_list
                combo_widget.set(name)

                dialog.destroy()
                messagebox.showinfo("نجاح", "تم إضافة مسمى الدورة بنجاح")

            except sqlite3.IntegrityError:
                messagebox.showerror("خطأ", "اسم الدورة موجود مسبقاً")
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # الأزرار
        btn_frame = tk.Frame(content, bg=self.COLORS["surface"])
        btn_frame.pack(fill=tk.X)

        tk.Button(
            btn_frame,
            text="حفظ",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=20,
            pady=8,
            cursor="hand2",
            command=save_course
        ).pack(side=tk.LEFT)

        tk.Button(
            btn_frame,
            text="إلغاء",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=20,
            pady=8,
            cursor="hand2",
            command=dialog.destroy
        ).pack(side=tk.RIGHT)

        # ربط Enter للحفظ
        name_entry.bind('<Return>', lambda e: save_course())

    def _load_training_programs(self):
        """تحميل البرامج التدريبية"""
        # مسح البيانات الحالية
        for item in self.programs_tree.get_children():
            self.programs_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                       tp.end_date, tp.category,
                       (SELECT COUNT(*) FROM program_subjects WHERE program_id = tp.id) as subject_count
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                ORDER BY tp.start_date DESC
            """)

            programs = cursor.fetchall()

            for index, program in enumerate(programs):
                # إزالة id من البيانات المعروضة
                display_data = program[1:]  # تخطي id
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                item = self.programs_tree.insert("", tk.END, values=display_data,
                                                 tags=(tag, f"id_{program[0]}"))

            # تحديث العداد
            if hasattr(self, 'program_count_label'):
                self.program_count_label.config(text=f"إجمالي البرامج التدريبية: {len(programs)}")

        except Exception as e:
            print(f"خطأ في تحميل البرامج: {e}")

    def _search_programs(self):
        """البحث في البرامج التدريبية"""
        search_text = self.program_search_entry.get().strip()

        # مسح الجدول
        for item in self.programs_tree.get_children():
            self.programs_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()

            if search_text:
                cursor.execute("""
                    SELECT tp.id, tp.program_number, cn.name, tp.start_date, 
                           tp.end_date, tp.category,
                           (SELECT COUNT(*) FROM program_subjects WHERE program_id = tp.id) as subject_count
                    FROM training_programs tp
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    WHERE tp.program_number LIKE ? OR cn.name LIKE ?
                    ORDER BY tp.start_date DESC
                """, (f'%{search_text}%', f'%{search_text}%'))
            else:
                self._load_training_programs()
                return

            programs = cursor.fetchall()

            for index, program in enumerate(programs):
                display_data = program[1:]
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                item = self.programs_tree.insert("", tk.END, values=display_data,
                                                 tags=(tag, f"id_{program[0]}"))

        except Exception as e:
            print(f"خطأ في البحث: {e}")

    def _show_program_details(self, event):
        """عرض تفاصيل البرنامج التدريبي مع الجدول - تصميم بسيط مع المواد أفقياً"""
        selection = self.programs_tree.selection()
        if not selection:
            return

        # الحصول على id البرنامج من tags
        item = self.programs_tree.item(selection[0])
        tags = item['tags']
        program_id = None
        for tag in tags:
            if tag.startswith('id_'):
                program_id = int(tag.split('_')[1])
                break

        if not program_id:
            return

        # نافذة التفاصيل - ملء الشاشة
        detail_window = tk.Toplevel(self)
        detail_window.title("تفاصيل البرنامج التدريبي والجدول")
        detail_window.state('zoomed')
        detail_window.configure(bg=self.COLORS["background"])
        detail_window.transient(self)
        detail_window.grab_set()

        # الحصول على تفاصيل البرنامج
        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT tp.program_number, cn.name, tp.start_date, tp.end_date, tp.category
            FROM training_programs tp
            LEFT JOIN course_names cn ON tp.course_name_id = cn.id
            WHERE tp.id = ?
        """, (program_id,))

        program = cursor.fetchone()

        # حساب عدد الأسابيع
        from datetime import datetime
        start_date = datetime.strptime(program[2], "%Y-%m-%d")
        end_date = datetime.strptime(program[3], "%Y-%m-%d")
        weeks = ((end_date - start_date).days // 7) + 1

        # شريط العنوان
        header_frame = tk.Frame(detail_window, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        header_content = tk.Frame(header_frame, bg="#1E3A5F")
        header_content.pack(expand=True, fill=tk.BOTH, padx=30)

        title_label = tk.Label(
            header_content,
            text=f"البرنامج التدريبي: {program[0]} - {program[1]}",
            font=("Tajawal", 24, "bold"),
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, pady=20)

        # بعد شريط العنوان، إضافة أزرار التصدير
        buttons_container = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container.pack(side=tk.LEFT, pady=20)

        # زر تصدير للمدرس
        export_teacher_btn = tk.Button(
            buttons_container,
            text="تصدير للمدرس",
            font=("Tajawal", 14, "bold"),
            bg="#17a2b8",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._export_schedule_for_teacher(program_id, selected_week.get())
        )
        export_teacher_btn.pack(side=tk.LEFT, padx=(0, 5))

        # زر تصدير عام
        export_general_btn = tk.Button(
            buttons_container,
            text="تصدير الجدول الكامل",
            font=("Tajawal", 14, "bold"),
            bg="#6c757d",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._export_general_schedule(program_id, selected_week.get())
        )
        export_general_btn.pack(side=tk.LEFT, padx=(0, 5))

        # أزرار في الهيدر
        buttons_container = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container.pack(side=tk.RIGHT, pady=20)

        # زر إدارة الجدول
        manage_schedule_btn = tk.Button(
            buttons_container,
            text="إدارة الجدول",
            font=("Tajawal", 14, "bold"),
            bg="#28a745",
            fg="white",
            padx=25,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self._manage_program_schedule(program_id, program[0], detail_window)
        )
        manage_schedule_btn.pack(side=tk.LEFT, padx=(0, 10))

        # زر الإغلاق
        close_btn = tk.Button(
            buttons_container,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg="#dc3545",
            fg="white",
            padx=25,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=detail_window.destroy
        )
        close_btn.pack(side=tk.LEFT)

        # إطار المحتوى الرئيسي
        main_frame = tk.Frame(detail_window, bg=self.COLORS["background"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        # إطار المعلومات الأساسية
        info_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        info_frame.pack(fill=tk.X, pady=(0, 10))

        inner_info = tk.Frame(info_frame, bg=self.COLORS["surface"], padx=20, pady=15)
        inner_info.pack(fill=tk.X)

        # معلومات البرنامج في صف واحد
        info_items = [
            ("رقم البرنامج:", program[0]),
            ("اسم الدورة:", program[1]),
            ("الفئة:", program[4]),
            ("من:", program[2]),
            ("إلى:", program[3]),
            ("عدد الأسابيع:", f"{weeks} أسابيع")
        ]

        for i, (label, value) in enumerate(info_items):
            item_frame = tk.Frame(inner_info, bg=self.COLORS["surface"])
            item_frame.pack(side=tk.LEFT, expand=True, padx=5)

            tk.Label(
                item_frame,
                text=label,
                font=("Tajawal", 12, "bold"),
                bg=self.COLORS["surface"],
                fg="#1E3A5F"
            ).pack(side=tk.LEFT)

            tk.Label(
                item_frame,
                text=value,
                font=("Tajawal", 12),
                bg=self.COLORS["surface"],
                fg="#333"
            ).pack(side=tk.LEFT, padx=(5, 0))

        # إطار المواد - أفقي بسيط
        subjects_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        subjects_frame.pack(fill=tk.X, pady=(0, 10))

        subjects_container = tk.Frame(subjects_frame, bg=self.COLORS["surface"], padx=15, pady=10)
        subjects_container.pack(fill=tk.X)

        # عنوان المواد
        tk.Label(
            subjects_container,
            text="مواد البرنامج:",
            font=("Tajawal", 13, "bold"),
            bg=self.COLORS["surface"],
            fg="#1E3A5F"
        ).pack(side=tk.LEFT, padx=(0, 15))

        # الحصول على المواد
        cursor.execute("""
            SELECT id, subject_name, subject_order 
            FROM program_subjects 
            WHERE program_id = ? AND subject_order != 999
            ORDER BY subject_order
        """, (program_id,))

        subjects = cursor.fetchall()

        # عرض المواد أفقياً
        for idx, subject in enumerate(subjects):
            if idx > 0:
                # فاصل بين المواد
                tk.Label(
                    subjects_container,
                    text=" | ",
                    font=("Tajawal", 13),
                    bg=self.COLORS["surface"],
                    fg="#999"
                ).pack(side=tk.LEFT)

            # المادة
            tk.Label(
                subjects_container,
                text=f"{subject[2]}. {subject[1]}",
                font=("Tajawal", 13),
                bg=self.COLORS["surface"],
                fg="#333"
            ).pack(side=tk.LEFT, padx=5)

        # إطار اختيار الأسبوع
        week_selector_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], height=50)
        week_selector_frame.pack(fill=tk.X, pady=(0, 10))
        week_selector_frame.pack_propagate(False)

        week_container = tk.Frame(week_selector_frame, bg=self.COLORS["surface"])
        week_container.pack(expand=True, fill=tk.BOTH, padx=20, pady=5)

        tk.Label(
            week_container,
            text="اختر الأسبوع:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"],
            fg="#1E3A5F"
        ).pack(side=tk.LEFT, padx=(0, 15))

        # متغير الأسبوع المختار
        selected_week = tk.IntVar(value=1)

        # إطار أزرار الأسابيع
        weeks_buttons_frame = tk.Frame(week_container, bg=self.COLORS["surface"])
        weeks_buttons_frame.pack(side=tk.LEFT)

        week_buttons = []

        def show_week_schedule(week_num):
            """عرض جدول أسبوع محدد"""
            selected_week.set(week_num)

            # تحديث ألوان الأزرار
            for i, btn in enumerate(week_buttons):
                if i + 1 == week_num:
                    btn.config(bg="#1E3A5F", fg="white")
                else:
                    btn.config(bg="#E0E0E0", fg="black")

            # تحديث عرض الجدول
            for widget in schedule_container.winfo_children():
                widget.destroy()
            self._create_schedule_view(schedule_container, program_id, week_number=week_num, readonly=True)

        # إنشاء أزرار الأسابيع
        for week in range(1, weeks + 1):
            week_btn = tk.Button(
                weeks_buttons_frame,
                text=f"أسبوع {week}",
                font=("Tajawal", 11, "bold"),
                bg="#E0E0E0" if week != 1 else "#1E3A5F",
                fg="black" if week != 1 else "white",
                width=9,
                height=1,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=lambda w=week: show_week_schedule(w)
            )
            week_btn.pack(side=tk.LEFT, padx=3)
            week_buttons.append(week_btn)

            # تأثيرات hover
            def on_enter(e, btn=week_btn, week_num=week):
                if selected_week.get() != week_num:
                    btn.config(bg="#BDBDBD")

            def on_leave(e, btn=week_btn, week_num=week):
                if selected_week.get() == week_num:
                    btn.config(bg="#1E3A5F", fg="white")
                else:
                    btn.config(bg="#E0E0E0", fg="black")

            week_btn.bind("<Enter>", on_enter)
            week_btn.bind("<Leave>", on_leave)

        # إطار الجدول الدراسي - ملء المساحة المتبقية
        schedule_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=1)
        schedule_frame.pack(fill=tk.BOTH, expand=True)

        schedule_header = tk.Frame(schedule_frame, bg="#1E3A5F", height=35)
        schedule_header.pack(fill=tk.X)
        schedule_header.pack_propagate(False)

        tk.Label(
            schedule_header,
            text="الجدول الدراسي",
            font=("Tajawal", 14, "bold"),
            bg="#1E3A5F",
            fg="white"
        ).pack(expand=True)

        # إطار الجدول
        schedule_container = tk.Frame(schedule_frame, bg="white", padx=10, pady=10)
        schedule_container.pack(fill=tk.BOTH, expand=True)

        # عرض جدول الأسبوع الأول افتراضياً
        show_week_schedule(1)

    def _create_schedule_view(self, parent_frame, program_id, week_number=1, readonly=False):
        """إنشاء عرض الجدول الدراسي مع نسخ مباشر مع التحقق من التعارض"""
        # التحقق من نوع الجدول
        cursor = self.db_conn.cursor()
        cursor.execute("SELECT schedule_type FROM training_programs WHERE id = ?", (program_id,))
        result = cursor.fetchone()
        schedule_type = result[0] if result and result[0] else "multiple"

        # إذا كان الجدول موحد، نستخدم الأسبوع 1 دائماً للبيانات
        if schedule_type == "single":
            data_week = 1
        else:
            data_week = week_number

        # أيام الأسبوع
        days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]

        # الحصول على أوقات الحصص
        cursor.execute("""
            SELECT period_number, start_time, end_time
            FROM default_periods
            WHERE is_break = 0
            ORDER BY period_number
        """)
        periods = cursor.fetchall()

        # إطار رئيسي للتوسيط
        center_frame = tk.Frame(parent_frame, bg=self.COLORS["background"])
        center_frame.pack(fill=tk.BOTH, expand=True)

        # إطار الجدول
        table_frame = tk.Frame(center_frame, bg="white", relief=tk.GROOVE, bd=2)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

        # عكس ترتيب الأعمدة للعربية - الأيام على اليمين
        col_index = len(periods)

        # خلية الأسبوع في الزاوية اليمنى العليا
        week_label = tk.Label(
            table_frame,
            text=f"الأسبوع {week_number}",
            font=("Tajawal", 14, "bold"),
            bg="#F5F5F5",
            fg="black",
            relief=tk.GROOVE,
            bd=1,
            width=12
        )
        week_label.grid(row=0, column=col_index, sticky="nsew", rowspan=2)

        # عناوين الحصص (من اليمين لليسار)
        for idx, period in enumerate(periods):
            col = col_index - idx - 1

            # الحصة
            period_label = tk.Label(
                table_frame,
                text=f"الحصة {period[0]}",
                font=("Tajawal", 12, "bold"),
                bg="#F5F5F5",
                fg="black",
                relief=tk.GROOVE,
                bd=1
            )
            period_label.grid(row=0, column=col, sticky="nsew")

            # الوقت
            time_label = tk.Label(
                table_frame,
                text=f"{period[1]} - {period[2]}",
                font=("Tajawal", 10),
                bg="#FAFAFA",
                fg="#555555",
                relief=tk.GROOVE,
                bd=1
            )
            time_label.grid(row=1, column=col, sticky="nsew")

        # التحقق من وجود عمود subject_type
        cursor.execute("PRAGMA table_info(program_schedule)")
        columns = [column[1] for column in cursor.fetchall()]
        has_subject_type = 'subject_type' in columns

        # الحصول على بيانات الجدول
        if has_subject_type:
            cursor.execute("""
                SELECT ps.day_of_week, ps.period_number, ps.subject_id, ps.teacher_id,
                       ps.teacher_name, psub.subject_name, t.name as teacher_db_name,
                       ps.subject_type
                FROM program_schedule ps
                LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                LEFT JOIN teachers t ON ps.teacher_id = t.id
                WHERE ps.program_id = ? AND ps.week_number = ?
                ORDER BY ps.day_of_week, ps.period_number
            """, (program_id, data_week))
        else:
            cursor.execute("""
                SELECT ps.day_of_week, ps.period_number, ps.subject_id, ps.teacher_id,
                       ps.teacher_name, psub.subject_name, t.name as teacher_db_name,
                       'نظري' as subject_type
                FROM program_schedule ps
                LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                LEFT JOIN teachers t ON ps.teacher_id = t.id
                WHERE ps.program_id = ? AND ps.week_number = ?
                ORDER BY ps.day_of_week, ps.period_number
            """, (program_id, data_week))

        schedule_data = {}
        for row in cursor.fetchall():
            day = row[0]
            period = row[1]
            schedule_data[(day, period)] = {
                'subject_id': row[2],
                'teacher_id': row[3],
                'teacher_name': row[4],
                'subject': row[5],
                'teacher_db': row[6],
                'subject_type': row[7] if len(row) > 7 else 'نظري'
            }

        # دالة النسخ المباشر للحصة التالية مع التحقق من التعارض
        def copy_to_next_period(from_day, from_period):
            """نسخ مباشر إلى الحصة التالية مع التحقق من التعارض"""
            # الحصول على البيانات المراد نسخها
            source_data = schedule_data.get((from_day, from_period))
            if not source_data or not source_data.get('subject'):
                messagebox.showwarning("تنبيه", "لا توجد بيانات للنسخ في هذه الخانة")
                return

            # تحديد الحصة التالية
            next_period = from_period + 1

            # التحقق من وجود حصة تالية
            if next_period > len(periods):
                messagebox.showinfo("تنبيه", "لا توجد حصة تالية في نفس اليوم")
                return

            # التحقق من التعارض إذا كان هناك مدرس
            if source_data.get('teacher_id'):
                # استخدام دالة التحقق من التعارض
                has_conflict, conflict_details = self._check_teacher_conflict(
                    source_data['teacher_id'],
                    program_id,
                    data_week,
                    from_day,
                    next_period
                )

                if has_conflict:
                    # بناء رسالة التعارض
                    conflict_msg = "لا يمكن نسخ هذا المدرس للحصة التالية بسبب تعارض:\n\n"

                    for conflict in conflict_details:
                        conflict_msg += f"• البرنامج: {conflict['program_number']}\n"
                        conflict_msg += f"  الدورة: {conflict['course_name']}\n"
                        conflict_msg += f"  المادة: {conflict['subject_name']}\n"
                        conflict_msg += f"  التاريخ: {conflict['date']}\n\n"

                    messagebox.showerror("تعارض في الجدول", conflict_msg)
                    return

            try:
                cursor = self.db_conn.cursor()

                # الحصول على معلومات وقت الحصة التالية
                cursor.execute("""
                    SELECT start_time, end_time FROM default_periods
                    WHERE period_number = ?
                """, (next_period,))
                time_info = cursor.fetchone()

                if time_info:
                    # نسخ البيانات مباشرة
                    cursor.execute("""
                        INSERT OR REPLACE INTO program_schedule
                        (program_id, week_number, day_of_week, period_number,
                         start_time, end_time, subject_id, teacher_id,
                         subject_type, is_break, teacher_name)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?)
                    """, (
                        program_id, data_week, from_day, next_period,
                        time_info[0], time_info[1],
                        source_data['subject_id'],
                        source_data['teacher_id'],
                        source_data.get('subject_type', 'نظري'),
                        source_data['teacher_name']
                    ))

                    self.db_conn.commit()

                    # إعادة تحميل الجدول فوراً
                    for widget in center_frame.winfo_children():
                        widget.destroy()
                    self._create_schedule_view(center_frame, program_id, week_number=week_number, readonly=readonly)

                    messagebox.showinfo("نجاح", "تم النسخ إلى الحصة التالية بنجاح")

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء النسخ: {str(e)}")

        # صفوف الأيام
        for row_idx, day_name in enumerate(days):
            # اسم اليوم في العمود الأيمن
            day_label = tk.Label(
                table_frame,
                text=day_name,
                font=("Tajawal", 12, "bold"),
                bg="#F5F5F5",
                fg="black",
                relief=tk.GROOVE,
                bd=1,
                height=2
            )
            day_label.grid(row=row_idx + 2, column=col_index, sticky="nsew")

            # خلايا الحصص لكل يوم (من اليمين لليسار)
            for idx, period in enumerate(periods):
                col = col_index - idx - 1
                period_num = period[0]
                cell_data = schedule_data.get((row_idx, period_num), {})

                # إطار الخلية
                cell = tk.Frame(table_frame, bg="white", relief=tk.GROOVE, bd=1)
                cell.grid(row=row_idx + 2, column=col, sticky="nsew", padx=0, pady=0)

                if cell_data.get('subject'):
                    # عرض المادة
                    subject_label = tk.Label(
                        cell,
                        text=cell_data['subject'],
                        font=("Tajawal", 11, "bold"),
                        bg="white",
                        fg="black",
                        wraplength=140,
                        justify=tk.RIGHT
                    )
                    subject_label.pack(pady=(5, 2))

                    # نوع المادة
                    subject_type = cell_data.get('subject_type', 'نظري')
                    type_color = "#2196F3" if subject_type == "عملي" else "#4CAF50"

                    type_label = tk.Label(
                        cell,
                        text=f"({subject_type})",
                        font=("Tajawal", 9, "bold"),
                        bg="white",
                        fg=type_color
                    )
                    type_label.pack(pady=(0, 2))

                    # خط فاصل
                    separator = tk.Frame(cell, bg="#E0E0E0", height=1)
                    separator.pack(fill=tk.X, padx=15, pady=1)

                    # عرض المدرس
                    if cell_data.get('teacher_name'):
                        teacher_text = cell_data['teacher_name']
                    elif cell_data.get('teacher_db'):
                        teacher_text = cell_data['teacher_db']
                    else:
                        teacher_text = "لم يحدد"

                    teacher_label = tk.Label(
                        cell,
                        text=teacher_text,
                        font=("Tajawal", 9),
                        bg="white",
                        fg="#555555",
                        wraplength=140,
                        justify=tk.RIGHT
                    )
                    teacher_label.pack(pady=(1, 5))

                    if not readonly and (schedule_type == "multiple" or week_number == 1):
                        # أزرار صغيرة للتعديل والحذف والنسخ
                        btn_frame = tk.Frame(cell, bg="white")
                        btn_frame.pack(pady=1)

                        # زر النسخ للحصة التالية (فقط إذا لم تكن الحصة الأخيرة)
                        if period_num < len(periods):
                            copy_btn = tk.Button(
                                btn_frame,
                                text="نسخ للتالية",
                                font=("Tajawal", 8),
                                bg="#17a2b8",
                                fg="white",
                                bd=0,
                                padx=8,
                                pady=2,
                                cursor="hand2",
                                command=lambda d=row_idx, p=period_num: copy_to_next_period(d, p)
                            )
                            copy_btn.pack(side=tk.RIGHT, padx=2)

                        edit_btn = tk.Button(
                            btn_frame,
                            text="تعديل",
                            font=("Tajawal", 8),
                            bg="#666666",
                            fg="white",
                            bd=0,
                            padx=8,
                            pady=2,
                            cursor="hand2",
                            command=lambda d=row_idx, p=period_num: self._show_assignment_options(
                                program_id, d, p, data_week, parent_frame.winfo_toplevel(), edit_mode=True
                            )
                        )
                        edit_btn.pack(side=tk.RIGHT, padx=2)

                        delete_btn = tk.Button(
                            btn_frame,
                            text="حذف",
                            font=("Tajawal", 8),
                            bg="#999999",
                            fg="white",
                            bd=0,
                            padx=8,
                            pady=2,
                            cursor="hand2",
                            command=lambda d=row_idx, p=period_num: self._delete_schedule_slot(
                                program_id, d, p, data_week, center_frame
                            )
                        )
                        delete_btn.pack(side=tk.RIGHT, padx=2)

                elif not readonly and (schedule_type == "multiple" or week_number == 1):
                    # زر إضافة
                    add_btn = tk.Button(
                        cell,
                        text="+ إضافة",
                        font=("Tajawal", 10),
                        bg="#F5F5F5",
                        fg="#666666",
                        bd=0,
                        cursor="hand2",
                        relief=tk.FLAT,
                        command=lambda d=row_idx, p=period_num: self._show_assignment_options(
                            program_id, d, p, data_week, parent_frame.winfo_toplevel()
                        )
                    )
                    add_btn.pack(expand=True, fill=tk.BOTH, padx=15, pady=20)

                    # تأثير عند المرور
                    add_btn.bind("<Enter>", lambda e, btn=add_btn: btn.config(bg="#E0E0E0"))
                    add_btn.bind("<Leave>", lambda e, btn=add_btn: btn.config(bg="#F5F5F5"))

                # تكوين ارتفاع الصف
                table_frame.grid_rowconfigure(row_idx + 2, minsize=100)

            # تكوين أحجام الأعمدة
            table_frame.grid_columnconfigure(col_index, minsize=100)  # عمود الأيام
            for col in range(len(periods)):
                table_frame.grid_columnconfigure(col, minsize=180, weight=1)

            # إذا كان الجدول موحد، عرض ملاحظة
            if schedule_type == "single" and week_number != 1 and not readonly:
                note_label = tk.Label(
                    center_frame,
                    text="ملاحظة: هذا البرنامج يستخدم جدول موحد لجميع الأسابيع",
                    font=("Tajawal", 12),
                    bg=self.COLORS["background"],
                    fg="#FF6B6B"
                )
                note_label.pack(pady=(0, 10))

    def _check_teacher_conflict(self, teacher_id, program_id, week_number, day_index, period_number):
        """التحقق من تعارض جدول المدرس في جميع البرامج النشطة"""
        cursor = self.db_conn.cursor()

        # الحصول على معلومات المدرس
        cursor.execute("SELECT id_number, name FROM teachers WHERE id = ?", (teacher_id,))
        teacher_info = cursor.fetchone()

        if not teacher_info:
            return False, None

        # الحصول على تواريخ البرنامج الحالي
        cursor.execute("""
            SELECT start_date, end_date FROM training_programs 
            WHERE id = ?
        """, (program_id,))

        current_program_dates = cursor.fetchone()
        from datetime import datetime, timedelta

        current_start = datetime.strptime(current_program_dates[0], "%Y-%m-%d")
        current_end = datetime.strptime(current_program_dates[1], "%Y-%m-%d")

        conflicts_found = []

        # حساب التاريخ الفعلي للحصة في البرنامج الحالي
        actual_date = current_start + timedelta(weeks=week_number - 1, days=day_index)

        # البحث عن تعارضات في جميع البرامج النشطة
        cursor.execute("""
            SELECT 
                tp.id,
                tp.program_number,
                tp.start_date,
                tp.end_date,
                cn.name as course_name,
                ps.week_number,
                ps.day_of_week,
                ps.period_number,
                psub.subject_name,
                ps.teacher_id
            FROM program_schedule ps
            JOIN training_programs tp ON ps.program_id = tp.id
            LEFT JOIN course_names cn ON tp.course_name_id = cn.id
            LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
            WHERE ps.teacher_id = ?
            AND ps.day_of_week = ?
            AND ps.period_number = ?
            AND tp.id != ?
            AND date(?) BETWEEN date(tp.start_date) AND date(tp.end_date)
        """, (teacher_id, day_index, period_number, program_id, actual_date.strftime("%Y-%m-%d")))

        conflicts = cursor.fetchall()

        for conflict in conflicts:
            # حساب التاريخ الفعلي للتعارض
            conflict_start = datetime.strptime(conflict[2], "%Y-%m-%d")
            conflict_week_date = conflict_start + timedelta(weeks=conflict[5] - 1, days=conflict[6])

            # التحقق من أن التواريخ متطابقة
            if conflict_week_date.date() == actual_date.date():
                conflicts_found.append({
                    'program_id': conflict[0],
                    'program_number': conflict[1],
                    'course_name': conflict[4],
                    'week_number': conflict[5],
                    'subject_name': conflict[8],
                    'date': conflict_week_date.strftime("%Y-%m-%d"),
                    'day': day_index,
                    'period': period_number
                })

        if conflicts_found:
            return True, conflicts_found

        return False, None

    # 6. تعديل دالة _assign_teacher_subject لدعم القيود على المواد التخصصية
    def _assign_teacher_subject(self, program_id, day_index, period_number, week_number, parent_window):
        """تعيين مدرس ومادة مع قيود المواد التخصصية"""
        assign_window = tk.Toplevel(parent_window)
        assign_window.title("إضافة مدرس ومادة")
        assign_window.geometry("700x800")
        assign_window.configure(bg=self.COLORS["surface"])
        assign_window.transient(parent_window)
        assign_window.grab_set()

        # توسيط النافذة
        assign_window.update_idletasks()
        x = (assign_window.winfo_screenwidth() - 700) // 2
        y = (assign_window.winfo_screenheight() - 800) // 2
        assign_window.geometry(f"700x800+{x}+{y}")

        # العنوان
        days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]

        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT start_time, end_time FROM default_periods
            WHERE period_number = ?
        """, (period_number,))
        time_info = cursor.fetchone()

        header = tk.Label(
            assign_window,
            text=f"الأسبوع {week_number} - {days[day_index]}\nالحصة {period_number} ({time_info[0]} - {time_info[1]})",
            font=("Tajawal", 16, "bold"),
            bg="#2196F3",
            fg="white",
            pady=20
        )
        header.pack(fill=tk.X)

        # إطار المحتوى
        content = tk.Frame(assign_window, bg=self.COLORS["surface"], padx=30, pady=20)
        content.pack(fill=tk.BOTH, expand=True)

        # الحصول على اسم الدورة
        cursor.execute("""
            SELECT cn.name 
            FROM training_programs tp
            JOIN course_names cn ON tp.course_name_id = cn.id
            WHERE tp.id = ?
        """, (program_id,))
        course_info = cursor.fetchone()
        course_name = course_info[0] if course_info else None

        # اختيار المادة
        tk.Label(
            content,
            text="اختر المادة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor="w", pady=(0, 10))

        # الحصول على المواد مع تصنيفها
        cursor.execute("""
            SELECT id, subject_name, subject_order, subject_category
            FROM program_subjects
            WHERE program_id = ? AND subject_order != 999
            ORDER BY subject_order
        """, (program_id,))

        subjects = cursor.fetchall()

        # متغير لحفظ معرف المادة المختارة
        selected_subject_id = tk.IntVar(value=0)
        selected_subject_category = tk.StringVar(value="general")

        subject_combo = ttk.Combobox(
            content,
            font=("Tajawal", 13),
            state="readonly",
            width=40
        )

        # إنشاء قائمة المواد مع تصنيفها
        subject_list = []
        subject_map = {}

        for i, (sid, sname, sorder, scategory) in enumerate(subjects):
            category_text = " (عامة)" if scategory == "general" else " (تخصصية)"
            text = f"{sorder}. {sname}{category_text}"
            subject_list.append(text)
            subject_map[i] = (sid, scategory or "general")

        subject_combo['values'] = subject_list
        subject_combo.pack(fill=tk.X, pady=(0, 20))

        # اختيار أول مادة افتراضياً
        if subject_list:
            subject_combo.current(0)
            selected_subject_id.set(subject_map[0][0])
            selected_subject_category.set(subject_map[0][1])

        # عند تغيير المادة
        def on_subject_change(event):
            index = subject_combo.current()
            if index >= 0:
                selected_subject_id.set(subject_map[index][0])
                selected_subject_category.set(subject_map[index][1])
                # تحديث قائمة المدرسين بناءً على نوع المادة
                update_teachers_list()

        subject_combo.bind('<<ComboboxSelected>>', on_subject_change)

        # نوع المادة (عملي/نظري)
        tk.Label(
            content,
            text="نوع المادة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor="w", pady=(0, 10))

        subject_type_combo = ttk.Combobox(
            content,
            values=["نظري", "عملي"],
            font=("Tajawal", 13),
            state="readonly",
            width=40
        )
        subject_type_combo.current(0)
        subject_type_combo.pack(fill=tk.X, pady=(0, 30))

        # إطار خاص بالمدرسين
        teacher_frame = tk.Frame(content, bg=self.COLORS["surface"])
        teacher_frame.pack(fill=tk.BOTH, expand=True)

        # متغير لحفظ معرف المدرس المختار
        selected_teacher_id = tk.IntVar(value=0)
        teachers_map = {}

        # تسمية ديناميكية للمدرسين
        teacher_label = tk.Label(
            teacher_frame,
            text="",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        )
        teacher_label.pack(anchor="w", pady=(0, 10))

        # إطار البحث
        search_frame = tk.Frame(teacher_frame, bg=self.COLORS["surface"])
        search_frame.pack(fill=tk.X, pady=(0, 10))

        tk.Label(
            search_frame,
            text="البحث:",
            font=("Tajawal", 12),
            bg=self.COLORS["surface"]
        ).pack(side=tk.RIGHT, padx=(0, 10))

        search_entry = tk.Entry(
            search_frame,
            font=("Tajawal", 13),
            width=40
        )
        search_entry.pack(side=tk.RIGHT, fill=tk.X, expand=True)

        # قائمة المدرسين
        list_frame = tk.Frame(teacher_frame, bg="white", relief=tk.GROOVE, bd=2)
        list_frame.pack(fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        teachers_listbox = tk.Listbox(
            list_frame,
            font=("Tajawal", 12),
            yscrollcommand=scrollbar.set,
            height=10,
            selectmode=tk.SINGLE
        )
        teachers_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=teachers_listbox.yview)

        def update_teachers_list():
            """تحديث قائمة المدرسين بناءً على نوع المادة"""
            # تحديد نوع المادة المختارة
            category = selected_subject_category.get()

            if category == "specialized":
                # للمواد التخصصية - فقط أعضاء هيئة التدريس
                teacher_label.config(
                    text="اختر المدرس من هيئة التدريس (مادة تخصصية):",
                    fg="#9C27B0"
                )
                load_faculty_teachers()
            else:
                # للمواد العامة - جميع المدرسين
                teacher_label.config(
                    text="اختر المدرس (مادة عامة):",
                    fg="#FF9800"
                )
                load_all_teachers()

        def load_faculty_teachers():
            """تحميل أعضاء هيئة التدريس فقط"""
            teachers_listbox.delete(0, tk.END)
            teachers_map.clear()

            search_text = search_entry.get().strip()

            try:
                cursor = self.db_conn.cursor()

                if search_text:
                    cursor.execute("""
                        SELECT DISTINCT t.id, t.name, t.rank, t.workplace, t.category
                        FROM teachers t
                        INNER JOIN course_teacher_paths ctp ON t.id = ctp.teacher_id
                        WHERE ctp.course_name = ? AND LOWER(t.name) LIKE LOWER(?)
                        ORDER BY t.name
                    """, (course_name, f'%{search_text}%'))
                else:
                    cursor.execute("""
                        SELECT DISTINCT t.id, t.name, t.rank, t.workplace, t.category
                        FROM teachers t
                        INNER JOIN course_teacher_paths ctp ON t.id = ctp.teacher_id
                        WHERE ctp.course_name = ?
                        ORDER BY t.name
                    """, (course_name,))

                teachers = cursor.fetchall()

                if not teachers:
                    teachers_listbox.insert(tk.END, "لا يوجد أعضاء هيئة تدريس لهذه الدورة")
                    return

                for i, (tid, name, rank, workplace, category) in enumerate(teachers):
                    # الحصول على الدورات لكل مدرس
                    cursor.execute("""
                        SELECT course_name 
                        FROM course_teacher_paths 
                        WHERE teacher_id = ?
                    """, (tid,))

                    courses = [row[0] for row in cursor.fetchall()]

                    display_text = f"{rank} - {name}"
                    if courses:
                        display_text += f" (متخصص في: {', '.join(courses)})"

                    teachers_listbox.insert(tk.END, display_text)
                    teachers_map[i] = tid

            except Exception as e:
                print(f"خطأ في تحميل أعضاء هيئة التدريس: {e}")

        def load_all_teachers():
            """تحميل جميع المدرسين للمواد العامة"""
            teachers_listbox.delete(0, tk.END)
            teachers_map.clear()

            search_text = search_entry.get().strip()

            try:
                if search_text:
                    cursor.execute("""
                        SELECT t.id, t.name, t.rank, t.workplace, t.category
                        FROM teachers t
                        WHERE LOWER(t.name) LIKE LOWER(?)
                        ORDER BY t.name
                        LIMIT 50
                    """, (f'%{search_text}%',))
                else:
                    cursor.execute("""
                        SELECT t.id, t.name, t.rank, t.workplace, t.category
                        FROM teachers t
                        ORDER BY t.name
                        LIMIT 100
                    """)

                teachers = cursor.fetchall()

                for i, (tid, name, rank, workplace, category) in enumerate(teachers):
                    # الحصول على الدورات لكل مدرس
                    cursor.execute("""
                        SELECT course_name 
                        FROM course_teacher_paths 
                        WHERE teacher_id = ?
                    """, (tid,))

                    courses = [row[0] for row in cursor.fetchall()]

                    display_text = f"{rank} - {name}"
                    if courses:
                        display_text += f" (متخصص في: {', '.join(courses)})"

                    teachers_listbox.insert(tk.END, display_text)
                    teachers_map[i] = tid

            except Exception as e:
                print(f"خطأ في تحميل المدرسين: {e}")

        # عند الكتابة في البحث
        def on_search_change(*args):
            update_teachers_list()

        search_entry.bind('<KeyRelease>', on_search_change)

        # عند اختيار مدرس
        def on_teacher_select(event):
            selection = teachers_listbox.curselection()
            if selection:
                selected_teacher_id.set(teachers_map[selection[0]])

        teachers_listbox.bind('<<ListboxSelect>>', on_teacher_select)

        # تحميل القائمة الأولية
        update_teachers_list()

        # الأزرار
        btn_frame = tk.Frame(assign_window, bg=self.COLORS["surface"])
        btn_frame.pack(fill=tk.X, pady=20)

        def save():
            # التحقق من المادة
            if selected_subject_id.get() == 0:
                messagebox.showwarning("تنبيه", "يرجى اختيار المادة")
                return

            # التحقق من المدرس
            if selected_teacher_id.get() == 0:
                messagebox.showwarning("تنبيه", "يرجى اختيار مدرس من القائمة")
                return

            # التحقق الإضافي للمواد التخصصية
            if selected_subject_category.get() == "specialized":
                # التحقق من أن المدرس من هيئة التدريس
                cursor.execute("""
                    SELECT COUNT(*) FROM course_teacher_paths 
                    WHERE teacher_id = ? AND course_name = ?
                """, (selected_teacher_id.get(), course_name))

                if cursor.fetchone()[0] == 0:
                    messagebox.showerror(
                        "خطأ",
                        "لا يمكن تعيين هذا المدرس لمادة تخصصية!\n\n"
                        "المواد التخصصية محصورة على أعضاء هيئة التدريس فقط."
                    )
                    return

            # الحصول على نوع المادة
            selected_subject_type = subject_type_combo.get()

            # التحقق من التعارضات
            has_conflict, conflict_details = self._check_teacher_conflict(
                selected_teacher_id.get(),
                program_id,
                week_number,
                day_index,
                period_number
            )

            if has_conflict:
                # بناء رسالة التعارض
                conflict_msg = "لا يمكن إضافة هذا المدرس بسبب وجود تعارضات:\n\n"

                for conflict in conflict_details:
                    conflict_msg += f"🔴 البرنامج: {conflict['program_number']}\n"
                    conflict_msg += f"   الدورة: {conflict['course_name']}\n"
                    conflict_msg += f"   المادة: {conflict['subject_name']}\n"
                    conflict_msg += f"   التاريخ: {conflict['date']}\n\n"

                conflict_msg += "يرجى اختيار مدرس آخر أو تغيير الوقت."

                messagebox.showerror("تعارض في الجدول", conflict_msg)
                return

            try:
                # التأكد من وجود عمود subject_type
                cursor.execute("PRAGMA table_info(program_schedule)")
                columns = [column[1] for column in cursor.fetchall()]

                if 'subject_type' not in columns:
                    cursor.execute("ALTER TABLE program_schedule ADD COLUMN subject_type TEXT DEFAULT 'نظري'")
                    self.db_conn.commit()

                # حفظ التعيين للأسبوع المحدد فقط
                cursor.execute("""
                    INSERT OR REPLACE INTO program_schedule
                    (program_id, week_number, day_of_week, period_number,
                     start_time, end_time, subject_id, teacher_id, 
                     subject_type, is_break, teacher_name)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0, NULL)
                """, (program_id, week_number, day_index, period_number,
                      time_info[0], time_info[1], selected_subject_id.get(),
                      selected_teacher_id.get(), selected_subject_type))

                self.db_conn.commit()

                messagebox.showinfo(
                    "نجاح",
                    f"تم حفظ التعيين بنجاح\nنوع المادة: {selected_subject_type}"
                )

                assign_window.destroy()
                parent_window.destroy()
                self._manage_program_schedule(program_id, "", parent_window.master)

            except Exception as e:
                self.db_conn.rollback()
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        btn_container = tk.Frame(btn_frame, bg=self.COLORS["surface"])
        btn_container.pack()

        tk.Button(
            btn_container,
            text="حفظ (لجميع الأسابيع)",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=40,
            pady=10,
            cursor="hand2",
            command=save
        ).pack(side=tk.LEFT, padx=10)

        tk.Button(
            btn_container,
            text="إلغاء",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=40,
            pady=10,
            cursor="hand2",
            command=assign_window.destroy
        ).pack(side=tk.LEFT, padx=10)

    def _assign_entity_subject(self, program_id, day_index, period_number, week_number, parent_window):
        """تعيين جهة تدريب ومادة مع نوع المادة"""
        assign_window = tk.Toplevel(parent_window)
        assign_window.title("إضافة جهة تتولى التدريب")
        assign_window.geometry("500x600")
        assign_window.configure(bg=self.COLORS["surface"])
        assign_window.transient(parent_window)
        assign_window.grab_set()

        # توسيط النافذة
        assign_window.update_idletasks()
        x = (assign_window.winfo_screenwidth() - 500) // 2
        y = (assign_window.winfo_screenheight() - 600) // 2
        assign_window.geometry(f"500x600+{x}+{y}")

        # العنوان
        days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]

        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT start_time, end_time FROM default_periods
            WHERE period_number = ?
        """, (period_number,))
        time_info = cursor.fetchone()

        header = tk.Label(
            assign_window,
            text=f"الأسبوع {week_number} - {days[day_index]}\nالحصة {period_number} ({time_info[0]} - {time_info[1]})",
            font=("Tajawal", 16, "bold"),
            bg="#FF9800",
            fg="white",
            pady=20
        )
        header.pack(fill=tk.X)

        # إطار المحتوى
        content = tk.Frame(assign_window, bg=self.COLORS["surface"], padx=30, pady=30)
        content.pack(fill=tk.BOTH, expand=True)

        # اختيار المادة
        tk.Label(
            content,
            text="اختر المادة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor="w", pady=(0, 10))

        cursor.execute("""
            SELECT id, subject_name, subject_order
            FROM program_subjects
            WHERE program_id = ? AND subject_order != 999
            ORDER BY subject_order
        """, (program_id,))

        subjects = cursor.fetchall()

        # متغير لحفظ معرف المادة المختارة
        selected_subject_id = tk.IntVar(value=0)

        subject_combo = ttk.Combobox(
            content,
            font=("Tajawal", 13),
            state="readonly",
            width=40
        )

        # إنشاء قائمة المواد
        subject_list = []
        subject_map = {}  # ربط الفهرس بمعرف المادة

        for i, (sid, sname, sorder) in enumerate(subjects):
            text = f"{sorder}. {sname}"
            subject_list.append(text)
            subject_map[i] = sid

        subject_combo['values'] = subject_list
        subject_combo.pack(fill=tk.X, pady=(0, 20))

        # اختيار أول مادة افتراضياً
        if subject_list:
            subject_combo.current(0)
            selected_subject_id.set(subject_map[0])

        # عند تغيير المادة
        def on_subject_change(event):
            index = subject_combo.current()
            if index >= 0:
                selected_subject_id.set(subject_map[index])

        subject_combo.bind('<<ComboboxSelected>>', on_subject_change)

        # نوع المادة (نظري/عملي)
        tk.Label(
            content,
            text="نوع المادة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor="w", pady=(0, 10))

        subject_type_var = tk.StringVar(value="نظري")
        subject_type_combo = ttk.Combobox(
            content,
            textvariable=subject_type_var,
            values=["نظري", "عملي"],
            font=("Tajawal", 13),
            state="readonly",
            width=40
        )
        subject_type_combo.pack(fill=tk.X, pady=(0, 20))

        # اسم الجهة
        tk.Label(
            content,
            text="اسم الجهة التي تتولى التدريب:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor="w", pady=(0, 10))

        entity_entry = tk.Entry(
            content,
            font=("Tajawal", 14),
            width=40,
            justify="center"
        )
        entity_entry.pack(fill=tk.X, pady=(0, 20))
        entity_entry.focus_set()

        # الأزرار
        btn_frame = tk.Frame(assign_window, bg=self.COLORS["surface"])
        btn_frame.pack(fill=tk.X, pady=20)

        def save():
            # التحقق من المادة
            if selected_subject_id.get() == 0:
                messagebox.showwarning("تنبيه", "يرجى اختيار المادة")
                return

            # التحقق من اسم الجهة
            entity_name = entity_entry.get().strip()
            if not entity_name:
                messagebox.showwarning("تنبيه", "يرجى إدخال اسم الجهة")
                return

            # الحصول على نوع المادة
            subject_type = subject_type_var.get()

            try:
                # التأكد من وجود عمود subject_type
                cursor.execute("PRAGMA table_info(program_schedule)")
                columns = [column[1] for column in cursor.fetchall()]

                if 'subject_type' not in columns:
                    cursor.execute("ALTER TABLE program_schedule ADD COLUMN subject_type TEXT DEFAULT 'نظري'")
                    self.db_conn.commit()

                cursor.execute("""
                    INSERT OR REPLACE INTO program_schedule
                    (program_id, week_number, day_of_week, period_number,
                     start_time, end_time, subject_id, teacher_id, 
                     teacher_name, subject_type, is_break)
                    VALUES (?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, 0)
                """, (program_id, week_number, day_index, period_number,
                      time_info[0], time_info[1], selected_subject_id.get(),
                      entity_name, subject_type))

                self.db_conn.commit()
                messagebox.showinfo("نجاح", f"تم حفظ التعيين بنجاح\nنوع المادة: {subject_type}")

                assign_window.destroy()
                parent_window.destroy()
                self._manage_program_schedule(program_id, "", parent_window.master)

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        btn_container = tk.Frame(btn_frame, bg=self.COLORS["surface"])
        btn_container.pack()

        tk.Button(
            btn_container,
            text="حفظ",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=40,
            pady=10,
            cursor="hand2",
            command=save
        ).pack(side=tk.LEFT, padx=10)

        tk.Button(
            btn_container,
            text="إلغاء",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=40,
            pady=10,
            cursor="hand2",
            command=assign_window.destroy
        ).pack(side=tk.LEFT, padx=10)

    def _show_assignment_options(self, program_id, day_index, period_number, week_number, parent_window,
                                 edit_mode=False):
        """عرض خيارات التعيين (مدرس أو جهة)"""
        options_window = tk.Toplevel(parent_window)
        options_window.title("اختر نوع التعيين")
        options_window.geometry("400x300")
        options_window.configure(bg=self.COLORS["surface"])
        options_window.transient(parent_window)
        options_window.grab_set()

        # توسيط النافذة
        options_window.update_idletasks()
        x = (options_window.winfo_screenwidth() - 400) // 2
        y = (options_window.winfo_screenheight() - 300) // 2
        options_window.geometry(f"400x300+{x}+{y}")

        # العنوان
        days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]

        header = tk.Label(
            options_window,
            text=f"{days[day_index]} - الحصة {period_number}",
            font=("Tajawal", 18, "bold"),
            bg="#1E3A5F",
            fg="white",
            pady=20
        )
        header.pack(fill=tk.X)

        # إطار الخيارات
        options_frame = tk.Frame(options_window, bg=self.COLORS["surface"])
        options_frame.pack(fill=tk.BOTH, expand=True, pady=30)

        # زر مدرس ومادة
        teacher_btn = tk.Button(
            options_frame,
            text="إضافة مدرس ومادة",
            font=("Tajawal", 16, "bold"),
            bg="#2196F3",
            fg="white",
            width=25,
            height=2,
            bd=0,
            cursor="hand2",
            command=lambda: [options_window.destroy(),
                             self._assign_teacher_subject(program_id, day_index, period_number, week_number,
                                                          parent_window)]
        )
        teacher_btn.pack(pady=10)

        # زر جهة تدريب
        entity_btn = tk.Button(
            options_frame,
            text="إضافة جهة تتولى التدريب",
            font=("Tajawal", 16, "bold"),
            bg="#FF9800",
            fg="white",
            width=25,
            height=2,
            bd=0,
            cursor="hand2",
            command=lambda: [options_window.destroy(),
                             self._assign_entity_subject(program_id, day_index, period_number, week_number,
                                                         parent_window)]
        )
        entity_btn.pack(pady=10)

        # تأثيرات hover
        teacher_btn.bind("<Enter>", lambda e: teacher_btn.config(bg="#1976D2"))
        teacher_btn.bind("<Leave>", lambda e: teacher_btn.config(bg="#2196F3"))

        entity_btn.bind("<Enter>", lambda e: entity_btn.config(bg="#F57C00"))
        entity_btn.bind("<Leave>", lambda e: entity_btn.config(bg="#FF9800"))

    def _export_schedule_for_teacher(self, program_id, week_number):
        """تصدير جدول مخصص لمدرس معين - يظهر فقط مدرسي البرنامج الحالي"""
        # نافذة اختيار المدرس
        select_window = tk.Toplevel(self)
        select_window.title("اختر المدرس")
        select_window.geometry("600x700")
        select_window.configure(bg=self.COLORS["surface"])
        select_window.transient(self)
        select_window.grab_set()

        # توسيط النافذة
        select_window.update_idletasks()
        x = (select_window.winfo_screenwidth() - 600) // 2
        y = (select_window.winfo_screenheight() - 700) // 2
        select_window.geometry(f"600x700+{x}+{y}")

        # العنوان
        header = tk.Label(
            select_window,
            text="اختر المدرس لتصدير جدوله",
            font=("Tajawal", 18, "bold"),
            bg="#17a2b8",
            fg="white",
            pady=20
        )
        header.pack(fill=tk.X)

        # إطار المحتوى
        content = tk.Frame(select_window, bg=self.COLORS["surface"], padx=20, pady=20)
        content.pack(fill=tk.BOTH, expand=True)

        # معلومات البرنامج الحالي
        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT tp.program_number, cn.name 
            FROM training_programs tp
            LEFT JOIN course_names cn ON tp.course_name_id = cn.id
            WHERE tp.id = ?
        """, (program_id,))

        program_info = cursor.fetchone()
        if program_info:
            info_frame = tk.Frame(content, bg="#E8F5E9", relief=tk.RIDGE, bd=1)
            info_frame.pack(fill=tk.X, pady=(0, 20))

            tk.Label(
                info_frame,
                text=f"البرنامج: {program_info[0]} - {program_info[1]}",
                font=("Tajawal", 12),
                bg="#E8F5E9",
                fg="#1B5E20"
            ).pack(pady=10)

        # البحث
        tk.Label(
            content,
            text="البحث عن مدرس:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(anchor=tk.W, pady=(0, 10))

        search_entry = tk.Entry(content, font=("Tajawal", 13), width=40)
        search_entry.pack(fill=tk.X, pady=(0, 20))

        # قائمة المدرسين
        list_frame = tk.Frame(content, bg="white", relief=tk.GROOVE, bd=2)
        list_frame.pack(fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        teachers_listbox = tk.Listbox(
            list_frame,
            font=("Tajawal", 12),
            yscrollcommand=scrollbar.set
        )
        teachers_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=teachers_listbox.yview)

        # الحصول على المدرسين في هذا البرنامج فقط
        cursor.execute("""
            SELECT DISTINCT t.id, t.name, t.rank, 
                   COUNT(DISTINCT ps.week_number) as weeks_count,
                   COUNT(DISTINCT ps.day_of_week || '-' || ps.period_number) as periods_count
            FROM teachers t
            INNER JOIN program_schedule ps ON t.id = ps.teacher_id
            WHERE ps.program_id = ?
            GROUP BY t.id, t.name, t.rank
            ORDER BY t.name
        """, (program_id,))

        teachers = cursor.fetchall()
        teachers_map = {}

        def load_teachers(search_term=""):
            teachers_listbox.delete(0, tk.END)
            teachers_map.clear()

            idx = 0
            for teacher_id, name, rank, weeks_count, periods_count in teachers:
                if not search_term or search_term.lower() in name.lower():
                    # عرض الرتبة والاسم مع عدد الحصص
                    display_text = f"{rank} - {name} ({periods_count} حصة)"
                    teachers_listbox.insert(tk.END, display_text)
                    teachers_map[idx] = (teacher_id, name, rank)
                    idx += 1

        def on_search(*args):
            load_teachers(search_entry.get())

        search_entry.bind('<KeyRelease>', on_search)
        load_teachers()

        # عرض عدد المدرسين
        tk.Label(
            content,
            text=f"عدد المدرسين في هذا البرنامج: {len(teachers)}",
            font=("Tajawal", 11),
            bg=self.COLORS["surface"],
            fg="#666"
        ).pack(pady=(10, 0))

        def export_selected():
            selection = teachers_listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار مدرس")
                return

            teacher_id, teacher_name, teacher_rank = teachers_map[selection[0]]
            select_window.destroy()

            # اسأل عن نوع التصدير
            export_type = self._ask_export_type()

            if export_type == "current":
                # تصدير جدول المدرس للبرنامج الحالي فقط
                self._create_teacher_schedule_current_program(
                    program_id, teacher_id, teacher_name, teacher_rank, week_number
                )
            elif export_type == "all":
                # تصدير الجدول الشامل (جميع البرامج)
                self._create_comprehensive_teacher_schedule(
                    teacher_id, teacher_name, teacher_rank, week_number
                )

        # الأزرار
        btn_frame = tk.Frame(select_window, bg=self.COLORS["surface"])
        btn_frame.pack(fill=tk.X, pady=20)

        tk.Button(
            btn_frame,
            text="تصدير",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=30,
            pady=10,
            cursor="hand2",
            command=export_selected
        ).pack(side=tk.LEFT, padx=20)

        tk.Button(
            btn_frame,
            text="إلغاء",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=30,
            pady=10,
            cursor="hand2",
            command=select_window.destroy
        ).pack(side=tk.RIGHT, padx=20)

    def _ask_export_type(self):
        """سؤال المستخدم عن نوع التصدير المطلوب"""
        dialog = tk.Toplevel(self)
        dialog.title("نوع التصدير")
        dialog.geometry("400x250")
        dialog.configure(bg=self.COLORS["surface"])
        dialog.transient(self)
        dialog.grab_set()

        # توسيط النافذة
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() - 400) // 2
        y = (dialog.winfo_screenheight() - 250) // 2
        dialog.geometry(f"400x250+{x}+{y}")

        result = {"type": None}

        # العنوان
        tk.Label(
            dialog,
            text="اختر نوع التصدير",
            font=("Tajawal", 16, "bold"),
            bg=self.COLORS["primary"],
            fg="white",
            pady=15
        ).pack(fill=tk.X)

        # الخيارات
        options_frame = tk.Frame(dialog, bg=self.COLORS["surface"], padx=20, pady=20)
        options_frame.pack(fill=tk.BOTH, expand=True)

        def select_current():
            result["type"] = "current"
            dialog.destroy()

        def select_all():
            result["type"] = "all"
            dialog.destroy()

        # زر البرنامج الحالي فقط
        current_btn = tk.Button(
            options_frame,
            text="جدول هذا البرنامج فقط",
            font=("Tajawal", 14, "bold"),
            bg="#2196F3",
            fg="white",
            width=25,
            height=2,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=select_current
        )
        current_btn.pack(pady=10)

        # زر جميع البرامج
        all_btn = tk.Button(
            options_frame,
            text="جدول شامل (جميع البرامج)",
            font=("Tajawal", 14, "bold"),
            bg="#FF9800",
            fg="white",
            width=25,
            height=2,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=select_all
        )
        all_btn.pack(pady=10)

        dialog.wait_window()
        return result["type"]

    def _create_teacher_schedule_current_program(self, program_id, teacher_id, teacher_name, teacher_rank, week_number):
        """إنشاء جدول المدرس للبرنامج الحالي فقط"""
        if not DOCX_AVAILABLE:
            messagebox.showerror("خطأ", "يجب تثبيت مكتبة python-docx\npip install python-docx")
            return

        try:
            from tkinter import filedialog
            from docx import Document
            from docx.shared import Inches, Pt, RGBColor
            from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
            from docx.enum.table import WD_TABLE_ALIGNMENT
            from docx.oxml import parse_xml
            from docx.oxml.ns import nsdecls

            # الحصول على معلومات البرنامج
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT tp.program_number, cn.name, tp.start_date, tp.end_date
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.id = ?
            """, (program_id,))
            program_info = cursor.fetchone()

            # إنشاء المستند
            doc = Document()

            # تعيين الهوامش
            sections = doc.sections
            for section in sections:
                section.page_width = Inches(11.69)  # A4 landscape
                section.page_height = Inches(8.27)
                section.left_margin = Inches(0.5)
                section.right_margin = Inches(0.5)
                section.top_margin = Inches(0.5)
                section.bottom_margin = Inches(0.5)

            # العنوان
            title = doc.add_heading('', level=0)
            title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            run = title.add_run('جدول المدرس')
            run.font.size = Pt(24)
            run.font.name = 'Arial'
            run.font.bold = True

            # اسم المدرس
            teacher_para = doc.add_paragraph()
            teacher_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            teacher_run = teacher_para.add_run(f'{teacher_rank} / {teacher_name}')
            teacher_run.font.size = Pt(20)
            teacher_run.font.name = 'Arial'
            teacher_run.font.bold = True

            # معلومات البرنامج
            info_para = doc.add_paragraph()
            info_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            info_text = f'البرنامج: {program_info[0]}\nالدورة: {program_info[1]}\nمن: {program_info[2]} إلى: {program_info[3]}\nالأسبوع: {week_number}'
            info_run = info_para.add_run(info_text)
            info_run.font.size = Pt(16)
            info_run.font.name = 'Arial'

            doc.add_paragraph()  # فراغ

            # الحصول على الأيام والحصص
            days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]
            cursor.execute("""
                SELECT period_number, start_time, end_time
                FROM default_periods
                WHERE is_break = 0
                ORDER BY period_number
            """)
            periods = cursor.fetchall()

            # إنشاء الجدول
            table = doc.add_table(rows=len(days) + 1, cols=len(periods) + 1)
            table.style = 'Table Grid'
            table.alignment = WD_TABLE_ALIGNMENT.CENTER

            # تعيين اتجاه الجدول RTL
            tbl = table._element
            tblPr = tbl.xpath('./w:tblPr')[0]
            bidi = parse_xml(r'<w:bidiVisual {} />'.format(nsdecls('w')))
            tblPr.append(bidi)

            # العمود الأول - الأيام/الحصص
            corner_cell = table.cell(0, 0)
            corner_cell.text = "الأيام / الحصص"
            self._format_cell_formal(corner_cell, bold=True, size=16, center=True, header=True)

            # رؤوس الحصص
            for idx, period in enumerate(periods):
                cell = table.cell(0, idx + 1)
                cell.text = f'الحصة {period[0]}\n{period[1]} - {period[2]}'
                self._format_cell_formal(cell, bold=True, size=14, center=True, header=True)

            # التحقق من وجود عمود subject_type
            cursor.execute("PRAGMA table_info(program_schedule)")
            columns = [column[1] for column in cursor.fetchall()]
            has_subject_type = 'subject_type' in columns

            # جدول المدرس للبرنامج الحالي فقط
            if has_subject_type:
                cursor.execute("""
                    SELECT ps.day_of_week, ps.period_number, psub.subject_name, ps.subject_type
                    FROM program_schedule ps
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    WHERE ps.program_id = ? AND ps.week_number = ? AND ps.teacher_id = ?
                    ORDER BY ps.day_of_week, ps.period_number
                """, (program_id, week_number, teacher_id))
            else:
                cursor.execute("""
                    SELECT ps.day_of_week, ps.period_number, psub.subject_name, 'نظري' as subject_type
                    FROM program_schedule ps
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    WHERE ps.program_id = ? AND ps.week_number = ? AND ps.teacher_id = ?
                    ORDER BY ps.day_of_week, ps.period_number
                """, (program_id, week_number, teacher_id))

            teacher_schedule = {}
            for day, period, subject, subject_type in cursor.fetchall():
                teacher_schedule[(day, period)] = {
                    'subject': subject,
                    'subject_type': subject_type or 'نظري'
                }

            # ملء الجدول
            for row_idx, day_name in enumerate(days):
                # اسم اليوم في العمود الأول
                day_cell = table.cell(row_idx + 1, 0)
                day_cell.text = day_name
                self._format_cell_formal(day_cell, bold=True, size=14, center=True, day=True)

                # الحصص
                for idx, period in enumerate(periods):
                    cell = table.cell(row_idx + 1, idx + 1)
                    data = teacher_schedule.get((row_idx, period[0]), {})
                    if data.get('subject'):
                        cell.text = f"{data['subject']}\n({data['subject_type']})"
                    else:
                        cell.text = ""
                    self._format_cell_formal(cell, bold=True, size=14, center=True, even_row=(row_idx % 2 == 1))

            # حفظ الملف
            file_path = filedialog.asksaveasfilename(
                title="حفظ جدول المدرس",
                defaultextension=".docx",
                initialfile=f"جدول_{teacher_name}_{program_info[0]}_أسبوع_{week_number}.docx",
                filetypes=[("Word files", "*.docx"), ("All files", "*.*")]
            )

            if file_path:
                doc.save(file_path)
                messagebox.showinfo("نجاح", "تم تصدير جدول المدرس بنجاح")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    # تحديث دالة تصدير جدول المدرس الشامل
    def _create_comprehensive_teacher_schedule(self, teacher_id, teacher_name, teacher_rank, week_number):
        """إنشاء جدول شامل للمدرس مع نوع المادة"""
        if not DOCX_AVAILABLE:
            messagebox.showerror("خطأ", "يجب تثبيت مكتبة python-docx\npip install python-docx")
            return

        try:
            from tkinter import filedialog
            from docx import Document
            from docx.shared import Inches, Pt, RGBColor
            from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
            from docx.enum.table import WD_TABLE_ALIGNMENT
            from docx.oxml import parse_xml
            from docx.oxml.ns import nsdecls

            # إنشاء المستند
            doc = Document()

            # تعيين الهوامش
            sections = doc.sections
            for section in sections:
                section.page_width = Inches(11.69)  # A4 landscape
                section.page_height = Inches(8.27)
                section.left_margin = Inches(0.5)
                section.right_margin = Inches(0.5)
                section.top_margin = Inches(0.5)
                section.bottom_margin = Inches(0.5)

            # العنوان
            title = doc.add_heading('', level=0)
            title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            run = title.add_run('جدول المدرس الشامل')
            run.font.size = Pt(26)
            run.font.name = 'Arial'
            run.font.bold = True

            # اسم المدرس
            teacher_para = doc.add_paragraph()
            teacher_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            teacher_run = teacher_para.add_run(f'{teacher_rank} / {teacher_name}')
            teacher_run.font.size = Pt(22)
            teacher_run.font.name = 'Arial'
            teacher_run.font.bold = True

            # الأسبوع
            week_para = doc.add_paragraph()
            week_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            week_run = week_para.add_run(f'الأسبوع: {week_number}')
            week_run.font.size = Pt(18)
            week_run.font.name = 'Arial'

            doc.add_paragraph()  # فراغ

            # الحصول على الأيام والحصص
            days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT period_number, start_time, end_time
                FROM default_periods
                WHERE is_break = 0
                ORDER BY period_number
            """)
            periods = cursor.fetchall()

            # إنشاء الجدول
            table = doc.add_table(rows=len(days) + 1, cols=len(periods) + 1)
            table.style = 'Table Grid'
            table.alignment = WD_TABLE_ALIGNMENT.CENTER

            # تعيين اتجاه الجدول RTL
            tbl = table._element
            tblPr = tbl.xpath('./w:tblPr')[0]
            bidi = parse_xml(r'<w:bidiVisual {} />'.format(nsdecls('w')))
            tblPr.append(bidi)

            # العمود الأول (من اليمين) - الأيام/الحصص
            corner_cell = table.cell(0, 0)
            corner_cell.text = "الأيام / الحصص"
            self._format_cell_formal(corner_cell, bold=True, size=16, center=True, header=True)

            # رؤوس الحصص
            for idx, period in enumerate(periods):
                cell = table.cell(0, idx + 1)
                cell.text = f'الحصة {period[0]}\n{period[1]} - {period[2]}'
                self._format_cell_formal(cell, bold=True, size=14, center=True, header=True)

            # التحقق من وجود عمود subject_type
            cursor.execute("PRAGMA table_info(program_schedule)")
            columns = [column[1] for column in cursor.fetchall()]
            has_subject_type = 'subject_type' in columns

            # الحصول على جدول المدرس الشامل
            if has_subject_type:
                cursor.execute("""
                    SELECT 
                        ps.day_of_week, 
                        ps.period_number, 
                        psub.subject_name,
                        tp.program_number,
                        cn.name as course_name,
                        ps.subject_type
                    FROM program_schedule ps
                    INNER JOIN training_programs tp ON ps.program_id = tp.id
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    WHERE ps.teacher_id = ? 
                    AND ps.week_number = ?
                    AND date('now') BETWEEN date(tp.start_date) AND date(tp.end_date)
                    ORDER BY ps.day_of_week, ps.period_number
                """, (teacher_id, week_number))
            else:
                cursor.execute("""
                    SELECT 
                        ps.day_of_week, 
                        ps.period_number, 
                        psub.subject_name,
                        tp.program_number,
                        cn.name as course_name,
                        'نظري' as subject_type
                    FROM program_schedule ps
                    INNER JOIN training_programs tp ON ps.program_id = tp.id
                    LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    WHERE ps.teacher_id = ? 
                    AND ps.week_number = ?
                    AND date('now') BETWEEN date(tp.start_date) AND date(tp.end_date)
                    ORDER BY ps.day_of_week, ps.period_number
                """, (teacher_id, week_number))

            teacher_schedule = {}
            program_list = set()

            for row in cursor.fetchall():
                day, period, subject, program_number, course_name, subject_type = row
                teacher_schedule[(day, period)] = {
                    'subject': subject,
                    'program_number': program_number,
                    'course_name': course_name,
                    'subject_type': subject_type or 'نظري'
                }
                if course_name:
                    program_list.add((program_number, course_name))

            # ملء الجدول
            for row_idx, day_name in enumerate(days):
                # اسم اليوم في العمود الأول (من اليمين)
                day_cell = table.cell(row_idx + 1, 0)
                day_cell.text = day_name
                self._format_cell_formal(day_cell, bold=True, size=14, center=True, day=True)

                # الحصص
                for idx, period in enumerate(periods):
                    cell = table.cell(row_idx + 1, idx + 1)

                    data = teacher_schedule.get((row_idx, period[0]))
                    if data and data['subject']:
                        # عرض المادة ونوعها واسم البرنامج
                        text = f"{data['subject']} - {data['subject_type']}\n{data['course_name']}"
                        cell.text = text
                        self._format_cell_formal(cell, bold=True, size=13, center=True,
                                                 even_row=(row_idx % 2 == 1), is_general=True)
                    else:
                        cell.text = ""
                        self._format_cell_formal(cell, bold=False, size=13, center=True,
                                                 even_row=(row_idx % 2 == 1))

            # حفظ الملف
            file_path = filedialog.asksaveasfilename(
                title="حفظ جدول المدرس الشامل",
                defaultextension=".docx",
                initialfile=f"جدول_{teacher_name}_أسبوع_{week_number}_شامل.docx",
                filetypes=[("Word files", "*.docx"), ("All files", "*.*")]
            )

            if file_path:
                doc.save(file_path)
                messagebox.showinfo("نجاح", "تم تصدير جدول المدرس الشامل بنجاح")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _create_teacher_schedule_doc(self, program_id, week_number, teacher_id, teacher_name, teacher_rank):
        """إنشاء ملف Word لجدول المدرس بتصميم رسمي"""
        if not DOCX_AVAILABLE:
            messagebox.showerror("خطأ", "يجب تثبيت مكتبة python-docx\npip install python-docx")
            return

        try:
            from tkinter import filedialog
            from docx.shared import RGBColor
            from docx.oxml.ns import qn
            from docx.oxml import parse_xml

            # الحصول على معلومات البرنامج
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT tp.program_number, cn.name, tp.start_date, tp.end_date
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.id = ?
            """, (program_id,))
            program_info = cursor.fetchone()

            # إنشاء المستند
            doc = Document()

            # تعيين الهوامش
            sections = doc.sections
            for section in sections:
                section.page_width = Inches(11.69)  # A4 landscape
                section.page_height = Inches(8.27)
                section.left_margin = Inches(0.5)
                section.right_margin = Inches(0.5)
                section.top_margin = Inches(0.5)
                section.bottom_margin = Inches(0.5)

            # العنوان
            title = doc.add_heading('', level=0)
            title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            run = title.add_run(f'جدول المدرس')
            run.font.size = Pt(24)
            run.font.name = 'Arial'
            run.font.bold = True

            # اسم المدرس
            teacher_para = doc.add_paragraph()
            teacher_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            teacher_run = teacher_para.add_run(f'{teacher_rank} / {teacher_name}')
            teacher_run.font.size = Pt(20)
            teacher_run.font.name = 'Arial'
            teacher_run.font.bold = True

            # معلومات البرنامج
            info_para = doc.add_paragraph()
            info_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            info_text = f'دورة: {program_info[1]}\nمن: {program_info[2]} إلى: {program_info[3]}\nالأسبوع: {week_number}'
            info_run = info_para.add_run(info_text)
            info_run.font.size = Pt(16)
            info_run.font.name = 'Arial'

            doc.add_paragraph()  # فراغ

            # الحصول على الأيام والحصص
            days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]
            cursor.execute("""
                SELECT period_number, start_time, end_time
                FROM default_periods
                WHERE is_break = 0
                ORDER BY period_number
            """)
            periods = cursor.fetchall()

            # إنشاء الجدول - الترتيب الصحيح: الأيام ثم الحصص من اليمين لليسار
            table = doc.add_table(rows=len(days) + 1, cols=len(periods) + 1)
            table.style = 'Table Grid'
            table.alignment = WD_TABLE_ALIGNMENT.CENTER

            # تعيين اتجاه الجدول RTL
            tbl = table._element
            tblPr = tbl.xpath('./w:tblPr')[0]
            bidi = parse_xml(r'<w:bidiVisual {} />'.format(nsdecls('w')))
            tblPr.append(bidi)

            # العمود الأول (من اليمين) - الأيام/الحصص
            corner_cell = table.cell(0, 0)
            corner_cell.text = "الأيام / الحصص"
            self._format_cell_formal(corner_cell, bold=True, size=16, center=True, header=True)

            # رؤوس الحصص (من العمود الثاني إلى آخر عمود)
            for idx, period in enumerate(periods):
                cell = table.cell(0, idx + 1)
                cell.text = f'الحصة {period[0]}\n{period[1]} - {period[2]}'
                self._format_cell_formal(cell, bold=True, size=14, center=True, header=True)

            # جدول المدرس
            cursor.execute("""
                SELECT ps.day_of_week, ps.period_number, psub.subject_name
                FROM program_schedule ps
                LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                WHERE ps.program_id = ? AND ps.week_number = ? AND ps.teacher_id = ?
                ORDER BY ps.day_of_week, ps.period_number
            """, (program_id, week_number, teacher_id))

            teacher_schedule = {}
            for day, period, subject in cursor.fetchall():
                teacher_schedule[(day, period)] = subject

            # ملء الجدول
            for row_idx, day_name in enumerate(days):
                # اسم اليوم في العمود الأول (من اليمين)
                day_cell = table.cell(row_idx + 1, 0)
                day_cell.text = day_name
                self._format_cell_formal(day_cell, bold=True, size=14, center=True, day=True)

                # الحصص
                for idx, period in enumerate(periods):
                    cell = table.cell(row_idx + 1, idx + 1)
                    subject = teacher_schedule.get((row_idx, period[0]), "")
                    cell.text = subject
                    # تلوين الصفوف الزوجية
                    self._format_cell_formal(cell, bold=True, size=14, center=True, even_row=(row_idx % 2 == 1))

            # حفظ الملف
            file_path = filedialog.asksaveasfilename(
                title="حفظ جدول المدرس",
                defaultextension=".docx",
                initialfile=f"جدول_{teacher_name}_أسبوع_{week_number}.docx",
                filetypes=[("Word files", "*.docx"), ("All files", "*.*")]
            )

            if file_path:
                doc.save(file_path)
                messagebox.showinfo("نجاح", "تم تصدير جدول المدرس بنجاح")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _format_cell(self, cell, bold=False, size=11, center=False):
        """تنسيق خلية في جدول Word"""
        for paragraph in cell.paragraphs:
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER if center else WD_PARAGRAPH_ALIGNMENT.RIGHT
            for run in paragraph.runs:
                run.font.name = 'Arial'
                run.font.size = Pt(size)
                run.font.bold = bold

    # تحديث دالة تصدير الجدول العام
    def _export_general_schedule(self, program_id, week_number):
        """تصدير الجدول الكامل مع نوع المادة"""
        if not DOCX_AVAILABLE:
            messagebox.showerror("خطأ", "يجب تثبيت مكتبة python-docx\npip install python-docx")
            return

        try:
            from tkinter import filedialog
            from docx import Document
            from docx.shared import Inches, Pt, RGBColor
            from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
            from docx.enum.table import WD_TABLE_ALIGNMENT
            from docx.oxml import parse_xml
            from docx.oxml.ns import nsdecls

            # الحصول على معلومات البرنامج
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT tp.program_number, cn.name, tp.start_date, tp.end_date
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.id = ?
            """, (program_id,))
            program_info = cursor.fetchone()

            # إنشاء المستند
            doc = Document()

            # تعيين الهوامش
            sections = doc.sections
            for section in sections:
                section.page_width = Inches(11.69)  # A4 landscape
                section.page_height = Inches(8.27)
                section.left_margin = Inches(0.5)
                section.right_margin = Inches(0.5)
                section.top_margin = Inches(0.5)
                section.bottom_margin = Inches(0.5)

            # العنوان الرئيسي
            title = doc.add_heading('', level=0)
            title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            run = title.add_run(f'{program_info[1]}')
            run.font.size = Pt(26)
            run.font.name = 'Arial'
            run.font.bold = True

            # التواريخ
            date_para = doc.add_paragraph()
            date_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            date_text = f'من: {program_info[2]} إلى: {program_info[3]}'
            date_run = date_para.add_run(date_text)
            date_run.font.size = Pt(18)
            date_run.font.name = 'Arial'

            # رقم الأسبوع
            week_para = doc.add_paragraph()
            week_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            week_run = week_para.add_run(f'الأسبوع: {week_number}')
            week_run.font.size = Pt(16)
            week_run.font.name = 'Arial'
            week_run.font.bold = True

            doc.add_paragraph()  # فراغ

            # الحصول على البيانات
            days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]
            cursor.execute("""
                SELECT period_number, start_time, end_time
                FROM default_periods
                WHERE is_break = 0
                ORDER BY period_number
            """)
            periods = cursor.fetchall()

            # إنشاء الجدول
            table = doc.add_table(rows=len(days) + 1, cols=len(periods) + 1)
            table.style = 'Table Grid'
            table.alignment = WD_TABLE_ALIGNMENT.CENTER

            # تعيين اتجاه الجدول RTL
            tbl = table._element
            tblPr = tbl.xpath('./w:tblPr')[0]
            bidi = parse_xml(r'<w:bidiVisual {} />'.format(nsdecls('w')))
            tblPr.append(bidi)

            # خلية الزاوية
            corner_cell = table.cell(0, 0)
            corner_cell.text = "الأيام / الحصص"
            self._format_cell_formal(corner_cell, bold=True, size=16, center=True, header=True)

            # رؤوس الحصص
            for idx, period in enumerate(periods):
                cell = table.cell(0, idx + 1)
                cell.text = f'الحصة {period[0]}\n{period[1]} - {period[2]}'
                self._format_cell_formal(cell, bold=True, size=14, center=True, header=True)

            # التحقق من وجود عمود subject_type
            cursor.execute("PRAGMA table_info(program_schedule)")
            columns = [column[1] for column in cursor.fetchall()]
            has_subject_type = 'subject_type' in columns

            # الحصول على بيانات الجدول
            if has_subject_type:
                cursor.execute("""
                    SELECT ps.day_of_week, ps.period_number, ps.subject_id, ps.teacher_id,
                           ps.teacher_name, psub.subject_name, t.name as teacher_db_name,
                           ps.subject_type
                    FROM program_schedule ps
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    LEFT JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND ps.week_number = ?
                    ORDER BY ps.day_of_week, ps.period_number
                """, (program_id, week_number))
            else:
                cursor.execute("""
                    SELECT ps.day_of_week, ps.period_number, ps.subject_id, ps.teacher_id,
                           ps.teacher_name, psub.subject_name, t.name as teacher_db_name,
                           'نظري' as subject_type
                    FROM program_schedule ps
                    LEFT JOIN program_subjects psub ON ps.subject_id = psub.id
                    LEFT JOIN teachers t ON ps.teacher_id = t.id
                    WHERE ps.program_id = ? AND ps.week_number = ?
                    ORDER BY ps.day_of_week, ps.period_number
                """, (program_id, week_number))

            schedule_data = {}
            for row in cursor.fetchall():
                day = row[0]
                period = row[1]
                schedule_data[(day, period)] = {
                    'subject': row[5],
                    'teacher_name': row[4] if row[4] else row[6] if row[6] else "لم يحدد",
                    'subject_type': row[7] if len(row) > 7 else 'نظري'
                }

            # ملء الجدول
            for row_idx, day_name in enumerate(days):
                # اسم اليوم في العمود الأول
                day_cell = table.cell(row_idx + 1, 0)
                day_cell.text = day_name
                self._format_cell_formal(day_cell, bold=True, size=14, center=True, day=True)

                # الحصص
                for idx, period in enumerate(periods):
                    cell = table.cell(row_idx + 1, idx + 1)

                    data = schedule_data.get((row_idx, period[0]), {})
                    if data.get('subject'):
                        # تعديل طريقة العرض: اسم المادة - نوع المادة
                        text = f"{data['subject']} - {data['subject_type']}\n{data['teacher_name']}"
                    else:
                        text = ""

                    cell.text = text
                    self._format_cell_formal(cell, bold=True, size=13, center=True,
                                             even_row=(row_idx % 2 == 1), is_general=True)

            # حفظ الملف
            file_path = filedialog.asksaveasfilename(
                title="حفظ الجدول العام",
                defaultextension=".docx",
                initialfile=f"جدول_{program_info[1]}_أسبوع_{week_number}.docx",
                filetypes=[("Word files", "*.docx"), ("All files", "*.*")]
            )

            if file_path:
                doc.save(file_path)
                messagebox.showinfo("نجاح", "تم تصدير الجدول العام بنجاح")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _format_cell_formal(self, cell, bold=False, size=11, center=False, header=False, day=False, even_row=False,
                            is_general=False):
        """تنسيق خلية بشكل رسمي مع خط أكبر وأوضح"""
        from docx.shared import RGBColor, Pt
        from docx.oxml import parse_xml
        from docx.oxml.ns import nsdecls
        from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

        for paragraph in cell.paragraphs:
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER if center else WD_PARAGRAPH_ALIGNMENT.RIGHT
            paragraph.space_after = Pt(2)
            paragraph.space_before = Pt(2)

            # إذا كان النص يحتوي على سطرين (للجدول العام)
            if '\n' in cell.text and is_general:
                lines = cell.text.split('\n')
                paragraph.clear()

                # السطر الأول - المادة
                if lines[0]:
                    run1 = paragraph.add_run(lines[0])
                    run1.font.name = 'Arial'
                    run1.font.size = Pt(size)
                    run1.font.bold = True

                # السطر الثاني - المدرس
                if len(lines) > 1 and lines[1]:
                    paragraph.add_run('\n')
                    run2 = paragraph.add_run(lines[1])
                    run2.font.name = 'Arial'
                    run2.font.size = Pt(size - 2)
                    run2.font.bold = False
                    run2.font.color.rgb = RGBColor(64, 64, 64)
            else:
                # نص عادي
                for run in paragraph.runs:
                    run.font.name = 'Arial'
                    run.font.size = Pt(size)
                    run.font.bold = bold

        # تلوين الخلايا
        tc = cell._element
        tcPr = tc.get_or_add_tcPr()

        if header:
            # رمادي غامق للرؤوس
            shading = parse_xml(r'<w:shd {} w:fill="D3D3D3"/>'.format(nsdecls('w')))
        elif day:
            # رمادي متوسط لأسماء الأيام
            shading = parse_xml(r'<w:shd {} w:fill="E5E5E5"/>'.format(nsdecls('w')))
        elif even_row:
            # رمادي خفيف جداً للصفوف الزوجية
            shading = parse_xml(r'<w:shd {} w:fill="F5F5F5"/>'.format(nsdecls('w')))
        else:
            # أبيض للصفوف الفردية
            shading = parse_xml(r'<w:shd {} w:fill="FFFFFF"/>'.format(nsdecls('w')))

        tcPr.append(shading)

        # إضافة padding للخلية
        tcMar = parse_xml(r'<w:tcMar {}>'
                          r'<w:top w:w="120" w:type="dxa"/>'
                          r'<w:left w:w="120" w:type="dxa"/>'
                          r'<w:bottom w:w="120" w:type="dxa"/>'
                          r'<w:right w:w="120" w:type="dxa"/>'
                          r'</w:tcMar>'.format(nsdecls('w')))
        tcPr.append(tcMar)

    def _add_special_week(self, program_id, total_weeks, parent_window):
        """إضافة أسبوع خاص (رماية أو غيره)"""
        special_window = tk.Toplevel(parent_window)
        special_window.title("إضافة أسبوع خاص")
        special_window.geometry("700x800")
        special_window.configure(bg=self.COLORS["surface"])
        special_window.transient(parent_window)
        special_window.grab_set()

        # توسيط النافذة
        special_window.update_idletasks()
        x = (special_window.winfo_screenwidth() - 700) // 2
        y = (special_window.winfo_screenheight() - 800) // 2
        special_window.geometry(f"700x800+{x}+{y}")

        # العنوان
        header = tk.Label(
            special_window,
            text="إضافة أسبوع تدريب خاص",
            font=("Tajawal", 20, "bold"),
            bg="#FF6B35",
            fg="white",
            pady=20
        )
        header.pack(fill=tk.X)

        # إطار المحتوى
        content_frame = tk.Frame(special_window, bg=self.COLORS["surface"], padx=30, pady=20)
        content_frame.pack(fill=tk.BOTH, expand=True)

        # اختيار الأسبوع
        tk.Label(
            content_frame,
            text="رقم الأسبوع:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).grid(row=0, column=0, sticky=tk.W, pady=10)

        week_var = tk.IntVar(value=1)
        week_spinbox = tk.Spinbox(
            content_frame,
            from_=1,
            to=total_weeks,
            textvariable=week_var,
            font=("Tajawal", 14),
            width=10
        )
        week_spinbox.grid(row=0, column=1, pady=10, padx=10, sticky=tk.W)

        # نوع الأسبوع الخاص
        tk.Label(
            content_frame,
            text="نوع التدريب:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).grid(row=1, column=0, sticky=tk.W, pady=10)

        type_var = tk.StringVar(value="أسبوع رماية")
        type_entry = tk.Entry(
            content_frame,
            textvariable=type_var,
            font=("Tajawal", 14),
            width=30
        )
        type_entry.grid(row=1, column=1, pady=10, padx=10)

        # الموقع
        tk.Label(
            content_frame,
            text="الموقع:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).grid(row=2, column=0, sticky=tk.W, pady=10)

        location_var = tk.StringVar(value="مركز الرماية")
        location_entry = tk.Entry(
            content_frame,
            textvariable=location_var,
            font=("Tajawal", 14),
            width=30
        )
        location_entry.grid(row=2, column=1, pady=10, padx=10)

        # اسم المدرس (اختياري)
        tk.Label(
            content_frame,
            text="اسم المدرس/الجهة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).grid(row=3, column=0, sticky=tk.W, pady=10)

        teacher_name_var = tk.StringVar(value="مركز الرماية")
        teacher_name_entry = tk.Entry(
            content_frame,
            textvariable=teacher_name_var,
            font=("Tajawal", 14),
            width=30
        )
        teacher_name_entry.grid(row=3, column=1, pady=10, padx=10)

        # المادة الموحدة
        tk.Label(
            content_frame,
            text="اسم المادة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).grid(row=4, column=0, sticky=tk.W, pady=10)

        subject_var = tk.StringVar(value="التدريب على الرماية")
        subject_entry = tk.Entry(
            content_frame,
            textvariable=subject_var,
            font=("Tajawal", 14),
            width=30
        )
        subject_entry.grid(row=4, column=1, pady=10, padx=10)

        # تحديد الأيام والحصص
        tk.Label(
            content_frame,
            text="تحديد الأيام والحصص:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).grid(row=5, column=0, columnspan=2, sticky=tk.W, pady=(20, 10))

        # إطار الجدول لاختيار الأيام والحصص
        schedule_frame = tk.Frame(content_frame, bg="white", relief=tk.RIDGE, bd=2)
        schedule_frame.grid(row=6, column=0, columnspan=2, sticky="nsew", pady=10)
        content_frame.grid_rowconfigure(6, weight=1)

        # رأس الجدول
        days = ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"]
        periods = ["الحصة 1\n08:00-08:45", "الحصة 2\n09:15-10:00",
                   "الحصة 3\n10:05-10:50", "الحصة 4\n10:55-11:40"]

        # خلية فارغة
        tk.Label(schedule_frame, text="", bg="white", relief=tk.RIDGE, bd=1).grid(row=0, column=0)

        # عناوين الأيام
        for col, day in enumerate(days, 1):
            tk.Label(
                schedule_frame,
                text=day,
                font=("Tajawal", 12, "bold"),
                bg="#E3F2FD",
                relief=tk.RIDGE,
                bd=1,
                padx=10,
                pady=5
            ).grid(row=0, column=col, sticky="ew")

        # متغيرات Checkboxes
        check_vars = {}

        # إنشاء الصفوف والخانات
        for row, period_text in enumerate(periods, 1):
            # عنوان الحصة
            tk.Label(
                schedule_frame,
                text=period_text,
                font=("Tajawal", 10, "bold"),
                bg="#F5F5F5",
                relief=tk.RIDGE,
                bd=1,
                padx=5,
                pady=5
            ).grid(row=row, column=0, sticky="nsew")

            # Checkboxes لكل يوم
            for col in range(5):
                var = tk.BooleanVar(value=False)
                check_vars[(row - 1, col)] = var

                check = tk.Checkbutton(
                    schedule_frame,
                    variable=var,
                    bg="white"
                )
                check.grid(row=row, column=col + 1, padx=20, pady=10)

        # أزرار سريعة
        quick_buttons_frame = tk.Frame(content_frame, bg=self.COLORS["surface"])
        quick_buttons_frame.grid(row=7, column=0, columnspan=2, pady=10)

        def select_all():
            for var in check_vars.values():
                var.set(True)

        def clear_all():
            for var in check_vars.values():
                var.set(False)

        def select_days(*day_indices):
            clear_all()
            for period in range(4):
                for day in day_indices:
                    check_vars[(period, day)].set(True)

        tk.Button(
            quick_buttons_frame,
            text="تحديد الكل",
            font=("Tajawal", 12),
            bg="#4CAF50",
            fg="white",
            bd=0,
            padx=15,
            pady=5,
            cursor="hand2",
            command=select_all
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            quick_buttons_frame,
            text="إلغاء التحديد",
            font=("Tajawal", 12),
            bg="#9E9E9E",
            fg="white",
            bd=0,
            padx=15,
            pady=5,
            cursor="hand2",
            command=clear_all
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            quick_buttons_frame,
            text="أول 3 أيام",
            font=("Tajawal", 12),
            bg="#2196F3",
            fg="white",
            bd=0,
            padx=15,
            pady=5,
            cursor="hand2",
            command=lambda: select_days(0, 1, 2)
        ).pack(side=tk.LEFT, padx=5)

        # أزرار الحفظ والإلغاء
        buttons_frame = tk.Frame(special_window, bg=self.COLORS["surface"])
        buttons_frame.pack(fill=tk.X, pady=20)

        def save_special_week():
            """حفظ الأسبوع الخاص"""
            week_num = week_var.get()
            week_type = type_var.get()
            location = location_var.get()
            subject_name = subject_var.get()
            teacher_name = teacher_name_var.get()

            if not all([week_type, location, subject_name, teacher_name]):
                messagebox.showwarning("تنبيه", "يرجى ملء جميع الحقول")
                return

            # التحقق من وجود أي تحديد
            has_selection = any(var.get() for var in check_vars.values())
            if not has_selection:
                messagebox.showwarning("تنبيه", "يرجى تحديد حصة واحدة على الأقل")
                return

            try:
                cursor = self.db_conn.cursor()

                # حذف أي جدول موجود لهذا الأسبوع
                cursor.execute("""
                    DELETE FROM program_schedule 
                    WHERE program_id = ? AND week_number = ?
                """, (program_id, week_num))

                # إضافة مادة مؤقتة للأسبوع الخاص
                cursor.execute("""
                    INSERT INTO program_subjects (program_id, subject_name, subject_order)
                    VALUES (?, ?, 999)
                """, (program_id, subject_name))

                temp_subject_id = cursor.lastrowid

                # الحصول على أوقات الحصص
                cursor.execute("""
                    SELECT period_number, start_time, end_time
                    FROM default_periods
                    WHERE is_break = 0
                    ORDER BY period_number
                """)
                periods_data = cursor.fetchall()

                # إضافة الحصص المحددة فقط
                for (period_idx, day_idx), is_selected in check_vars.items():
                    if is_selected.get():
                        period_info = periods_data[period_idx]
                        cursor.execute("""
                            INSERT INTO program_schedule
                            (program_id, week_number, day_of_week, period_number,
                             start_time, end_time, subject_id, teacher_id,
                             location, is_special_week, special_week_name, teacher_name)
                            VALUES (?, ?, ?, ?, ?, ?, ?, NULL, ?, 1, ?, ?)
                        """, (program_id, week_num, day_idx, period_info[0],
                              period_info[1], period_info[2], temp_subject_id,
                              location, week_type, teacher_name))

                self.db_conn.commit()
                messagebox.showinfo("نجاح", f"تم إضافة {week_type} بنجاح")

                # إعادة تحميل الصفحة
                special_window.destroy()
                parent_window.destroy()
                self._show_program_details(None)

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        tk.Button(
            buttons_frame,
            text="حفظ",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=30,
            pady=10,
            cursor="hand2",
            command=save_special_week
        ).pack(side=tk.LEFT, padx=20)

        tk.Button(
            buttons_frame,
            text="إلغاء",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=30,
            pady=10,
            cursor="hand2",
            command=special_window.destroy
        ).pack(side=tk.RIGHT, padx=20)

    def _manage_program_schedule(self, program_id, program_number, parent_window):
        """إدارة جدول البرنامج التدريبي مع دعم الأسابيع"""
        manage_window = tk.Toplevel(parent_window)
        manage_window.title(f"إدارة جدول البرنامج: {program_number}")
        manage_window.state('zoomed')
        manage_window.configure(bg=self.COLORS["background"])
        manage_window.transient(parent_window)
        manage_window.grab_set()

        # الحصول على عدد الأسابيع
        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT start_date, end_date FROM training_programs
            WHERE id = ?
        """, (program_id,))

        dates = cursor.fetchone()
        from datetime import datetime
        start_date = datetime.strptime(dates[0], "%Y-%m-%d")
        end_date = datetime.strptime(dates[1], "%Y-%m-%d")
        weeks = ((end_date - start_date).days // 7) + 1

        # شريط العنوان
        header_frame = tk.Frame(manage_window, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        title_label = tk.Label(
            header_frame,
            text=f"إدارة الجدول الدراسي - برنامج: {program_number}",
            font=("Tajawal", 24, "bold"),
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(expand=True)

        # إطار اختيار الأسبوع
        week_frame = tk.Frame(manage_window, bg=self.COLORS["surface"], height=70)
        week_frame.pack(fill=tk.X, padx=10, pady=10)
        week_frame.pack_propagate(False)

        week_container = tk.Frame(week_frame, bg=self.COLORS["surface"])
        week_container.pack(expand=True)

        tk.Label(
            week_container,
            text="اختر الأسبوع:",
            font=("Tajawal", 16, "bold"),
            bg=self.COLORS["surface"]
        ).pack(side=tk.LEFT, padx=(0, 20))

        current_week = tk.IntVar(value=1)

        # إطار أزرار الأسابيع
        weeks_frame = tk.Frame(week_container, bg=self.COLORS["surface"])
        weeks_frame.pack(side=tk.LEFT)

        week_buttons = []

        def show_week(week_num):
            current_week.set(week_num)
            # تحديث ألوان الأزرار
            for i, btn in enumerate(week_buttons):
                if i + 1 == week_num:
                    btn.config(bg="#1E3A5F", fg="white")
                else:
                    btn.config(bg="#E0E0E0", fg="black")

            # تحديث عرض الجدول
            for widget in schedule_container.winfo_children():
                widget.destroy()
            self._create_schedule_view(schedule_container, program_id, week_number=week_num, readonly=False)

        for week in range(1, weeks + 1):
            week_btn = tk.Button(
                weeks_frame,
                text=f"أسبوع {week}",
                font=("Tajawal", 12, "bold"),
                bg="#E0E0E0" if week != 1 else "#1E3A5F",
                fg="black" if week != 1 else "white",
                width=10,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=lambda w=week: show_week(w)
            )
            week_btn.pack(side=tk.LEFT, padx=5)
            week_buttons.append(week_btn)

        # زر الإغلاق
        close_btn = tk.Button(
            week_container,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg="#666666",
            fg="white",
            bd=0,
            padx=30,
            pady=8,
            cursor="hand2",
            command=manage_window.destroy
        )
        close_btn.pack(side=tk.RIGHT, padx=(50, 0))

        # إطار الجدول
        schedule_container = tk.Frame(manage_window, bg=self.COLORS["background"])
        schedule_container.pack(fill=tk.BOTH, expand=True)

        # عرض الأسبوع الأول
        show_week(1)

    def _delete_schedule_slot(self, program_id, day_index, period_number, week_number, parent_frame):
        """حذف تعيين من الجدول"""
        if messagebox.askyesno("تأكيد الحذف", "هل تريد حذف هذا التعيين؟"):
            try:
                cursor = self.db_conn.cursor()
                cursor.execute("""
                    DELETE FROM program_schedule
                    WHERE program_id = ? AND week_number = ? 
                    AND day_of_week = ? AND period_number = ?
                """, (program_id, week_number, day_index, period_number))

                self.db_conn.commit()

                # إعادة تحميل الجدول
                for widget in parent_frame.winfo_children():
                    widget.destroy()
                self._create_schedule_view(parent_frame, program_id, week_number=week_number, readonly=False)

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _edit_schedule_slot(self, program_id, day_index, period_number, week_number, parent_window):
        """تعديل تعيين موجود"""
        # نفس نافذة الإضافة ولكن مع تحميل البيانات الموجودة
        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT subject_id, teacher_id, teacher_name
            FROM program_schedule
            WHERE program_id = ? AND week_number = ? 
            AND day_of_week = ? AND period_number = ?
        """, (program_id, week_number, day_index, period_number))

        existing = cursor.fetchone()
        if existing:
            # استخدام نفس نافذة الإضافة مع تمرير البيانات الموجودة
            self._assign_schedule_slot(program_id, day_index, period_number, week_number, parent_window)

    def _manage_period_times(self):
        """إدارة أوقات الحصص الافتراضية"""
        times_window = tk.Toplevel(self)
        times_window.title("إعدادات أوقات الحصص")
        times_window.geometry("700x600")
        times_window.configure(bg=self.COLORS["surface"])
        times_window.transient(self)
        times_window.grab_set()

        # توسيط النافذة
        times_window.update_idletasks()
        x = (times_window.winfo_screenwidth() - 700) // 2
        y = (times_window.winfo_screenheight() - 600) // 2
        times_window.geometry(f"700x600+{x}+{y}")

        # العنوان
        header = tk.Label(
            times_window,
            text="إعدادات أوقات الحصص الدراسية",
            font=("Tajawal", 20, "bold"),
            bg="#1E3A5F",
            fg="white",
            pady=20
        )
        header.pack(fill=tk.X)

        # إطار المحتوى
        content_frame = tk.Frame(times_window, bg=self.COLORS["surface"], padx=20, pady=20)
        content_frame.pack(fill=tk.BOTH, expand=True)

        # تعليمات
        tk.Label(
            content_frame,
            text="يمكنك تعديل أوقات الحصص والاستراحات:",
            font=("Tajawal", 14),
            bg=self.COLORS["surface"]
        ).pack(pady=(0, 20))

        # إطار الجدول
        table_frame = tk.Frame(content_frame, bg="white", relief=tk.RIDGE, bd=2)
        table_frame.pack(fill=tk.BOTH, expand=True)

        # رؤوس الأعمدة
        headers = ["#", "من", "إلى", "نوع", "الاسم"]
        for col, header in enumerate(headers):
            tk.Label(
                table_frame,
                text=header,
                font=("Tajawal", 12, "bold"),
                bg="#1E3A5F",
                fg="white",
                padx=10,
                pady=10
            ).grid(row=0, column=col, sticky="ew")

        # الحصول على الأوقات الحالية
        cursor = self.db_conn.cursor()
        cursor.execute("""
            SELECT period_number, start_time, end_time, is_break, break_name
            FROM default_periods
            ORDER BY period_number
        """)
        periods = cursor.fetchall()

        # عناصر الإدخال
        entries = []

        for row, period in enumerate(periods, 1):
            # رقم الحصة
            tk.Label(
                table_frame,
                text=str(period[0]),
                font=("Tajawal", 12),
                bg="white"
            ).grid(row=row, column=0, padx=10, pady=5)

            # وقت البداية
            start_entry = tk.Entry(table_frame, font=("Tajawal", 11), width=10)
            start_entry.insert(0, period[1])
            start_entry.grid(row=row, column=1, padx=5, pady=5)

            # وقت النهاية
            end_entry = tk.Entry(table_frame, font=("Tajawal", 11), width=10)
            end_entry.insert(0, period[2])
            end_entry.grid(row=row, column=2, padx=5, pady=5)

            # نوع (حصة/استراحة)
            type_var = tk.StringVar(value="استراحة" if period[3] else "حصة")
            type_combo = ttk.Combobox(
                table_frame,
                textvariable=type_var,
                values=["حصة", "استراحة"],
                font=("Tajawal", 11),
                width=10,
                state="readonly"
            )
            type_combo.grid(row=row, column=3, padx=5, pady=5)

            # اسم الاستراحة
            name_entry = tk.Entry(table_frame, font=("Tajawal", 11), width=15)
            if period[4]:
                name_entry.insert(0, period[4])
            name_entry.grid(row=row, column=4, padx=5, pady=5)

            entries.append({
                'period_number': period[0],
                'start': start_entry,
                'end': end_entry,
                'type': type_var,
                'name': name_entry
            })

        # أزرار
        buttons_frame = tk.Frame(times_window, bg=self.COLORS["surface"])
        buttons_frame.pack(fill=tk.X, pady=20)

        def save_times():
            """حفظ الأوقات"""
            try:
                for entry in entries:
                    is_break = 1 if entry['type'].get() == "استراحة" else 0
                    break_name = entry['name'].get() if is_break else None

                    cursor.execute("""
                        UPDATE default_periods
                        SET start_time = ?, end_time = ?, is_break = ?, break_name = ?
                        WHERE period_number = ?
                    """, (entry['start'].get(), entry['end'].get(), is_break,
                          break_name, entry['period_number']))

                self.db_conn.commit()
                messagebox.showinfo("نجاح", "تم حفظ أوقات الحصص بنجاح")
                times_window.destroy()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        tk.Button(
            buttons_frame,
            text="حفظ التغييرات",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            bd=0,
            padx=30,
            pady=10,
            cursor="hand2",
            command=save_times
        ).pack(side=tk.LEFT, padx=20)

        tk.Button(
            buttons_frame,
            text="إلغاء",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            bd=0,
            padx=30,
            pady=10,
            cursor="hand2",
            command=times_window.destroy
        ).pack(side=tk.RIGHT, padx=20)

    def _clear_schedule(self, program_id, parent_window):
        """مسح جدول البرنامج"""
        if messagebox.askyesno("تأكيد", "هل تريد مسح الجدول بالكامل؟\nسيتم حذف جميع التعيينات"):
            try:
                cursor = self.db_conn.cursor()
                cursor.execute("DELETE FROM program_schedule WHERE program_id = ?", (program_id,))
                self.db_conn.commit()

                messagebox.showinfo("نجاح", "تم مسح الجدول بنجاح")

                # إعادة تحميل الجدول
                parent_window.destroy()
                self._manage_program_schedule(program_id, "", parent_window.master)

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _edit_training_program(self):
        """تعديل برنامج تدريبي"""
        selection = self.programs_tree.selection()
        if not selection:
            messagebox.showinfo("تنبيه", "يرجى اختيار برنامج لتعديله")
            return

        # الحصول على id البرنامج
        item = self.programs_tree.item(selection[0])
        tags = item['tags']
        program_id = None
        for tag in tags:
            if tag.startswith('id_'):
                program_id = int(tag.split('_')[1])
                break

        if not program_id:
            messagebox.showerror("خطأ", "لا يمكن تحديد البرنامج")
            return

        # الحصول على بيانات البرنامج
        cursor = self.db_conn.cursor()

        # التحقق من وجود عمود schedule_type
        cursor.execute("PRAGMA table_info(training_programs)")
        columns = [column[1] for column in cursor.fetchall()]
        has_schedule_type = 'schedule_type' in columns

        if has_schedule_type:
            cursor.execute("""
                SELECT tp.id, tp.program_number, tp.course_name_id, tp.start_date, 
                       tp.end_date, tp.category, tp.created_date, cn.name, tp.schedule_type
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.id = ?
            """, (program_id,))
        else:
            cursor.execute("""
                SELECT tp.id, tp.program_number, tp.course_name_id, tp.start_date, 
                       tp.end_date, tp.category, tp.created_date, cn.name
                FROM training_programs tp
                LEFT JOIN course_names cn ON tp.course_name_id = cn.id
                WHERE tp.id = ?
            """, (program_id,))

        program = cursor.fetchone()
        if not program:
            messagebox.showerror("خطأ", "لم يتم العثور على البرنامج")
            return

        # نافذة التعديل - ملء الشاشة
        edit_window = tk.Toplevel(self)
        edit_window.title("تعديل برنامج تدريبي")
        edit_window.state('zoomed')
        edit_window.configure(bg=self.COLORS["background"])
        edit_window.transient(self)
        edit_window.grab_set()

        # شريط العنوان
        header_frame = tk.Frame(edit_window, bg="#1E3A5F", height=100)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        header_content = tk.Frame(header_frame, bg="#1E3A5F")
        header_content.pack(expand=True, fill=tk.BOTH, padx=30)

        title_label = tk.Label(
            header_content,
            text=f"تعديل البرنامج التدريبي: {program[1]}",
            font=("Tajawal", 28, "bold"),
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(side=tk.LEFT, pady=25)

        # إطار الأزرار
        buttons_container = tk.Frame(header_content, bg="#1E3A5F")
        buttons_container.pack(side=tk.RIGHT, pady=25)

        # إطار المحتوى الرئيسي
        main_frame = tk.Frame(edit_window, bg=self.COLORS["background"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=50, pady=30)

        # إطار البيانات الأساسية
        info_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        info_frame.pack(fill=tk.X, pady=(0, 30))

        inner_info = tk.Frame(info_frame, bg=self.COLORS["surface"], padx=50, pady=30)
        inner_info.pack(fill=tk.BOTH)

        # تكوين grid
        inner_info.grid_columnconfigure(1, weight=1)
        inner_info.grid_columnconfigure(3, weight=1)

        label_font = ("Tajawal", 16, "bold")
        entry_font = ("Tajawal", 15)

        # رقم البرنامج
        tk.Label(
            inner_info,
            text="رقم البرنامج:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=0, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        program_number_entry = tk.Entry(inner_info, font=entry_font, width=25)
        program_number_entry.insert(0, program[1])
        program_number_entry.grid(row=0, column=1, sticky=tk.W, pady=15)

        # اسم الدورة
        tk.Label(
            inner_info,
            text="اسم الدورة:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=0, column=2, sticky=tk.E, pady=15, padx=(50, 20))

        # الحصول على مسميات الدورات
        cursor.execute("SELECT id, name FROM course_names WHERE is_active = 1 ORDER BY name")
        courses = cursor.fetchall()
        course_names = [course[1] for course in courses]
        course_ids = {course[1]: course[0] for course in courses}

        current_course_name = program[7]  # اسم الدورة الحالي

        course_var = tk.StringVar(master=edit_window, value=current_course_name)
        course_combo = ttk.Combobox(
            inner_info,
            textvariable=course_var,
            values=course_names,
            font=entry_font,
            width=35,
            state="readonly"
        )
        course_combo.grid(row=0, column=3, sticky=tk.W, pady=15)

        # التواريخ
        tk.Label(
            inner_info,
            text="تاريخ البداية:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=1, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        start_date_entry = DateEntry(
            inner_info,
            font=entry_font,
            date_pattern='yyyy-mm-dd',
            width=15
        )
        start_date_entry.set_date(datetime.strptime(program[3], "%Y-%m-%d").date())
        start_date_entry.grid(row=1, column=1, sticky=tk.W, pady=15)

        tk.Label(
            inner_info,
            text="تاريخ النهاية:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=1, column=2, sticky=tk.E, pady=15, padx=(50, 20))

        end_date_entry = DateEntry(
            inner_info,
            font=entry_font,
            date_pattern='yyyy-mm-dd',
            width=15
        )
        end_date_entry.set_date(datetime.strptime(program[4], "%Y-%m-%d").date())
        end_date_entry.grid(row=1, column=3, sticky=tk.W, pady=15)

        # فئة الدورة
        tk.Label(
            inner_info,
            text="فئة الدورة:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=2, column=0, sticky=tk.E, pady=15, padx=(0, 20))

        categories = ["ضباط", "أفراد", "مشتركة", "مدنيين"]
        category_var = tk.StringVar(master=edit_window, value=program[5])
        category_combo = ttk.Combobox(
            inner_info,
            textvariable=category_var,
            values=categories,
            font=entry_font,
            width=20,
            state="readonly"
        )
        category_combo.grid(row=2, column=1, sticky=tk.W, pady=15)

        # نوع الجدول
        tk.Label(
            inner_info,
            text="نوع الجدول:",
            font=label_font,
            bg=self.COLORS["surface"],
            fg=self.COLORS["dark"]
        ).grid(row=2, column=2, sticky=tk.E, pady=15, padx=(50, 20))

        current_schedule_type = "multiple"  # الافتراضي
        if has_schedule_type and len(program) > 8:
            current_schedule_type = program[8] if program[8] else "multiple"

        schedule_type_var = tk.StringVar(master=edit_window, value=current_schedule_type)
        schedule_types = [
            ("جدول مختلف لكل أسبوع", "multiple"),
            ("جدول واحد لجميع الأسابيع", "single")
        ]

        schedule_frame = tk.Frame(inner_info, bg=self.COLORS["surface"])
        schedule_frame.grid(row=2, column=3, sticky=tk.W, pady=15)

        for text, value in schedule_types:
            tk.Radiobutton(
                schedule_frame,
                text=text,
                variable=schedule_type_var,
                value=value,
                font=("Tajawal", 13),
                bg=self.COLORS["surface"]
            ).pack(side=tk.LEFT, padx=(0, 20))

        # إطار المواد
        subjects_frame = tk.Frame(main_frame, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        subjects_frame.pack(fill=tk.BOTH, expand=True)

        # عنوان المواد
        subjects_header = tk.Frame(subjects_frame, bg="#1E3A5F", height=60)
        subjects_header.pack(fill=tk.X)
        subjects_header.pack_propagate(False)

        tk.Label(
            subjects_header,
            text="مواد البرنامج التدريبي",
            font=("Tajawal", 20, "bold"),
            bg="#1E3A5F",
            fg="white"
        ).pack(expand=True)

        # إطار قابل للتمرير للمواد
        subjects_container = tk.Frame(subjects_frame, bg=self.COLORS["surface"])
        subjects_container.pack(fill=tk.BOTH, expand=True, padx=30, pady=20)

        # Canvas للتمرير
        canvas = tk.Canvas(subjects_container, bg=self.COLORS["surface"], highlightthickness=0)
        scrollbar = ttk.Scrollbar(subjects_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.COLORS["surface"])

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # الحصول على المواد الحالية
        cursor.execute("""
            SELECT id, subject_name, subject_order
            FROM program_subjects
            WHERE program_id = ? AND subject_order != 999
            ORDER BY subject_order
        """, (program_id,))

        current_subjects = cursor.fetchall()

        subjects_entries = []
        subjects_to_delete = []  # لتتبع المواد المحذوفة

        def add_subject(subject_data=None):
            """إضافة مادة جديدة أو موجودة"""
            subject_frame = tk.Frame(scrollable_frame, bg=self.COLORS["surface"], pady=8)
            subject_frame.pack(fill=tk.X, padx=20)

            num = len(subjects_entries) + 1
            num_label = tk.Label(
                subject_frame,
                text=f"المادة {num}:",
                font=("Tajawal", 15, "bold"),
                bg=self.COLORS["surface"],
                fg=self.COLORS["dark"],
                width=10
            )
            num_label.pack(side=tk.LEFT, padx=(0, 15))

            subject_entry = tk.Entry(
                subject_frame,
                font=("Tajawal", 14),
                width=60
            )
            subject_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 15))

            # إذا كانت هناك بيانات موجودة
            if subject_data:
                subject_entry.insert(0, subject_data[1])
                subject_entry.subject_id = subject_data[0]  # حفظ ID المادة
            else:
                subject_entry.subject_id = None  # مادة جديدة

            def remove_this():
                if hasattr(subject_entry, 'subject_id') and subject_entry.subject_id:
                    subjects_to_delete.append(subject_entry.subject_id)
                subject_frame.destroy()
                subjects_entries.remove(subject_entry)
                # إعادة ترقيم المواد
                for i, entry in enumerate(subjects_entries):
                    parent = entry.master
                    label = parent.winfo_children()[0]
                    label.config(text=f"المادة {i + 1}:")

            remove_btn = tk.Button(
                subject_frame,
                text="حذف",
                font=("Tajawal", 12, "bold"),
                bg=self.COLORS["danger"],
                fg="white",
                bd=0,
                padx=15,
                pady=8,
                cursor="hand2",
                command=remove_this
            )
            remove_btn.pack(side=tk.RIGHT)

            subjects_entries.append(subject_entry)
            canvas.update_idletasks()
            canvas.yview_moveto(1.0)

        # إضافة المواد الموجودة
        for subject in current_subjects:
            add_subject(subject)

        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # زر إضافة مادة
        add_subject_btn = tk.Button(
            subjects_frame,
            text="+ إضافة مادة جديدة",
            font=("Tajawal", 16, "bold"),
            bg=self.COLORS["secondary"],
            fg="white",
            bd=0,
            padx=30,
            pady=12,
            cursor="hand2",
            command=lambda: add_subject()
        )
        add_subject_btn.pack(pady=15)

        # دالة الحفظ
        def save_changes():
            """حفظ التغييرات"""
            program_number = program_number_entry.get().strip()
            course_name = course_var.get()
            start_date = start_date_entry.get()
            end_date = end_date_entry.get()
            category = category_var.get()
            schedule_type = schedule_type_var.get()

            if not all([program_number, course_name, start_date, end_date]):
                messagebox.showwarning("تنبيه", "يرجى ملء جميع الحقول المطلوبة")
                return

            # جمع المواد
            subjects = []
            for i, entry in enumerate(subjects_entries):
                subject_name = entry.get().strip()
                if subject_name:
                    subjects.append({
                        'id': getattr(entry, 'subject_id', None),
                        'name': subject_name,
                        'order': i + 1
                    })

            if not subjects:
                messagebox.showwarning("تنبيه", "يرجى إضافة مادة واحدة على الأقل")
                return

            try:
                cursor = self.db_conn.cursor()

                # التحقق من رقم البرنامج إذا تم تغييره
                if program_number != program[1]:
                    cursor.execute("""
                        SELECT COUNT(*) FROM training_programs 
                        WHERE program_number = ? AND id != ?
                    """, (program_number, program_id))

                    if cursor.fetchone()[0] > 0:
                        messagebox.showerror("خطأ", "رقم البرنامج موجود مسبقاً")
                        return

                course_id = course_ids.get(course_name)

                # إضافة عمود schedule_type إذا لم يكن موجوداً
                if not has_schedule_type:
                    cursor.execute("ALTER TABLE training_programs ADD COLUMN schedule_type TEXT DEFAULT 'multiple'")
                    self.db_conn.commit()

                # تحديث البرنامج
                cursor.execute("""
                    UPDATE training_programs 
                    SET program_number = ?, course_name_id = ?, start_date = ?, 
                        end_date = ?, category = ?, schedule_type = ?
                    WHERE id = ?
                """, (program_number, course_id, start_date, end_date,
                      category, schedule_type, program_id))

                # حذف المواد المحذوفة
                for subject_id in subjects_to_delete:
                    cursor.execute("DELETE FROM program_subjects WHERE id = ?", (subject_id,))

                # تحديث أو إضافة المواد
                for subject in subjects:
                    if subject['id']:  # مادة موجودة
                        cursor.execute("""
                            UPDATE program_subjects 
                            SET subject_name = ?, subject_order = ?
                            WHERE id = ?
                        """, (subject['name'], subject['order'], subject['id']))
                    else:  # مادة جديدة
                        cursor.execute("""
                            INSERT INTO program_subjects (program_id, subject_name, subject_order)
                            VALUES (?, ?, ?)
                        """, (program_id, subject['name'], subject['order']))

                self.db_conn.commit()

                messagebox.showinfo("نجاح", "تم تحديث البرنامج التدريبي بنجاح")
                edit_window.destroy()
                self._load_training_programs()

            except Exception as e:
                self.db_conn.rollback()
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # زر الحفظ
        save_btn = tk.Button(
            buttons_container,
            text="✓ حفظ التغييرات",
            font=("Tajawal", 16, "bold"),
            bg=self.COLORS["warning"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=save_changes
        )
        save_btn.pack(side=tk.LEFT, padx=(0, 10))

        # تأثيرات hover
        save_btn.bind("<Enter>", lambda e: save_btn.config(bg="#e0a800"))
        save_btn.bind("<Leave>", lambda e: save_btn.config(bg=self.COLORS["warning"]))

        # زر الإلغاء
        cancel_btn = tk.Button(
            buttons_container,
            text="✕ إلغاء",
            font=("Tajawal", 16, "bold"),
            bg="#dc3545",
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=edit_window.destroy
        )
        cancel_btn.pack(side=tk.LEFT)

        # تأثيرات hover
        cancel_btn.bind("<Enter>", lambda e: cancel_btn.config(bg="#c82333"))
        cancel_btn.bind("<Leave>", lambda e: cancel_btn.config(bg="#dc3545"))

    def _delete_training_program(self):
        """حذف برنامج تدريبي مع جميع البيانات المرتبطة"""
        selection = self.programs_tree.selection()
        if not selection:
            messagebox.showinfo("تنبيه", "يرجى اختيار برنامج لحذفه")
            return

        item = self.programs_tree.item(selection[0])
        program_data = item['values']
        program_number = program_data[0]

        if messagebox.askyesno("تأكيد الحذف",
                               f"هل تريد حذف البرنامج: {program_number}؟\n\nسيتم حذف:\n• جميع المواد\n• جميع الجداول\n• جميع التعيينات"):
            # الحصول على id البرنامج
            tags = item['tags']
            program_id = None
            for tag in tags:
                if tag.startswith('id_'):
                    program_id = int(tag.split('_')[1])
                    break

            if program_id:
                try:
                    cursor = self.db_conn.cursor()

                    # حذف الجداول المرتبطة أولاً
                    cursor.execute("DELETE FROM program_schedule WHERE program_id = ?", (program_id,))

                    # حذف المواد المرتبطة
                    cursor.execute("DELETE FROM program_subjects WHERE program_id = ?", (program_id,))

                    # حذف البرنامج نفسه
                    cursor.execute("DELETE FROM training_programs WHERE id = ?", (program_id,))

                    self.db_conn.commit()

                    messagebox.showinfo("نجاح", "تم حذف البرنامج وجميع البيانات المرتبطة به بنجاح")
                    self._load_training_programs()

                except Exception as e:
                    self.db_conn.rollback()
                    messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    # 4. تعديل صفحة إدارة مسميات الدورات
    def _manage_course_names(self):
        """إدارة مسميات الدورات والمواد العامة والتخصصية"""
        manage_window = tk.Toplevel(self)
        manage_window.title("إدارة مسميات الدورات والمواد")
        manage_window.geometry("1100x800")
        manage_window.configure(bg=self.COLORS["background"])
        manage_window.transient(self)
        manage_window.grab_set()

        # توسيط النافذة
        manage_window.update_idletasks()
        x = (manage_window.winfo_screenwidth() - 1100) // 2
        y = (manage_window.winfo_screenheight() - 800) // 2
        manage_window.geometry(f"1100x800+{x}+{y}")

        # شريط العنوان
        header_frame = tk.Frame(manage_window, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X, padx=10, pady=10)
        header_frame.pack_propagate(False)

        title_label = tk.Label(
            header_frame,
            text="إدارة مسميات الدورات والمواد",
            font=("Tajawal", 24, "bold"),
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(expand=True)

        # إطار الأزرار
        btn_frame = tk.Frame(manage_window, bg=self.COLORS["surface"], height=70)
        btn_frame.pack(fill=tk.X, padx=15, pady=(0, 10))
        btn_frame.pack_propagate(False)

        btn_container = tk.Frame(btn_frame, bg=self.COLORS["surface"])
        btn_container.pack(side=tk.LEFT, padx=20, pady=15)

        # أزرار الإجراءات
        buttons = [
            ("إضافة مسمى جديد", self.COLORS["success"], lambda: self._add_course_name(manage_window)),
            ("تعديل المسمى", self.COLORS["warning"], lambda: self._edit_course_name(manage_window)),
            ("حذف المسمى", self.COLORS["danger"], lambda: self._delete_course_name(manage_window)),
            ("إدارة المواد العامة", "#FF9800", lambda: self._manage_general_subjects()),
            ("إدارة المواد التخصصية", "#9C27B0", lambda: self._manage_specialized_subjects())
        ]

        for text, color, command in buttons:
            btn = tk.Button(
                btn_container,
                text=text,
                font=("Tajawal", 13, "bold"),
                bg=color,
                fg="white",
                padx=18,
                pady=10,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=command
            )
            btn.pack(side=tk.LEFT, padx=5)

        # خط فاصل
        separator = tk.Frame(manage_window, bg=self.COLORS["border"], height=2)
        separator.pack(fill=tk.X, padx=15, pady=(0, 10))

        # إطار الجدول الرئيسي
        main_table_frame = tk.Frame(manage_window, bg="#FFFFFF", bd=2, relief=tk.RIDGE)
        main_table_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(0, 10))

        table_frame = tk.Frame(main_table_frame, bg="#FFFFFF")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)

        # تنسيق Treeview
        style = ttk.Style()
        style.configure("CourseNames.Treeview",
                        background="#FFFFFF",
                        foreground="#000000",
                        rowheight=45,
                        fieldbackground="#FFFFFF",
                        font=("Tajawal", 14, "normal"),
                        borderwidth=1,
                        relief="solid")

        style.configure("CourseNames.Treeview.Heading",
                        font=("Tajawal", 16, "bold"),
                        background="#1E3A5F",
                        foreground="#FFFFFF",
                        relief="raised",
                        borderwidth=1,
                        padding=[10, 8])

        # شريط التمرير
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical")
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # جدول المسميات
        self.course_names_tree = ttk.Treeview(
            table_frame,
            columns=("id", "name", "description", "created_date"),
            show="tree headings",
            style="CourseNames.Treeview",
            yscrollcommand=scrollbar.set,
            height=12
        )

        # إخفاء عمود الشجرة
        self.course_names_tree.column("#0", width=0, stretch=tk.NO)

        # تكوين الأعمدة
        column_configs = [
            ("id", "م", 80, tk.CENTER),
            ("name", "اسم الدورة", 350, tk.CENTER),
            ("description", "الوصف", 300, tk.CENTER),
            ("created_date", "تاريخ الإضافة", 150, tk.CENTER)
        ]

        for col_id, heading, width, anchor in column_configs:
            self.course_names_tree.column(col_id, width=width, anchor=anchor)
            self.course_names_tree.heading(col_id, text=heading, anchor=tk.CENTER)

        # تكوين ألوان الصفوف
        self.course_names_tree.tag_configure('oddrow', background='#FFFFFF')
        self.course_names_tree.tag_configure('evenrow', background='#F0F8FF')

        self.course_names_tree.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.course_names_tree.yview)

        # تحميل المسميات
        self._load_course_names()

        # إطار المعلومات السفلي
        info_frame = tk.Frame(manage_window, bg="#1E3A5F", height=60)
        info_frame.pack(fill=tk.X, padx=15, pady=(5, 10))
        info_frame.pack_propagate(False)

        self.course_count_label = tk.Label(
            info_frame,
            text="إجمالي مسميات الدورات: 0",
            font=("Tajawal", 14, "bold"),
            bg="#1E3A5F",
            fg="#FFFFFF"
        )
        self.course_count_label.pack(expand=True)

        # زر الإغلاق
        close_btn = tk.Button(
            manage_window,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["dark"],
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=manage_window.destroy
        )
        close_btn.pack(pady=10)

        # تأثيرات hover
        close_btn.bind("<Enter>", lambda e: close_btn.config(bg="#333333"))
        close_btn.bind("<Leave>", lambda e: close_btn.config(bg=self.COLORS["dark"]))

    # 3. دالة إدارة المواد العامة
    def _manage_general_subjects(self):
        """إدارة المواد العامة"""
        subjects_window = tk.Toplevel(self)
        subjects_window.title("إدارة المواد العامة")
        subjects_window.geometry("800x600")
        subjects_window.configure(bg=self.COLORS["background"])
        subjects_window.transient(self)
        subjects_window.grab_set()

        # توسيط النافذة
        subjects_window.update_idletasks()
        x = (subjects_window.winfo_screenwidth() - 800) // 2
        y = (subjects_window.winfo_screenheight() - 600) // 2
        subjects_window.geometry(f"800x600+{x}+{y}")

        # شريط العنوان
        header_frame = tk.Frame(subjects_window, bg="#FF9800", height=70)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        tk.Label(
            header_frame,
            text="إدارة المواد العامة",
            font=("Tajawal", 20, "bold"),
            bg="#FF9800",
            fg="white"
        ).pack(expand=True)

        # إطار المحتوى
        content_frame = tk.Frame(subjects_window, bg=self.COLORS["surface"], padx=20, pady=20)
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # إطار الإضافة
        add_frame = tk.Frame(content_frame, bg=self.COLORS["surface"])
        add_frame.pack(fill=tk.X, pady=(0, 20))

        tk.Label(
            add_frame,
            text="اسم المادة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(side=tk.RIGHT, padx=(0, 10))

        subject_entry = tk.Entry(
            add_frame,
            font=("Tajawal", 14),
            width=30
        )
        subject_entry.pack(side=tk.RIGHT, padx=(0, 10))

        def add_general_subject():
            subject_name = subject_entry.get().strip()
            if not subject_name:
                messagebox.showwarning("تنبيه", "يرجى إدخال اسم المادة")
                return

            try:
                cursor = self.db_conn.cursor()
                cursor.execute("""
                    INSERT INTO general_subjects (subject_name, created_date)
                    VALUES (?, ?)
                """, (subject_name, datetime.now().strftime("%Y-%m-%d")))
                self.db_conn.commit()

                subject_entry.delete(0, tk.END)
                load_general_subjects()
                messagebox.showinfo("نجاح", "تمت إضافة المادة بنجاح")
            except sqlite3.IntegrityError:
                messagebox.showerror("خطأ", "هذه المادة موجودة مسبقاً")
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        add_btn = tk.Button(
            add_frame,
            text="إضافة",
            font=("Tajawal", 13, "bold"),
            bg="#FF9800",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            cursor="hand2",
            command=add_general_subject
        )
        add_btn.pack(side=tk.RIGHT)

        # قائمة المواد
        list_frame = tk.Frame(content_frame, bg="white", relief=tk.GROOVE, bd=2)
        list_frame.pack(fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        subjects_listbox = tk.Listbox(
            list_frame,
            font=("Tajawal", 13),
            yscrollcommand=scrollbar.set,
            selectmode=tk.SINGLE
        )
        subjects_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=subjects_listbox.yview)

        # أزرار الحذف
        buttons_frame = tk.Frame(content_frame, bg=self.COLORS["surface"])
        buttons_frame.pack(fill=tk.X, pady=(10, 0))

        def delete_subject():
            selection = subjects_listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار مادة للحذف")
                return

            subject_name = subjects_listbox.get(selection[0])
            if messagebox.askyesno("تأكيد", f"هل تريد حذف المادة: {subject_name}؟"):
                try:
                    cursor = self.db_conn.cursor()
                    cursor.execute("DELETE FROM general_subjects WHERE subject_name = ?", (subject_name,))
                    self.db_conn.commit()
                    load_general_subjects()
                    messagebox.showinfo("نجاح", "تم حذف المادة بنجاح")
                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        delete_btn = tk.Button(
            buttons_frame,
            text="حذف المادة المحددة",
            font=("Tajawal", 13, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            cursor="hand2",
            command=delete_subject
        )
        delete_btn.pack(side=tk.RIGHT)

        # دالة تحميل المواد
        def load_general_subjects():
            subjects_listbox.delete(0, tk.END)
            try:
                cursor = self.db_conn.cursor()
                cursor.execute("SELECT subject_name FROM general_subjects ORDER BY subject_name")
                subjects = cursor.fetchall()
                for subject in subjects:
                    subjects_listbox.insert(tk.END, subject[0])
            except Exception as e:
                print(f"خطأ في تحميل المواد: {e}")

        # زر الإغلاق
        close_btn = tk.Button(
            subjects_window,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["dark"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            cursor="hand2",
            command=subjects_window.destroy
        )
        close_btn.pack(pady=10)

        # تحميل المواد
        load_general_subjects()

    # 4. دالة إدارة المواد التخصصية
    def _manage_specialized_subjects(self):
        """إدارة المواد التخصصية"""
        subjects_window = tk.Toplevel(self)
        subjects_window.title("إدارة المواد التخصصية")
        subjects_window.geometry("900x700")
        subjects_window.configure(bg=self.COLORS["background"])
        subjects_window.transient(self)
        subjects_window.grab_set()

        # توسيط النافذة
        subjects_window.update_idletasks()
        x = (subjects_window.winfo_screenwidth() - 900) // 2
        y = (subjects_window.winfo_screenheight() - 700) // 2
        subjects_window.geometry(f"900x700+{x}+{y}")

        # شريط العنوان
        header_frame = tk.Frame(subjects_window, bg="#9C27B0", height=70)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        tk.Label(
            header_frame,
            text="إدارة المواد التخصصية",
            font=("Tajawal", 20, "bold"),
            bg="#9C27B0",
            fg="white"
        ).pack(expand=True)

        # إطار المحتوى
        content_frame = tk.Frame(subjects_window, bg=self.COLORS["surface"])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # إطار اختيار الدورة
        course_frame = tk.Frame(content_frame, bg=self.COLORS["surface"])
        course_frame.pack(fill=tk.X, pady=(0, 20))

        tk.Label(
            course_frame,
            text="اختر الدورة:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(side=tk.RIGHT, padx=(0, 10))

        # الحصول على مسميات الدورات
        cursor = self.db_conn.cursor()
        cursor.execute("SELECT name FROM course_names WHERE is_active = 1 ORDER BY name")
        courses = [c[0] for c in cursor.fetchall()]

        course_var = tk.StringVar()
        course_combo = ttk.Combobox(
            course_frame,
            textvariable=course_var,
            values=courses,
            font=("Tajawal", 13),
            width=40,
            state="readonly"
        )
        course_combo.pack(side=tk.RIGHT)

        # إطار إضافة المادة
        add_frame = tk.Frame(content_frame, bg=self.COLORS["surface"])
        add_frame.pack(fill=tk.X, pady=(0, 20))

        tk.Label(
            add_frame,
            text="اسم المادة التخصصية:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(side=tk.RIGHT, padx=(0, 10))

        subject_entry = tk.Entry(
            add_frame,
            font=("Tajawal", 14),
            width=30
        )
        subject_entry.pack(side=tk.RIGHT, padx=(0, 10))

        def add_specialized_subject():
            course_name = course_var.get()
            subject_name = subject_entry.get().strip()

            if not course_name:
                messagebox.showwarning("تنبيه", "يرجى اختيار دورة")
                return

            if not subject_name:
                messagebox.showwarning("تنبيه", "يرجى إدخال اسم المادة")
                return

            try:
                cursor = self.db_conn.cursor()
                cursor.execute("""
                    INSERT INTO specialized_subjects (course_name, subject_name, created_date)
                    VALUES (?, ?, ?)
                """, (course_name, subject_name, datetime.now().strftime("%Y-%m-%d")))
                self.db_conn.commit()

                subject_entry.delete(0, tk.END)
                load_specialized_subjects()
                messagebox.showinfo("نجاح", "تمت إضافة المادة التخصصية بنجاح")
            except sqlite3.IntegrityError:
                messagebox.showerror("خطأ", "هذه المادة موجودة مسبقاً لهذه الدورة")
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        add_btn = tk.Button(
            add_frame,
            text="إضافة",
            font=("Tajawal", 13, "bold"),
            bg="#9C27B0",
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            cursor="hand2",
            command=add_specialized_subject
        )
        add_btn.pack(side=tk.RIGHT)

        # قائمة المواد
        list_frame = tk.Frame(content_frame, bg="white", relief=tk.GROOVE, bd=2)
        list_frame.pack(fill=tk.BOTH, expand=True)

        # تنسيق TreeView
        style = ttk.Style()
        style.configure("Specialized.Treeview",
                        background="#FFFFFF",
                        foreground="#000000",
                        rowheight=35,
                        fieldbackground="#FFFFFF",
                        font=("Tajawal", 12))

        style.configure("Specialized.Treeview.Heading",
                        font=("Tajawal", 13, "bold"),
                        background="#9C27B0",
                        foreground="#FFFFFF")

        scrollbar = ttk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        subjects_tree = ttk.Treeview(
            list_frame,
            columns=("course", "subject"),
            show="tree headings",
            style="Specialized.Treeview",
            yscrollcommand=scrollbar.set
        )

        subjects_tree.column("#0", width=0, stretch=tk.NO)
        subjects_tree.column("course", width=350, anchor=tk.CENTER)
        subjects_tree.column("subject", width=350, anchor=tk.CENTER)

        subjects_tree.heading("course", text="اسم الدورة")
        subjects_tree.heading("subject", text="المادة التخصصية")

        subjects_tree.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=subjects_tree.yview)

        # أزرار الحذف
        buttons_frame = tk.Frame(content_frame, bg=self.COLORS["surface"])
        buttons_frame.pack(fill=tk.X, pady=(10, 0))

        def delete_subject():
            selection = subjects_tree.selection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار مادة للحذف")
                return

            item = subjects_tree.item(selection[0])
            course_name, subject_name = item['values']

            if messagebox.askyesno("تأكيد", f"هل تريد حذف المادة: {subject_name} من دورة {course_name}؟"):
                try:
                    cursor = self.db_conn.cursor()
                    cursor.execute("""
                        DELETE FROM specialized_subjects 
                        WHERE course_name = ? AND subject_name = ?
                    """, (course_name, subject_name))
                    self.db_conn.commit()
                    load_specialized_subjects()
                    messagebox.showinfo("نجاح", "تم حذف المادة بنجاح")
                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        delete_btn = tk.Button(
            buttons_frame,
            text="حذف المادة المحددة",
            font=("Tajawal", 13, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            cursor="hand2",
            command=delete_subject
        )
        delete_btn.pack(side=tk.RIGHT)

        # دالة تحميل المواد
        def load_specialized_subjects():
            for item in subjects_tree.get_children():
                subjects_tree.delete(item)

            try:
                cursor = self.db_conn.cursor()
                if course_var.get():
                    cursor.execute("""
                        SELECT course_name, subject_name 
                        FROM specialized_subjects 
                        WHERE course_name = ?
                        ORDER BY subject_name
                    """, (course_var.get(),))
                else:
                    cursor.execute("""
                        SELECT course_name, subject_name 
                        FROM specialized_subjects 
                        ORDER BY course_name, subject_name
                    """)

                subjects = cursor.fetchall()
                for subject in subjects:
                    subjects_tree.insert("", tk.END, values=subject)
            except Exception as e:
                print(f"خطأ في تحميل المواد: {e}")

        # ربط تغيير الدورة بتحديث القائمة
        course_combo.bind("<<ComboboxSelected>>", lambda e: load_specialized_subjects())

        # زر الإغلاق
        close_btn = tk.Button(
            subjects_window,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["dark"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            cursor="hand2",
            command=subjects_window.destroy
        )
        close_btn.pack(pady=10)

        # تحميل المواد
        load_specialized_subjects()

    def _load_course_names(self):
        """تحميل مسميات الدورات"""
        # مسح البيانات الحالية
        for item in self.course_names_tree.get_children():
            self.course_names_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT id, name, description, created_date 
                FROM course_names 
                WHERE is_active = 1 
                ORDER BY name
            """)

            courses = cursor.fetchall()

            for index, course in enumerate(courses):
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                self.course_names_tree.insert("", tk.END, values=course, tags=(tag,))

        except Exception as e:
            print(f"خطأ في تحميل مسميات الدورات: {e}")

    def _add_course_name(self, parent_window):
        """إضافة مسمى دورة جديد"""
        add_window = tk.Toplevel(parent_window)
        add_window.title("إضافة مسمى دورة جديد")
        add_window.geometry("500x300")
        add_window.configure(bg=self.COLORS["background"])
        add_window.transient(parent_window)
        add_window.grab_set()

        # توسيط النافذة
        add_window.update_idletasks()
        x = (add_window.winfo_screenwidth() - 500) // 2
        y = (add_window.winfo_screenheight() - 300) // 2
        add_window.geometry(f"500x300+{x}+{y}")

        # إطار الحقول
        form_frame = tk.Frame(add_window, bg=self.COLORS["surface"], padx=30, pady=30)
        form_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # حقل اسم الدورة
        tk.Label(form_frame, text="اسم الدورة *", font=self.FONTS["text_bold"],
                 bg=self.COLORS["surface"]).grid(row=0, column=0, sticky=tk.W, pady=10)
        name_entry = tk.Entry(form_frame, font=self.FONTS["text"], width=40)
        name_entry.grid(row=0, column=1, pady=10, padx=10)

        # حقل الوصف
        tk.Label(form_frame, text="الوصف (اختياري)", font=self.FONTS["text_bold"],
                 bg=self.COLORS["surface"]).grid(row=1, column=0, sticky=tk.W, pady=10)
        desc_entry = tk.Entry(form_frame, font=self.FONTS["text"], width=40)
        desc_entry.grid(row=1, column=1, pady=10, padx=10)

        # إطار الأزرار
        buttons_frame = tk.Frame(add_window, bg=self.COLORS["background"])
        buttons_frame.pack(fill=tk.X, pady=20)

        def save_course_name():
            name = name_entry.get().strip()
            description = desc_entry.get().strip()

            if not name:
                messagebox.showwarning("تنبيه", "يرجى إدخال اسم الدورة")
                return

            try:
                cursor = self.db_conn.cursor()
                cursor.execute("""
                    INSERT INTO course_names (name, description, created_date)
                    VALUES (?, ?, ?)
                """, (name, description, datetime.now().strftime("%Y-%m-%d")))

                self.db_conn.commit()
                messagebox.showinfo("نجاح", "تم إضافة مسمى الدورة بنجاح")
                add_window.destroy()
                self._load_course_names()

            except sqlite3.IntegrityError:
                messagebox.showerror("خطأ", "اسم الدورة موجود مسبقاً")
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

        # زر الحفظ
        save_btn = tk.Button(
            buttons_frame,
            text="حفظ",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["success"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=save_course_name
        )
        save_btn.pack(side=tk.LEFT, padx=20)

        # زر الإلغاء
        cancel_btn = tk.Button(
            buttons_frame,
            text="إلغاء",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["danger"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=add_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=20)

    def _edit_course_name(self, parent_window):
        """تعديل مسمى دورة"""
        selection = self.course_names_tree.selection()
        if not selection:
            messagebox.showinfo("تنبيه", "يرجى اختيار مسمى لتعديله")
            return

        # TODO: إضافة نافذة التعديل
        messagebox.showinfo("قيد التطوير", "ميزة التعديل قيد التطوير")

    def _delete_course_name(self, parent_window):
        """حذف مسمى دورة"""
        selection = self.course_names_tree.selection()
        if not selection:
            messagebox.showinfo("تنبيه", "يرجى اختيار مسمى لحذفه")
            return

        item = self.course_names_tree.item(selection[0])
        values = item['values']
        course_id = values[0]
        course_name = values[1]

        if messagebox.askyesno("تأكيد الحذف", f"هل تريد حذف المسمى: {course_name}؟"):
            try:
                cursor = self.db_conn.cursor()
                cursor.execute("UPDATE course_names SET is_active = 0 WHERE id = ?", (course_id,))
                self.db_conn.commit()

                messagebox.showinfo("نجاح", "تم حذف المسمى بنجاح")
                self._load_course_names()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ: {str(e)}")

    def _load_courses(self):
        """تحميل بيانات الدورات"""
        # مسح البيانات الحالية
        for item in self.courses_tree.get_children():
            self.courses_tree.delete(item)

        try:
            cursor = self.db_conn.cursor()
            cursor.execute("""
                SELECT number, name, start_date, end_date, category 
                FROM courses 
                ORDER BY start_date DESC
            """)

            courses = cursor.fetchall()

            for index, course in enumerate(courses):
                tag = 'evenrow' if index % 2 == 0 else 'oddrow'
                self.courses_tree.insert("", tk.END, values=course, tags=(tag,))

            # تحديث العداد
            if hasattr(self, 'course_count_label'):
                self.course_count_label.config(text=f"إجمالي عدد الدورات: {len(courses)}")

        except Exception as e:
            print(f"خطأ في تحميل الدورات: {e}")

    def _add_new_course(self):
        """إضافة دورة جديدة"""
        messagebox.showinfo("قيد التطوير", "ميزة إضافة الدورات قيد التطوير")

    def _edit_course(self):
        """تعديل دورة"""
        messagebox.showinfo("قيد التطوير", "ميزة تعديل الدورات قيد التطوير")

    def _delete_course(self):
        """حذف دورة"""
        messagebox.showinfo("قيد التطوير", "ميزة حذف الدورات قيد التطوير")

    def _create_users_tab(self):
        """إنشاء تبويب إدارة المستخدمين"""
        users_frame = tk.Frame(self.tab_control, bg=self.COLORS["background"])
        self.tab_control.add(users_frame, text="إدارة المستخدمين")

        # إطار العنوان
        title_frame = tk.Frame(users_frame, bg=self.COLORS["surface"], padx=20, pady=15)
        title_frame.pack(fill=tk.X, pady=(0, 20))

        tk.Label(title_frame, text="إدارة المستخدمين",
                 font=self.FONTS["large_title"],
                 bg=self.COLORS["surface"],
                 fg=self.COLORS["dark"]).pack()

        # إطار الأزرار
        buttons_frame = tk.Frame(users_frame, bg=self.COLORS["background"])
        buttons_frame.pack(pady=20)

        open_users_btn = tk.Button(
            buttons_frame,
            text="فتح نافذة إدارة المستخدمين",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["primary"],
            fg="white",
            padx=30, pady=15,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=self._open_user_management
        )
        open_users_btn.pack()

        # إطار المعلومات
        info_frame = tk.Frame(users_frame, bg=self.COLORS["surface"], padx=20, pady=20)
        info_frame.pack(fill=tk.X, padx=50, pady=20)

        info_text = """من هنا يمكنك:
        • إضافة مستخدمين جدد للنظام
        • تعديل بيانات المستخدمين الحاليين
        • تفعيل أو تعطيل حسابات المستخدمين
        • إدارة صلاحيات المستخدمين
        • حذف المستخدمين غير النشطين"""

        tk.Label(info_frame, text=info_text,
                 font=self.FONTS["text"],
                 bg=self.COLORS["surface"],
                 fg=self.COLORS["dark"],
                 justify=tk.RIGHT).pack(pady=10)

    def _create_settings_tab(self):
        """إنشاء تبويب الإعدادات بتصميم محسن"""
        settings_frame = tk.Frame(self.tab_control, bg=self.COLORS["background"])
        self.tab_control.add(settings_frame, text="الإعدادات")

        # شريط العنوان
        header_frame = tk.Frame(settings_frame, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X, padx=10, pady=10)
        header_frame.pack_propagate(False)

        title_label = tk.Label(
            header_frame,
            text="إعدادات النظام",
            font=self.FONTS["large_title"],
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(expand=True)

        # إطار المحتوى الرئيسي
        main_content = tk.Frame(settings_frame, bg=self.COLORS["background"])
        main_content.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # قسم النسخ الاحتياطي
        backup_section = tk.Frame(main_content, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        backup_section.pack(fill=tk.X, pady=(0, 20))

        # عنوان قسم النسخ الاحتياطي
        backup_header = tk.Frame(backup_section, bg="#2E7D32", height=50)
        backup_header.pack(fill=tk.X)
        backup_header.pack_propagate(False)

        tk.Label(
            backup_header,
            text="إدارة النسخ الاحتياطية",
            font=("Tajawal", 18, "bold"),
            bg="#2E7D32",
            fg="white"
        ).pack(expand=True)

        # محتوى قسم النسخ الاحتياطي
        backup_content = tk.Frame(backup_section, bg=self.COLORS["surface"], padx=30, pady=20)
        backup_content.pack(fill=tk.X)

        tk.Label(
            backup_content,
            text="إنشاء واستعراض النسخ الاحتياطية للنظام",
            font=("Tajawal", 14),
            bg=self.COLORS["surface"],
            fg="#666"
        ).pack(anchor=tk.W, pady=(0, 15))

        # أزرار النسخ الاحتياطي
        backup_buttons_frame = tk.Frame(backup_content, bg=self.COLORS["surface"])
        backup_buttons_frame.pack(fill=tk.X)

        # زر إنشاء نسخة احتياطية
        create_backup_btn = tk.Button(
            backup_buttons_frame,
            text="💾 إنشاء نسخة احتياطية",
            font=("Tajawal", 14, "bold"),
            bg="#2E7D32",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self._create_automatic_backup
        )
        create_backup_btn.pack(side=tk.LEFT, padx=(0, 10))

        # تأثيرات hover
        create_backup_btn.bind("<Enter>", lambda e: create_backup_btn.config(bg="#1B5E20"))
        create_backup_btn.bind("<Leave>", lambda e: create_backup_btn.config(bg="#2E7D32"))

        # زر استعراض النسخ الاحتياطية
        restore_backup_btn = tk.Button(
            backup_buttons_frame,
            text="📂 استعراض النسخ الاحتياطية",
            font=("Tajawal", 14, "bold"),
            bg="#1976D2",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self._browse_backups
        )
        restore_backup_btn.pack(side=tk.LEFT)

        # تأثيرات hover
        restore_backup_btn.bind("<Enter>", lambda e: restore_backup_btn.config(bg="#0D47A1"))
        restore_backup_btn.bind("<Leave>", lambda e: restore_backup_btn.config(bg="#1976D2"))

        # خط فاصل
        separator = tk.Frame(main_content, bg=self.COLORS["border"], height=2)
        separator.pack(fill=tk.X, pady=20)

        # قسم إعادة التعيين
        reset_section = tk.Frame(main_content, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        reset_section.pack(fill=tk.X)

        # عنوان قسم إعادة التعيين
        reset_header = tk.Frame(reset_section, bg="#D32F2F", height=50)
        reset_header.pack(fill=tk.X)
        reset_header.pack_propagate(False)

        tk.Label(
            reset_header,
            text="إعادة تعيين النظام",
            font=("Tajawal", 18, "bold"),
            bg="#D32F2F",
            fg="white"
        ).pack(expand=True)

        # محتوى قسم إعادة التعيين
        reset_content = tk.Frame(reset_section, bg=self.COLORS["surface"], padx=30, pady=20)
        reset_content.pack(fill=tk.X)

        tk.Label(
            reset_content,
            text="⚠️ تحذير: سيتم حذف جميع البيانات نهائياً",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"],
            fg="#D32F2F"
        ).pack(anchor=tk.W, pady=(0, 15))

        # زر إعادة التعيين
        reset_btn = tk.Button(
            reset_content,
            text="🗑️ إعادة تعيين النظام",
            font=("Tajawal", 14, "bold"),
            bg="#D32F2F",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self._reset_system
        )
        reset_btn.pack()

        # تأثيرات hover
        reset_btn.bind("<Enter>", lambda e: reset_btn.config(bg="#B71C1C"))
        reset_btn.bind("<Leave>", lambda e: reset_btn.config(bg="#D32F2F"))

    def _create_automatic_backup(self):
        """إنشاء نسخة احتياطية تلقائية في مجلد Backup"""
        import shutil
        import os

        try:
            # إنشاء مجلد Backup إذا لم يكن موجوداً
            backup_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Backup")
            if not os.path.exists(backup_dir):
                os.makedirs(backup_dir)

            # اسم ملف النسخة الاحتياطية مع التاريخ والوقت
            backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            backup_path = os.path.join(backup_dir, backup_filename)

            # إغلاق المعاملات المعلقة
            self.db_conn.commit()

            # نسخ قاعدة البيانات - استخدام الاسم الصحيح
            shutil.copy2("training_system.db", backup_path)

            # إنشاء ملف معلومات
            info_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}_info.txt"
            info_path = os.path.join(backup_dir, info_filename)

            with open(info_path, 'w', encoding='utf-8') as f:
                f.write("معلومات النسخة الاحتياطية\n")
                f.write("=" * 40 + "\n")
                f.write(f"التاريخ: {datetime.now().strftime('%Y-%m-%d')}\n")
                f.write(f"الوقت: {datetime.now().strftime('%H:%M:%S')}\n")
                f.write(f"المستخدم: {self.current_user['full_name'] if self.current_user else 'غير محدد'}\n")
                f.write(f"حجم الملف: {os.path.getsize(backup_path) / (1024 * 1024):.2f} MB\n")

            # حساب عدد النسخ الاحتياطية
            backup_count = len([f for f in os.listdir(backup_dir) if f.endswith('.db')])

            messagebox.showinfo(
                "نجاح",
                f"تم إنشاء النسخة الاحتياطية بنجاح\n\n"
                f"المسار: Backup\\{backup_filename}\n"
                f"عدد النسخ الاحتياطية: {backup_count}"
            )

            # اختياري: حذف النسخ القديمة (الاحتفاظ بآخر 10 نسخ فقط)
            self._cleanup_old_backups(backup_dir, keep_count=10)

        except Exception as e:
            messagebox.showerror("خطأ", f"فشل إنشاء النسخة الاحتياطية:\n{str(e)}")

    def _browse_backups(self):
        """استعراض واستعادة النسخ الاحتياطية من مجلد Backup"""
        import os

        # التحقق من وجود مجلد النسخ الاحتياطي
        backup_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Backup")
        if not os.path.exists(backup_dir):
            messagebox.showwarning("تنبيه", "لا يوجد مجلد للنسخ الاحتياطية")
            return

        # الحصول على قائمة النسخ الاحتياطية
        backup_files = [f for f in os.listdir(backup_dir) if f.endswith('.db') and f.startswith('backup_')]

        if not backup_files:
            messagebox.showwarning("تنبيه", "لا توجد نسخ احتياطية")
            return

        # ترتيب النسخ حسب التاريخ (الأحدث أولاً)
        backup_files.sort(reverse=True)

        # نافذة استعراض النسخ الاحتياطية
        browse_window = tk.Toplevel(self)
        browse_window.title("استعراض النسخ الاحتياطية")
        browse_window.geometry("600x500")
        browse_window.configure(bg=self.COLORS["background"])
        browse_window.transient(self)
        browse_window.grab_set()

        # توسيط النافذة
        browse_window.update_idletasks()
        x = (browse_window.winfo_screenwidth() - 600) // 2
        y = (browse_window.winfo_screenheight() - 500) // 2
        browse_window.geometry(f"600x500+{x}+{y}")

        # شريط العنوان
        header_frame = tk.Frame(browse_window, bg="#1976D2", height=60)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        tk.Label(
            header_frame,
            text="النسخ الاحتياطية المتوفرة",
            font=("Tajawal", 18, "bold"),
            bg="#1976D2",
            fg="white"
        ).pack(expand=True)

        # إطار القائمة
        list_frame = tk.Frame(browse_window, bg=self.COLORS["surface"], bd=2, relief=tk.RIDGE)
        list_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # شريط التمرير
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # قائمة النسخ
        listbox = tk.Listbox(
            list_frame,
            font=("Tajawal", 12),
            yscrollcommand=scrollbar.set,
            selectbackground="#1976D2",
            selectforeground="white",
            height=12
        )
        listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=listbox.yview)

        # إضافة النسخ إلى القائمة
        for backup_file in backup_files:
            # استخراج التاريخ والوقت من اسم الملف
            try:
                date_time = backup_file.replace('backup_', '').replace('.db', '')
                date_part = date_time[:8]
                time_part = date_time[9:]

                formatted_date = f"{date_part[:4]}-{date_part[4:6]}-{date_part[6:8]}"
                formatted_time = f"{time_part[:2]}:{time_part[2:4]}:{time_part[4:6]}"

                # الحصول على حجم الملف
                file_path = os.path.join(backup_dir, backup_file)
                file_size = os.path.getsize(file_path) / (1024 * 1024)

                display_text = f"{formatted_date} - {formatted_time} ({file_size:.2f} MB)"
            except:
                display_text = backup_file

            listbox.insert(tk.END, display_text)

        # إطار الأزرار
        buttons_frame = tk.Frame(browse_window, bg=self.COLORS["background"])
        buttons_frame.pack(fill=tk.X, pady=10)

        def restore_selected():
            selection = listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار نسخة احتياطية")
                return

            selected_file = backup_files[selection[0]]
            backup_path = os.path.join(backup_dir, selected_file)

            if messagebox.askyesno(
                    "تأكيد الاستعادة",
                    "سيتم استبدال جميع البيانات الحالية\n\n"
                    "هل تريد المتابعة؟",
                    icon="warning"
            ):
                import shutil
                import sys

                try:
                    # إغلاق الاتصال بقاعدة البيانات
                    self.db_conn.close()

                    # نسخ احتياطي مؤقت للبيانات الحالية
                    temp_backup = f"temp_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
                    shutil.copy2("training_system.db", temp_backup)

                    # استعادة النسخة الاحتياطية
                    shutil.copy2(backup_path, "training_system.db")

                    # حذف النسخة المؤقتة
                    try:
                        os.remove(temp_backup)
                    except:
                        pass

                    messagebox.showinfo(
                        "نجاح",
                        "تمت استعادة النسخة الاحتياطية بنجاح\n\n"
                        "سيتم إعادة تشغيل البرنامج"
                    )

                    browse_window.destroy()

                    # إعادة تشغيل البرنامج
                    python = sys.executable
                    os.execl(python, python, *sys.argv)

                except Exception as e:
                    messagebox.showerror("خطأ", f"فشلت الاستعادة:\n{str(e)}")
                    # محاولة إعادة الاتصال
                    try:
                        self.db_conn = sqlite3.connect("training_system.db")
                    except:
                        pass

        # زر الاستعادة
        restore_btn = tk.Button(
            buttons_frame,
            text="استعادة النسخة المحددة",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=restore_selected
        )
        restore_btn.pack(side=tk.LEFT, padx=20)

        # زر الإغلاق
        close_btn = tk.Button(
            buttons_frame,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["dark"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=browse_window.destroy
        )
        close_btn.pack(side=tk.RIGHT, padx=20)

    def _cleanup_old_backups(self, backup_dir, keep_count=10):
        """حذف النسخ الاحتياطية القديمة والاحتفاظ بعدد محدد"""
        try:
            import os

            # الحصول على قائمة ملفات النسخ الاحتياطية
            backup_files = []
            for file in os.listdir(backup_dir):
                if file.endswith('.db') and file.startswith('backup_'):
                    file_path = os.path.join(backup_dir, file)
                    backup_files.append((file_path, os.path.getmtime(file_path)))

            # ترتيب حسب تاريخ التعديل (الأحدث أولاً)
            backup_files.sort(key=lambda x: x[1], reverse=True)

            # حذف النسخ القديمة الزائدة
            for file_path, _ in backup_files[keep_count:]:
                try:
                    os.remove(file_path)
                    # حذف ملف المعلومات المرتبط إن وجد
                    info_path = file_path.replace('.db', '_info.txt')
                    if os.path.exists(info_path):
                        os.remove(info_path)
                except:
                    pass

        except Exception as e:
            print(f"خطأ في تنظيف النسخ القديمة: {e}")

    def _reset_system(self):
        """إعادة تعيين النظام بالكامل - حذف جميع البيانات"""
        # تحذير أول
        if not messagebox.askyesno(
                "تحذير",
                "هل أنت متأكد من رغبتك في إعادة تعيين النظام؟\n\n"
                "سيتم حذف جميع البيانات نهائياً!",
                icon="warning"
        ):
            return

        # تحذير ثاني
        if not messagebox.askyesno(
                "تحذير نهائي",
                "هذا آخر تحذير!\n\n"
                "سيتم حذف:\n"
                "• جميع المدرسين\n"
                "• جميع البرامج والجداول\n"
                "• جميع مسميات الدورات\n"
                "• جميع هيئة التدريس\n\n"
                "هل أنت متأكد تماماً؟",
                icon="warning"
        ):
            return

        # طلب كلمة تأكيد
        confirm_dialog = tk.Toplevel(self)
        confirm_dialog.title("تأكيد إعادة التعيين")
        confirm_dialog.geometry("400x200")
        confirm_dialog.configure(bg=self.COLORS["surface"])
        confirm_dialog.transient(self)
        confirm_dialog.grab_set()

        # توسيط النافذة
        confirm_dialog.update_idletasks()
        x = (confirm_dialog.winfo_screenwidth() - 400) // 2
        y = (confirm_dialog.winfo_screenheight() - 200) // 2
        confirm_dialog.geometry(f"400x200+{x}+{y}")

        # المحتوى
        content = tk.Frame(confirm_dialog, bg=self.COLORS["surface"], padx=20, pady=20)
        content.pack(fill=tk.BOTH, expand=True)

        tk.Label(
            content,
            text="اكتب 'حذف الكل' للتأكيد:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(pady=(0, 10))

        confirm_entry = tk.Entry(
            content,
            font=("Tajawal", 14),
            width=30
        )
        confirm_entry.pack(pady=10)
        confirm_entry.focus()

        result = {"confirmed": False}

        def check_confirmation():
            if confirm_entry.get() == "حذف الكل":
                result["confirmed"] = True
                confirm_dialog.destroy()
            else:
                messagebox.showerror("خطأ", "كلمة التأكيد غير صحيحة")
                confirm_entry.delete(0, tk.END)

        tk.Button(
            content,
            text="تأكيد",
            font=("Tajawal", 12, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            command=check_confirmation
        ).pack(pady=10)

        confirm_dialog.wait_window()

        if not result["confirmed"]:
            return

        # تنفيذ إعادة التعيين
        try:
            cursor = self.db_conn.cursor()

            # حذف جميع البيانات من جميع الجداول
            tables_to_clear = [
                "teachers",
                "teacher_courses",
                "training_programs",
                "program_subjects",
                "program_schedule",
                "course_names",
                "course_teacher_paths"
            ]

            for table in tables_to_clear:
                cursor.execute(f"DELETE FROM {table}")

            # إعادة تعيين عدادات AUTO_INCREMENT
            for table in tables_to_clear:
                cursor.execute(f"DELETE FROM sqlite_sequence WHERE name='{table}'")

            self.db_conn.commit()

            messagebox.showinfo(
                "تم",
                "تمت إعادة تعيين النظام بنجاح\n\n"
                "جميع البيانات تم حذفها"
            )

            # تحديث جميع الواجهات
            if hasattr(self, '_load_teachers'):
                self._load_teachers()
            if hasattr(self, '_load_training_programs'):
                self._load_training_programs()

        except Exception as e:
            self.db_conn.rollback()
            messagebox.showerror("خطأ", f"فشلت عملية إعادة التعيين:\n{str(e)}")

    def _create_database_tables(self):
        """إنشاء جداول قاعدة البيانات"""
        try:
            cursor = self.db_conn.cursor()

            # جدول المدرسين
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS teachers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    rank TEXT,
                    id_number TEXT UNIQUE NOT NULL,
                    phone TEXT,
                    workplace TEXT,
                    qualification TEXT,
                    category TEXT,
                    created_date TEXT
                )
            """)

            # جدول الدورات للمدرسين
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS teacher_courses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    teacher_id INTEGER,
                    course_name TEXT,
                    course_date TEXT,
                    FOREIGN KEY (teacher_id) REFERENCES teachers(id) ON DELETE CASCADE
                )
            """)

            # جدول البرامج التدريبية
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS training_programs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    program_number TEXT UNIQUE NOT NULL,
                    course_name_id INTEGER,
                    start_date TEXT,
                    end_date TEXT,
                    category TEXT,
                    created_date TEXT,
                    schedule_type TEXT DEFAULT 'multiple',
                    FOREIGN KEY (course_name_id) REFERENCES course_names(id),
                    UNIQUE(program_number)
                )
            """)

            # جدول مواد البرامج التدريبية
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS program_subjects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    program_id INTEGER,
                    subject_name TEXT NOT NULL,
                    subject_order INTEGER,
                    subject_category TEXT DEFAULT 'general',
                    FOREIGN KEY (program_id) REFERENCES training_programs(id) ON DELETE CASCADE
                )
            """)

            # جدول مسميات الدورات
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS course_names (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    created_date TEXT,
                    is_active INTEGER DEFAULT 1
                )
            """)

            # جدول مسارات مدرسي الدورات - محدث للسماح بالتكرار
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS course_teacher_paths (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    course_name TEXT NOT NULL,
                    teacher_id INTEGER NOT NULL,
                    is_responsible INTEGER DEFAULT 0,
                    created_date TEXT,
                    FOREIGN KEY (teacher_id) REFERENCES teachers(id) ON DELETE CASCADE
                )
            """)

            # إزالة القيد UNIQUE من course_teacher_paths إذا كان موجوداً
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS course_teacher_paths_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    course_name TEXT NOT NULL,
                    teacher_id INTEGER NOT NULL,
                    is_responsible INTEGER DEFAULT 0,
                    created_date TEXT,
                    FOREIGN KEY (teacher_id) REFERENCES teachers(id) ON DELETE CASCADE
                )
            """)

            # نقل البيانات الموجودة
            cursor.execute("""
                INSERT OR IGNORE INTO course_teacher_paths_new (course_name, teacher_id, is_responsible, created_date)
                SELECT course_name, teacher_id, is_responsible, created_date FROM course_teacher_paths
            """)

            # حذف الجدول القديم وإعادة تسمية الجديد
            cursor.execute("DROP TABLE IF EXISTS course_teacher_paths")
            cursor.execute("ALTER TABLE course_teacher_paths_new RENAME TO course_teacher_paths")

            # جدول المواد العامة
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS general_subjects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    subject_name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    created_date TEXT
                )
            """)

            # جدول المواد التخصصية
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS specialized_subjects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    course_name TEXT NOT NULL,
                    subject_name TEXT NOT NULL,
                    description TEXT,
                    created_date TEXT,
                    UNIQUE(course_name, subject_name)
                )
            """)

            # جدول الجدول الدراسي
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS program_schedule (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    program_id INTEGER NOT NULL,
                    week_number INTEGER NOT NULL DEFAULT 1,
                    day_of_week INTEGER NOT NULL,
                    period_number INTEGER NOT NULL,
                    start_time TEXT NOT NULL,
                    end_time TEXT NOT NULL,
                    subject_id INTEGER,
                    teacher_id INTEGER,
                    subject_type TEXT DEFAULT 'نظري',
                    is_break INTEGER DEFAULT 0,
                    break_name TEXT,
                    location TEXT DEFAULT 'المقر التدريبي',
                    is_special_week INTEGER DEFAULT 0,
                    special_week_name TEXT,
                    teacher_name TEXT,
                    FOREIGN KEY (program_id) REFERENCES training_programs(id) ON DELETE CASCADE,
                    FOREIGN KEY (subject_id) REFERENCES program_subjects(id) ON DELETE SET NULL,
                    FOREIGN KEY (teacher_id) REFERENCES teachers(id) ON DELETE SET NULL,
                    UNIQUE(program_id, week_number, day_of_week, period_number)
                )
            """)

            # جدول أوقات الحصص الافتراضية
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS default_periods (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    period_number INTEGER NOT NULL,
                    start_time TEXT NOT NULL,
                    end_time TEXT NOT NULL,
                    is_break INTEGER DEFAULT 0,
                    break_name TEXT
                )
            """)

            # التحقق من وجود أوقات افتراضية
            cursor.execute("SELECT COUNT(*) FROM default_periods")
            if cursor.fetchone()[0] == 0:
                default_times = [
                    (1, "08:00", "08:45", 0, None),
                    (2, "09:15", "10:00", 0, None),
                    (3, "10:05", "10:50", 0, None),
                    (4, "10:55", "11:40", 0, None)
                ]
                for period in default_times:
                    cursor.execute("""
                        INSERT INTO default_periods (period_number, start_time, end_time, is_break, break_name)
                        VALUES (?, ?, ?, ?, ?)
                    """, period)

            # إضافة عمود subject_category إذا لم يكن موجوداً
            cursor.execute("PRAGMA table_info(program_subjects)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'subject_category' not in columns:
                cursor.execute("ALTER TABLE program_subjects ADD COLUMN subject_category TEXT DEFAULT 'general'")

            self.db_conn.commit()

        except Exception as e:
            print(f"خطأ في إنشاء الجداول: {str(e)}")

    def _open_user_management(self):
        """فتح نافذة إدارة المستخدمين"""
        if not self.current_user["permissions"]["is_admin"]:
            messagebox.showerror("خطأ", "ليس لديك صلاحية الوصول لإدارة المستخدمين")
            return

        UserManagement(self, self.db_conn, self.current_user, self.COLORS, self.FONTS)


if __name__ == "__main__":
    root = tk.Tk()
    LoginSystem(root)
    root.mainloop()
